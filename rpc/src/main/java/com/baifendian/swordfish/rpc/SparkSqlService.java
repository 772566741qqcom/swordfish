/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baifendian.swordfish.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SparkSqlService {

  /**
   * spark sql server接口
   */
  public interface Iface {

    /**
     * 执行某个 spark sql 节点
     * 
     * 
     * @param jobId
     * @param udfs
     * @param sql
     * @param remainTime
     */
    public RetInfo execEtl(String jobId, List<UdfInfo> udfs, List<String> sql, int remainTime) throws org.apache.thrift.TException;

    /**
     * 执行某个 adhoc
     * 
     * 
     * @param jobId
     * @param udfs
     * @param sql
     * @param queryLimit
     * @param remainTime
     */
    public RetInfo execAdhoc(String jobId, List<UdfInfo> udfs, List<String> sql, int queryLimit, int remainTime) throws org.apache.thrift.TException;

    /**
     * 取消在执行的spark sql
     * 
     * jobId : job id
     * 
     * @param jobId
     */
    public RetInfo cancelExecFlow(String jobId) throws org.apache.thrift.TException;

    /**
     * 获取adhoc的结果
     * 
     * @param jobId
     * @param index
     */
    public AdhocResultRet getAdhocResult(String jobId, int index) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void execEtl(String jobId, List<UdfInfo> udfs, List<String> sql, int remainTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void execAdhoc(String jobId, List<UdfInfo> udfs, List<String> sql, int queryLimit, int remainTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void cancelExecFlow(String jobId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAdhocResult(String jobId, int index, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public RetInfo execEtl(String jobId, List<UdfInfo> udfs, List<String> sql, int remainTime) throws org.apache.thrift.TException
    {
      send_execEtl(jobId, udfs, sql, remainTime);
      return recv_execEtl();
    }

    public void send_execEtl(String jobId, List<UdfInfo> udfs, List<String> sql, int remainTime) throws org.apache.thrift.TException
    {
      execEtl_args args = new execEtl_args();
      args.setJobId(jobId);
      args.setUdfs(udfs);
      args.setSql(sql);
      args.setRemainTime(remainTime);
      sendBase("execEtl", args);
    }

    public RetInfo recv_execEtl() throws org.apache.thrift.TException
    {
      execEtl_result result = new execEtl_result();
      receiveBase(result, "execEtl");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "execEtl failed: unknown result");
    }

    public RetInfo execAdhoc(String jobId, List<UdfInfo> udfs, List<String> sql, int queryLimit, int remainTime) throws org.apache.thrift.TException
    {
      send_execAdhoc(jobId, udfs, sql, queryLimit, remainTime);
      return recv_execAdhoc();
    }

    public void send_execAdhoc(String jobId, List<UdfInfo> udfs, List<String> sql, int queryLimit, int remainTime) throws org.apache.thrift.TException
    {
      execAdhoc_args args = new execAdhoc_args();
      args.setJobId(jobId);
      args.setUdfs(udfs);
      args.setSql(sql);
      args.setQueryLimit(queryLimit);
      args.setRemainTime(remainTime);
      sendBase("execAdhoc", args);
    }

    public RetInfo recv_execAdhoc() throws org.apache.thrift.TException
    {
      execAdhoc_result result = new execAdhoc_result();
      receiveBase(result, "execAdhoc");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "execAdhoc failed: unknown result");
    }

    public RetInfo cancelExecFlow(String jobId) throws org.apache.thrift.TException
    {
      send_cancelExecFlow(jobId);
      return recv_cancelExecFlow();
    }

    public void send_cancelExecFlow(String jobId) throws org.apache.thrift.TException
    {
      cancelExecFlow_args args = new cancelExecFlow_args();
      args.setJobId(jobId);
      sendBase("cancelExecFlow", args);
    }

    public RetInfo recv_cancelExecFlow() throws org.apache.thrift.TException
    {
      cancelExecFlow_result result = new cancelExecFlow_result();
      receiveBase(result, "cancelExecFlow");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cancelExecFlow failed: unknown result");
    }

    public AdhocResultRet getAdhocResult(String jobId, int index) throws org.apache.thrift.TException
    {
      send_getAdhocResult(jobId, index);
      return recv_getAdhocResult();
    }

    public void send_getAdhocResult(String jobId, int index) throws org.apache.thrift.TException
    {
      getAdhocResult_args args = new getAdhocResult_args();
      args.setJobId(jobId);
      args.setIndex(index);
      sendBase("getAdhocResult", args);
    }

    public AdhocResultRet recv_getAdhocResult() throws org.apache.thrift.TException
    {
      getAdhocResult_result result = new getAdhocResult_result();
      receiveBase(result, "getAdhocResult");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAdhocResult failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void execEtl(String jobId, List<UdfInfo> udfs, List<String> sql, int remainTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      execEtl_call method_call = new execEtl_call(jobId, udfs, sql, remainTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class execEtl_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String jobId;
      private List<UdfInfo> udfs;
      private List<String> sql;
      private int remainTime;
      public execEtl_call(String jobId, List<UdfInfo> udfs, List<String> sql, int remainTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jobId = jobId;
        this.udfs = udfs;
        this.sql = sql;
        this.remainTime = remainTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("execEtl", org.apache.thrift.protocol.TMessageType.CALL, 0));
        execEtl_args args = new execEtl_args();
        args.setJobId(jobId);
        args.setUdfs(udfs);
        args.setSql(sql);
        args.setRemainTime(remainTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RetInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_execEtl();
      }
    }

    public void execAdhoc(String jobId, List<UdfInfo> udfs, List<String> sql, int queryLimit, int remainTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      execAdhoc_call method_call = new execAdhoc_call(jobId, udfs, sql, queryLimit, remainTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class execAdhoc_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String jobId;
      private List<UdfInfo> udfs;
      private List<String> sql;
      private int queryLimit;
      private int remainTime;
      public execAdhoc_call(String jobId, List<UdfInfo> udfs, List<String> sql, int queryLimit, int remainTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jobId = jobId;
        this.udfs = udfs;
        this.sql = sql;
        this.queryLimit = queryLimit;
        this.remainTime = remainTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("execAdhoc", org.apache.thrift.protocol.TMessageType.CALL, 0));
        execAdhoc_args args = new execAdhoc_args();
        args.setJobId(jobId);
        args.setUdfs(udfs);
        args.setSql(sql);
        args.setQueryLimit(queryLimit);
        args.setRemainTime(remainTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RetInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_execAdhoc();
      }
    }

    public void cancelExecFlow(String jobId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cancelExecFlow_call method_call = new cancelExecFlow_call(jobId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cancelExecFlow_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String jobId;
      public cancelExecFlow_call(String jobId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jobId = jobId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancelExecFlow", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cancelExecFlow_args args = new cancelExecFlow_args();
        args.setJobId(jobId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RetInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cancelExecFlow();
      }
    }

    public void getAdhocResult(String jobId, int index, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAdhocResult_call method_call = new getAdhocResult_call(jobId, index, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAdhocResult_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String jobId;
      private int index;
      public getAdhocResult_call(String jobId, int index, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jobId = jobId;
        this.index = index;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAdhocResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAdhocResult_args args = new getAdhocResult_args();
        args.setJobId(jobId);
        args.setIndex(index);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AdhocResultRet getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAdhocResult();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("execEtl", new execEtl());
      processMap.put("execAdhoc", new execAdhoc());
      processMap.put("cancelExecFlow", new cancelExecFlow());
      processMap.put("getAdhocResult", new getAdhocResult());
      return processMap;
    }

    public static class execEtl<I extends Iface> extends org.apache.thrift.ProcessFunction<I, execEtl_args> {
      public execEtl() {
        super("execEtl");
      }

      public execEtl_args getEmptyArgsInstance() {
        return new execEtl_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public execEtl_result getResult(I iface, execEtl_args args) throws org.apache.thrift.TException {
        execEtl_result result = new execEtl_result();
        result.success = iface.execEtl(args.jobId, args.udfs, args.sql, args.remainTime);
        return result;
      }
    }

    public static class execAdhoc<I extends Iface> extends org.apache.thrift.ProcessFunction<I, execAdhoc_args> {
      public execAdhoc() {
        super("execAdhoc");
      }

      public execAdhoc_args getEmptyArgsInstance() {
        return new execAdhoc_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public execAdhoc_result getResult(I iface, execAdhoc_args args) throws org.apache.thrift.TException {
        execAdhoc_result result = new execAdhoc_result();
        result.success = iface.execAdhoc(args.jobId, args.udfs, args.sql, args.queryLimit, args.remainTime);
        return result;
      }
    }

    public static class cancelExecFlow<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancelExecFlow_args> {
      public cancelExecFlow() {
        super("cancelExecFlow");
      }

      public cancelExecFlow_args getEmptyArgsInstance() {
        return new cancelExecFlow_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cancelExecFlow_result getResult(I iface, cancelExecFlow_args args) throws org.apache.thrift.TException {
        cancelExecFlow_result result = new cancelExecFlow_result();
        result.success = iface.cancelExecFlow(args.jobId);
        return result;
      }
    }

    public static class getAdhocResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAdhocResult_args> {
      public getAdhocResult() {
        super("getAdhocResult");
      }

      public getAdhocResult_args getEmptyArgsInstance() {
        return new getAdhocResult_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAdhocResult_result getResult(I iface, getAdhocResult_args args) throws org.apache.thrift.TException {
        getAdhocResult_result result = new getAdhocResult_result();
        result.success = iface.getAdhocResult(args.jobId, args.index);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("execEtl", new execEtl());
      processMap.put("execAdhoc", new execAdhoc());
      processMap.put("cancelExecFlow", new cancelExecFlow());
      processMap.put("getAdhocResult", new getAdhocResult());
      return processMap;
    }

    public static class execEtl<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, execEtl_args, RetInfo> {
      public execEtl() {
        super("execEtl");
      }

      public execEtl_args getEmptyArgsInstance() {
        return new execEtl_args();
      }

      public AsyncMethodCallback<RetInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RetInfo>() { 
          public void onComplete(RetInfo o) {
            execEtl_result result = new execEtl_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            execEtl_result result = new execEtl_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, execEtl_args args, org.apache.thrift.async.AsyncMethodCallback<RetInfo> resultHandler) throws TException {
        iface.execEtl(args.jobId, args.udfs, args.sql, args.remainTime,resultHandler);
      }
    }

    public static class execAdhoc<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, execAdhoc_args, RetInfo> {
      public execAdhoc() {
        super("execAdhoc");
      }

      public execAdhoc_args getEmptyArgsInstance() {
        return new execAdhoc_args();
      }

      public AsyncMethodCallback<RetInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RetInfo>() { 
          public void onComplete(RetInfo o) {
            execAdhoc_result result = new execAdhoc_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            execAdhoc_result result = new execAdhoc_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, execAdhoc_args args, org.apache.thrift.async.AsyncMethodCallback<RetInfo> resultHandler) throws TException {
        iface.execAdhoc(args.jobId, args.udfs, args.sql, args.queryLimit, args.remainTime,resultHandler);
      }
    }

    public static class cancelExecFlow<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cancelExecFlow_args, RetInfo> {
      public cancelExecFlow() {
        super("cancelExecFlow");
      }

      public cancelExecFlow_args getEmptyArgsInstance() {
        return new cancelExecFlow_args();
      }

      public AsyncMethodCallback<RetInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RetInfo>() { 
          public void onComplete(RetInfo o) {
            cancelExecFlow_result result = new cancelExecFlow_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            cancelExecFlow_result result = new cancelExecFlow_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cancelExecFlow_args args, org.apache.thrift.async.AsyncMethodCallback<RetInfo> resultHandler) throws TException {
        iface.cancelExecFlow(args.jobId,resultHandler);
      }
    }

    public static class getAdhocResult<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAdhocResult_args, AdhocResultRet> {
      public getAdhocResult() {
        super("getAdhocResult");
      }

      public getAdhocResult_args getEmptyArgsInstance() {
        return new getAdhocResult_args();
      }

      public AsyncMethodCallback<AdhocResultRet> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<AdhocResultRet>() { 
          public void onComplete(AdhocResultRet o) {
            getAdhocResult_result result = new getAdhocResult_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAdhocResult_result result = new getAdhocResult_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAdhocResult_args args, org.apache.thrift.async.AsyncMethodCallback<AdhocResultRet> resultHandler) throws TException {
        iface.getAdhocResult(args.jobId, args.index,resultHandler);
      }
    }

  }

  public static class execEtl_args implements org.apache.thrift.TBase<execEtl_args, execEtl_args._Fields>, java.io.Serializable, Cloneable, Comparable<execEtl_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("execEtl_args");

    private static final org.apache.thrift.protocol.TField JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField UDFS_FIELD_DESC = new org.apache.thrift.protocol.TField("udfs", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("sql", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField REMAIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("remainTime", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new execEtl_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new execEtl_argsTupleSchemeFactory());
    }

    public String jobId; // required
    public List<UdfInfo> udfs; // required
    public List<String> sql; // required
    public int remainTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_ID((short)1, "jobId"),
      UDFS((short)2, "udfs"),
      SQL((short)3, "sql"),
      REMAIN_TIME((short)4, "remainTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_ID
            return JOB_ID;
          case 2: // UDFS
            return UDFS;
          case 3: // SQL
            return SQL;
          case 4: // REMAIN_TIME
            return REMAIN_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REMAINTIME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("jobId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UDFS, new org.apache.thrift.meta_data.FieldMetaData("udfs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UdfInfo.class))));
      tmpMap.put(_Fields.SQL, new org.apache.thrift.meta_data.FieldMetaData("sql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.REMAIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("remainTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(execEtl_args.class, metaDataMap);
    }

    public execEtl_args() {
    }

    public execEtl_args(
      String jobId,
      List<UdfInfo> udfs,
      List<String> sql,
      int remainTime)
    {
      this();
      this.jobId = jobId;
      this.udfs = udfs;
      this.sql = sql;
      this.remainTime = remainTime;
      setRemainTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public execEtl_args(execEtl_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetJobId()) {
        this.jobId = other.jobId;
      }
      if (other.isSetUdfs()) {
        List<UdfInfo> __this__udfs = new ArrayList<UdfInfo>(other.udfs.size());
        for (UdfInfo other_element : other.udfs) {
          __this__udfs.add(new UdfInfo(other_element));
        }
        this.udfs = __this__udfs;
      }
      if (other.isSetSql()) {
        List<String> __this__sql = new ArrayList<String>(other.sql);
        this.sql = __this__sql;
      }
      this.remainTime = other.remainTime;
    }

    public execEtl_args deepCopy() {
      return new execEtl_args(this);
    }

    @Override
    public void clear() {
      this.jobId = null;
      this.udfs = null;
      this.sql = null;
      setRemainTimeIsSet(false);
      this.remainTime = 0;
    }

    public String getJobId() {
      return this.jobId;
    }

    public execEtl_args setJobId(String jobId) {
      this.jobId = jobId;
      return this;
    }

    public void unsetJobId() {
      this.jobId = null;
    }

    /** Returns true if field jobId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobId() {
      return this.jobId != null;
    }

    public void setJobIdIsSet(boolean value) {
      if (!value) {
        this.jobId = null;
      }
    }

    public int getUdfsSize() {
      return (this.udfs == null) ? 0 : this.udfs.size();
    }

    public java.util.Iterator<UdfInfo> getUdfsIterator() {
      return (this.udfs == null) ? null : this.udfs.iterator();
    }

    public void addToUdfs(UdfInfo elem) {
      if (this.udfs == null) {
        this.udfs = new ArrayList<UdfInfo>();
      }
      this.udfs.add(elem);
    }

    public List<UdfInfo> getUdfs() {
      return this.udfs;
    }

    public execEtl_args setUdfs(List<UdfInfo> udfs) {
      this.udfs = udfs;
      return this;
    }

    public void unsetUdfs() {
      this.udfs = null;
    }

    /** Returns true if field udfs is set (has been assigned a value) and false otherwise */
    public boolean isSetUdfs() {
      return this.udfs != null;
    }

    public void setUdfsIsSet(boolean value) {
      if (!value) {
        this.udfs = null;
      }
    }

    public int getSqlSize() {
      return (this.sql == null) ? 0 : this.sql.size();
    }

    public java.util.Iterator<String> getSqlIterator() {
      return (this.sql == null) ? null : this.sql.iterator();
    }

    public void addToSql(String elem) {
      if (this.sql == null) {
        this.sql = new ArrayList<String>();
      }
      this.sql.add(elem);
    }

    public List<String> getSql() {
      return this.sql;
    }

    public execEtl_args setSql(List<String> sql) {
      this.sql = sql;
      return this;
    }

    public void unsetSql() {
      this.sql = null;
    }

    /** Returns true if field sql is set (has been assigned a value) and false otherwise */
    public boolean isSetSql() {
      return this.sql != null;
    }

    public void setSqlIsSet(boolean value) {
      if (!value) {
        this.sql = null;
      }
    }

    public int getRemainTime() {
      return this.remainTime;
    }

    public execEtl_args setRemainTime(int remainTime) {
      this.remainTime = remainTime;
      setRemainTimeIsSet(true);
      return this;
    }

    public void unsetRemainTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REMAINTIME_ISSET_ID);
    }

    /** Returns true if field remainTime is set (has been assigned a value) and false otherwise */
    public boolean isSetRemainTime() {
      return EncodingUtils.testBit(__isset_bitfield, __REMAINTIME_ISSET_ID);
    }

    public void setRemainTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REMAINTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_ID:
        if (value == null) {
          unsetJobId();
        } else {
          setJobId((String)value);
        }
        break;

      case UDFS:
        if (value == null) {
          unsetUdfs();
        } else {
          setUdfs((List<UdfInfo>)value);
        }
        break;

      case SQL:
        if (value == null) {
          unsetSql();
        } else {
          setSql((List<String>)value);
        }
        break;

      case REMAIN_TIME:
        if (value == null) {
          unsetRemainTime();
        } else {
          setRemainTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_ID:
        return getJobId();

      case UDFS:
        return getUdfs();

      case SQL:
        return getSql();

      case REMAIN_TIME:
        return Integer.valueOf(getRemainTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_ID:
        return isSetJobId();
      case UDFS:
        return isSetUdfs();
      case SQL:
        return isSetSql();
      case REMAIN_TIME:
        return isSetRemainTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof execEtl_args)
        return this.equals((execEtl_args)that);
      return false;
    }

    public boolean equals(execEtl_args that) {
      if (that == null)
        return false;

      boolean this_present_jobId = true && this.isSetJobId();
      boolean that_present_jobId = true && that.isSetJobId();
      if (this_present_jobId || that_present_jobId) {
        if (!(this_present_jobId && that_present_jobId))
          return false;
        if (!this.jobId.equals(that.jobId))
          return false;
      }

      boolean this_present_udfs = true && this.isSetUdfs();
      boolean that_present_udfs = true && that.isSetUdfs();
      if (this_present_udfs || that_present_udfs) {
        if (!(this_present_udfs && that_present_udfs))
          return false;
        if (!this.udfs.equals(that.udfs))
          return false;
      }

      boolean this_present_sql = true && this.isSetSql();
      boolean that_present_sql = true && that.isSetSql();
      if (this_present_sql || that_present_sql) {
        if (!(this_present_sql && that_present_sql))
          return false;
        if (!this.sql.equals(that.sql))
          return false;
      }

      boolean this_present_remainTime = true;
      boolean that_present_remainTime = true;
      if (this_present_remainTime || that_present_remainTime) {
        if (!(this_present_remainTime && that_present_remainTime))
          return false;
        if (this.remainTime != that.remainTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(execEtl_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobId()).compareTo(other.isSetJobId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobId, other.jobId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUdfs()).compareTo(other.isSetUdfs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUdfs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.udfs, other.udfs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSql()).compareTo(other.isSetSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql, other.sql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRemainTime()).compareTo(other.isSetRemainTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRemainTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remainTime, other.remainTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("execEtl_args(");
      boolean first = true;

      sb.append("jobId:");
      if (this.jobId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("udfs:");
      if (this.udfs == null) {
        sb.append("null");
      } else {
        sb.append(this.udfs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sql:");
      if (this.sql == null) {
        sb.append("null");
      } else {
        sb.append(this.sql);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("remainTime:");
      sb.append(this.remainTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class execEtl_argsStandardSchemeFactory implements SchemeFactory {
      public execEtl_argsStandardScheme getScheme() {
        return new execEtl_argsStandardScheme();
      }
    }

    private static class execEtl_argsStandardScheme extends StandardScheme<execEtl_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, execEtl_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobId = iprot.readString();
                struct.setJobIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UDFS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.udfs = new ArrayList<UdfInfo>(_list56.size);
                  for (int _i57 = 0; _i57 < _list56.size; ++_i57)
                  {
                    UdfInfo _elem58;
                    _elem58 = new UdfInfo();
                    _elem58.read(iprot);
                    struct.udfs.add(_elem58);
                  }
                  iprot.readListEnd();
                }
                struct.setUdfsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list59 = iprot.readListBegin();
                  struct.sql = new ArrayList<String>(_list59.size);
                  for (int _i60 = 0; _i60 < _list59.size; ++_i60)
                  {
                    String _elem61;
                    _elem61 = iprot.readString();
                    struct.sql.add(_elem61);
                  }
                  iprot.readListEnd();
                }
                struct.setSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REMAIN_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.remainTime = iprot.readI32();
                struct.setRemainTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, execEtl_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobId != null) {
          oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
          oprot.writeString(struct.jobId);
          oprot.writeFieldEnd();
        }
        if (struct.udfs != null) {
          oprot.writeFieldBegin(UDFS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.udfs.size()));
            for (UdfInfo _iter62 : struct.udfs)
            {
              _iter62.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.sql != null) {
          oprot.writeFieldBegin(SQL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.sql.size()));
            for (String _iter63 : struct.sql)
            {
              oprot.writeString(_iter63);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(REMAIN_TIME_FIELD_DESC);
        oprot.writeI32(struct.remainTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class execEtl_argsTupleSchemeFactory implements SchemeFactory {
      public execEtl_argsTupleScheme getScheme() {
        return new execEtl_argsTupleScheme();
      }
    }

    private static class execEtl_argsTupleScheme extends TupleScheme<execEtl_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, execEtl_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetJobId()) {
          optionals.set(0);
        }
        if (struct.isSetUdfs()) {
          optionals.set(1);
        }
        if (struct.isSetSql()) {
          optionals.set(2);
        }
        if (struct.isSetRemainTime()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetJobId()) {
          oprot.writeString(struct.jobId);
        }
        if (struct.isSetUdfs()) {
          {
            oprot.writeI32(struct.udfs.size());
            for (UdfInfo _iter64 : struct.udfs)
            {
              _iter64.write(oprot);
            }
          }
        }
        if (struct.isSetSql()) {
          {
            oprot.writeI32(struct.sql.size());
            for (String _iter65 : struct.sql)
            {
              oprot.writeString(_iter65);
            }
          }
        }
        if (struct.isSetRemainTime()) {
          oprot.writeI32(struct.remainTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, execEtl_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.jobId = iprot.readString();
          struct.setJobIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list66 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.udfs = new ArrayList<UdfInfo>(_list66.size);
            for (int _i67 = 0; _i67 < _list66.size; ++_i67)
            {
              UdfInfo _elem68;
              _elem68 = new UdfInfo();
              _elem68.read(iprot);
              struct.udfs.add(_elem68);
            }
          }
          struct.setUdfsIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.sql = new ArrayList<String>(_list69.size);
            for (int _i70 = 0; _i70 < _list69.size; ++_i70)
            {
              String _elem71;
              _elem71 = iprot.readString();
              struct.sql.add(_elem71);
            }
          }
          struct.setSqlIsSet(true);
        }
        if (incoming.get(3)) {
          struct.remainTime = iprot.readI32();
          struct.setRemainTimeIsSet(true);
        }
      }
    }

  }

  public static class execEtl_result implements org.apache.thrift.TBase<execEtl_result, execEtl_result._Fields>, java.io.Serializable, Cloneable, Comparable<execEtl_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("execEtl_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new execEtl_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new execEtl_resultTupleSchemeFactory());
    }

    public RetInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RetInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(execEtl_result.class, metaDataMap);
    }

    public execEtl_result() {
    }

    public execEtl_result(
      RetInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public execEtl_result(execEtl_result other) {
      if (other.isSetSuccess()) {
        this.success = new RetInfo(other.success);
      }
    }

    public execEtl_result deepCopy() {
      return new execEtl_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RetInfo getSuccess() {
      return this.success;
    }

    public execEtl_result setSuccess(RetInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RetInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof execEtl_result)
        return this.equals((execEtl_result)that);
      return false;
    }

    public boolean equals(execEtl_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(execEtl_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("execEtl_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class execEtl_resultStandardSchemeFactory implements SchemeFactory {
      public execEtl_resultStandardScheme getScheme() {
        return new execEtl_resultStandardScheme();
      }
    }

    private static class execEtl_resultStandardScheme extends StandardScheme<execEtl_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, execEtl_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RetInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, execEtl_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class execEtl_resultTupleSchemeFactory implements SchemeFactory {
      public execEtl_resultTupleScheme getScheme() {
        return new execEtl_resultTupleScheme();
      }
    }

    private static class execEtl_resultTupleScheme extends TupleScheme<execEtl_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, execEtl_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, execEtl_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RetInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class execAdhoc_args implements org.apache.thrift.TBase<execAdhoc_args, execAdhoc_args._Fields>, java.io.Serializable, Cloneable, Comparable<execAdhoc_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("execAdhoc_args");

    private static final org.apache.thrift.protocol.TField JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField UDFS_FIELD_DESC = new org.apache.thrift.protocol.TField("udfs", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("sql", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField QUERY_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("queryLimit", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField REMAIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("remainTime", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new execAdhoc_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new execAdhoc_argsTupleSchemeFactory());
    }

    public String jobId; // required
    public List<UdfInfo> udfs; // required
    public List<String> sql; // required
    public int queryLimit; // required
    public int remainTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_ID((short)1, "jobId"),
      UDFS((short)2, "udfs"),
      SQL((short)3, "sql"),
      QUERY_LIMIT((short)4, "queryLimit"),
      REMAIN_TIME((short)5, "remainTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_ID
            return JOB_ID;
          case 2: // UDFS
            return UDFS;
          case 3: // SQL
            return SQL;
          case 4: // QUERY_LIMIT
            return QUERY_LIMIT;
          case 5: // REMAIN_TIME
            return REMAIN_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __QUERYLIMIT_ISSET_ID = 0;
    private static final int __REMAINTIME_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("jobId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UDFS, new org.apache.thrift.meta_data.FieldMetaData("udfs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UdfInfo.class))));
      tmpMap.put(_Fields.SQL, new org.apache.thrift.meta_data.FieldMetaData("sql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.QUERY_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("queryLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REMAIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("remainTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(execAdhoc_args.class, metaDataMap);
    }

    public execAdhoc_args() {
    }

    public execAdhoc_args(
      String jobId,
      List<UdfInfo> udfs,
      List<String> sql,
      int queryLimit,
      int remainTime)
    {
      this();
      this.jobId = jobId;
      this.udfs = udfs;
      this.sql = sql;
      this.queryLimit = queryLimit;
      setQueryLimitIsSet(true);
      this.remainTime = remainTime;
      setRemainTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public execAdhoc_args(execAdhoc_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetJobId()) {
        this.jobId = other.jobId;
      }
      if (other.isSetUdfs()) {
        List<UdfInfo> __this__udfs = new ArrayList<UdfInfo>(other.udfs.size());
        for (UdfInfo other_element : other.udfs) {
          __this__udfs.add(new UdfInfo(other_element));
        }
        this.udfs = __this__udfs;
      }
      if (other.isSetSql()) {
        List<String> __this__sql = new ArrayList<String>(other.sql);
        this.sql = __this__sql;
      }
      this.queryLimit = other.queryLimit;
      this.remainTime = other.remainTime;
    }

    public execAdhoc_args deepCopy() {
      return new execAdhoc_args(this);
    }

    @Override
    public void clear() {
      this.jobId = null;
      this.udfs = null;
      this.sql = null;
      setQueryLimitIsSet(false);
      this.queryLimit = 0;
      setRemainTimeIsSet(false);
      this.remainTime = 0;
    }

    public String getJobId() {
      return this.jobId;
    }

    public execAdhoc_args setJobId(String jobId) {
      this.jobId = jobId;
      return this;
    }

    public void unsetJobId() {
      this.jobId = null;
    }

    /** Returns true if field jobId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobId() {
      return this.jobId != null;
    }

    public void setJobIdIsSet(boolean value) {
      if (!value) {
        this.jobId = null;
      }
    }

    public int getUdfsSize() {
      return (this.udfs == null) ? 0 : this.udfs.size();
    }

    public java.util.Iterator<UdfInfo> getUdfsIterator() {
      return (this.udfs == null) ? null : this.udfs.iterator();
    }

    public void addToUdfs(UdfInfo elem) {
      if (this.udfs == null) {
        this.udfs = new ArrayList<UdfInfo>();
      }
      this.udfs.add(elem);
    }

    public List<UdfInfo> getUdfs() {
      return this.udfs;
    }

    public execAdhoc_args setUdfs(List<UdfInfo> udfs) {
      this.udfs = udfs;
      return this;
    }

    public void unsetUdfs() {
      this.udfs = null;
    }

    /** Returns true if field udfs is set (has been assigned a value) and false otherwise */
    public boolean isSetUdfs() {
      return this.udfs != null;
    }

    public void setUdfsIsSet(boolean value) {
      if (!value) {
        this.udfs = null;
      }
    }

    public int getSqlSize() {
      return (this.sql == null) ? 0 : this.sql.size();
    }

    public java.util.Iterator<String> getSqlIterator() {
      return (this.sql == null) ? null : this.sql.iterator();
    }

    public void addToSql(String elem) {
      if (this.sql == null) {
        this.sql = new ArrayList<String>();
      }
      this.sql.add(elem);
    }

    public List<String> getSql() {
      return this.sql;
    }

    public execAdhoc_args setSql(List<String> sql) {
      this.sql = sql;
      return this;
    }

    public void unsetSql() {
      this.sql = null;
    }

    /** Returns true if field sql is set (has been assigned a value) and false otherwise */
    public boolean isSetSql() {
      return this.sql != null;
    }

    public void setSqlIsSet(boolean value) {
      if (!value) {
        this.sql = null;
      }
    }

    public int getQueryLimit() {
      return this.queryLimit;
    }

    public execAdhoc_args setQueryLimit(int queryLimit) {
      this.queryLimit = queryLimit;
      setQueryLimitIsSet(true);
      return this;
    }

    public void unsetQueryLimit() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUERYLIMIT_ISSET_ID);
    }

    /** Returns true if field queryLimit is set (has been assigned a value) and false otherwise */
    public boolean isSetQueryLimit() {
      return EncodingUtils.testBit(__isset_bitfield, __QUERYLIMIT_ISSET_ID);
    }

    public void setQueryLimitIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUERYLIMIT_ISSET_ID, value);
    }

    public int getRemainTime() {
      return this.remainTime;
    }

    public execAdhoc_args setRemainTime(int remainTime) {
      this.remainTime = remainTime;
      setRemainTimeIsSet(true);
      return this;
    }

    public void unsetRemainTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REMAINTIME_ISSET_ID);
    }

    /** Returns true if field remainTime is set (has been assigned a value) and false otherwise */
    public boolean isSetRemainTime() {
      return EncodingUtils.testBit(__isset_bitfield, __REMAINTIME_ISSET_ID);
    }

    public void setRemainTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REMAINTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_ID:
        if (value == null) {
          unsetJobId();
        } else {
          setJobId((String)value);
        }
        break;

      case UDFS:
        if (value == null) {
          unsetUdfs();
        } else {
          setUdfs((List<UdfInfo>)value);
        }
        break;

      case SQL:
        if (value == null) {
          unsetSql();
        } else {
          setSql((List<String>)value);
        }
        break;

      case QUERY_LIMIT:
        if (value == null) {
          unsetQueryLimit();
        } else {
          setQueryLimit((Integer)value);
        }
        break;

      case REMAIN_TIME:
        if (value == null) {
          unsetRemainTime();
        } else {
          setRemainTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_ID:
        return getJobId();

      case UDFS:
        return getUdfs();

      case SQL:
        return getSql();

      case QUERY_LIMIT:
        return Integer.valueOf(getQueryLimit());

      case REMAIN_TIME:
        return Integer.valueOf(getRemainTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_ID:
        return isSetJobId();
      case UDFS:
        return isSetUdfs();
      case SQL:
        return isSetSql();
      case QUERY_LIMIT:
        return isSetQueryLimit();
      case REMAIN_TIME:
        return isSetRemainTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof execAdhoc_args)
        return this.equals((execAdhoc_args)that);
      return false;
    }

    public boolean equals(execAdhoc_args that) {
      if (that == null)
        return false;

      boolean this_present_jobId = true && this.isSetJobId();
      boolean that_present_jobId = true && that.isSetJobId();
      if (this_present_jobId || that_present_jobId) {
        if (!(this_present_jobId && that_present_jobId))
          return false;
        if (!this.jobId.equals(that.jobId))
          return false;
      }

      boolean this_present_udfs = true && this.isSetUdfs();
      boolean that_present_udfs = true && that.isSetUdfs();
      if (this_present_udfs || that_present_udfs) {
        if (!(this_present_udfs && that_present_udfs))
          return false;
        if (!this.udfs.equals(that.udfs))
          return false;
      }

      boolean this_present_sql = true && this.isSetSql();
      boolean that_present_sql = true && that.isSetSql();
      if (this_present_sql || that_present_sql) {
        if (!(this_present_sql && that_present_sql))
          return false;
        if (!this.sql.equals(that.sql))
          return false;
      }

      boolean this_present_queryLimit = true;
      boolean that_present_queryLimit = true;
      if (this_present_queryLimit || that_present_queryLimit) {
        if (!(this_present_queryLimit && that_present_queryLimit))
          return false;
        if (this.queryLimit != that.queryLimit)
          return false;
      }

      boolean this_present_remainTime = true;
      boolean that_present_remainTime = true;
      if (this_present_remainTime || that_present_remainTime) {
        if (!(this_present_remainTime && that_present_remainTime))
          return false;
        if (this.remainTime != that.remainTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(execAdhoc_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobId()).compareTo(other.isSetJobId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobId, other.jobId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUdfs()).compareTo(other.isSetUdfs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUdfs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.udfs, other.udfs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSql()).compareTo(other.isSetSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql, other.sql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQueryLimit()).compareTo(other.isSetQueryLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQueryLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryLimit, other.queryLimit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRemainTime()).compareTo(other.isSetRemainTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRemainTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remainTime, other.remainTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("execAdhoc_args(");
      boolean first = true;

      sb.append("jobId:");
      if (this.jobId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("udfs:");
      if (this.udfs == null) {
        sb.append("null");
      } else {
        sb.append(this.udfs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sql:");
      if (this.sql == null) {
        sb.append("null");
      } else {
        sb.append(this.sql);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("queryLimit:");
      sb.append(this.queryLimit);
      first = false;
      if (!first) sb.append(", ");
      sb.append("remainTime:");
      sb.append(this.remainTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class execAdhoc_argsStandardSchemeFactory implements SchemeFactory {
      public execAdhoc_argsStandardScheme getScheme() {
        return new execAdhoc_argsStandardScheme();
      }
    }

    private static class execAdhoc_argsStandardScheme extends StandardScheme<execAdhoc_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, execAdhoc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobId = iprot.readString();
                struct.setJobIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UDFS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                  struct.udfs = new ArrayList<UdfInfo>(_list72.size);
                  for (int _i73 = 0; _i73 < _list72.size; ++_i73)
                  {
                    UdfInfo _elem74;
                    _elem74 = new UdfInfo();
                    _elem74.read(iprot);
                    struct.udfs.add(_elem74);
                  }
                  iprot.readListEnd();
                }
                struct.setUdfsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list75 = iprot.readListBegin();
                  struct.sql = new ArrayList<String>(_list75.size);
                  for (int _i76 = 0; _i76 < _list75.size; ++_i76)
                  {
                    String _elem77;
                    _elem77 = iprot.readString();
                    struct.sql.add(_elem77);
                  }
                  iprot.readListEnd();
                }
                struct.setSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // QUERY_LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.queryLimit = iprot.readI32();
                struct.setQueryLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // REMAIN_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.remainTime = iprot.readI32();
                struct.setRemainTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, execAdhoc_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobId != null) {
          oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
          oprot.writeString(struct.jobId);
          oprot.writeFieldEnd();
        }
        if (struct.udfs != null) {
          oprot.writeFieldBegin(UDFS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.udfs.size()));
            for (UdfInfo _iter78 : struct.udfs)
            {
              _iter78.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.sql != null) {
          oprot.writeFieldBegin(SQL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.sql.size()));
            for (String _iter79 : struct.sql)
            {
              oprot.writeString(_iter79);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(QUERY_LIMIT_FIELD_DESC);
        oprot.writeI32(struct.queryLimit);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(REMAIN_TIME_FIELD_DESC);
        oprot.writeI32(struct.remainTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class execAdhoc_argsTupleSchemeFactory implements SchemeFactory {
      public execAdhoc_argsTupleScheme getScheme() {
        return new execAdhoc_argsTupleScheme();
      }
    }

    private static class execAdhoc_argsTupleScheme extends TupleScheme<execAdhoc_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, execAdhoc_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetJobId()) {
          optionals.set(0);
        }
        if (struct.isSetUdfs()) {
          optionals.set(1);
        }
        if (struct.isSetSql()) {
          optionals.set(2);
        }
        if (struct.isSetQueryLimit()) {
          optionals.set(3);
        }
        if (struct.isSetRemainTime()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetJobId()) {
          oprot.writeString(struct.jobId);
        }
        if (struct.isSetUdfs()) {
          {
            oprot.writeI32(struct.udfs.size());
            for (UdfInfo _iter80 : struct.udfs)
            {
              _iter80.write(oprot);
            }
          }
        }
        if (struct.isSetSql()) {
          {
            oprot.writeI32(struct.sql.size());
            for (String _iter81 : struct.sql)
            {
              oprot.writeString(_iter81);
            }
          }
        }
        if (struct.isSetQueryLimit()) {
          oprot.writeI32(struct.queryLimit);
        }
        if (struct.isSetRemainTime()) {
          oprot.writeI32(struct.remainTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, execAdhoc_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.jobId = iprot.readString();
          struct.setJobIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list82 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.udfs = new ArrayList<UdfInfo>(_list82.size);
            for (int _i83 = 0; _i83 < _list82.size; ++_i83)
            {
              UdfInfo _elem84;
              _elem84 = new UdfInfo();
              _elem84.read(iprot);
              struct.udfs.add(_elem84);
            }
          }
          struct.setUdfsIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.sql = new ArrayList<String>(_list85.size);
            for (int _i86 = 0; _i86 < _list85.size; ++_i86)
            {
              String _elem87;
              _elem87 = iprot.readString();
              struct.sql.add(_elem87);
            }
          }
          struct.setSqlIsSet(true);
        }
        if (incoming.get(3)) {
          struct.queryLimit = iprot.readI32();
          struct.setQueryLimitIsSet(true);
        }
        if (incoming.get(4)) {
          struct.remainTime = iprot.readI32();
          struct.setRemainTimeIsSet(true);
        }
      }
    }

  }

  public static class execAdhoc_result implements org.apache.thrift.TBase<execAdhoc_result, execAdhoc_result._Fields>, java.io.Serializable, Cloneable, Comparable<execAdhoc_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("execAdhoc_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new execAdhoc_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new execAdhoc_resultTupleSchemeFactory());
    }

    public RetInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RetInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(execAdhoc_result.class, metaDataMap);
    }

    public execAdhoc_result() {
    }

    public execAdhoc_result(
      RetInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public execAdhoc_result(execAdhoc_result other) {
      if (other.isSetSuccess()) {
        this.success = new RetInfo(other.success);
      }
    }

    public execAdhoc_result deepCopy() {
      return new execAdhoc_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RetInfo getSuccess() {
      return this.success;
    }

    public execAdhoc_result setSuccess(RetInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RetInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof execAdhoc_result)
        return this.equals((execAdhoc_result)that);
      return false;
    }

    public boolean equals(execAdhoc_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(execAdhoc_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("execAdhoc_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class execAdhoc_resultStandardSchemeFactory implements SchemeFactory {
      public execAdhoc_resultStandardScheme getScheme() {
        return new execAdhoc_resultStandardScheme();
      }
    }

    private static class execAdhoc_resultStandardScheme extends StandardScheme<execAdhoc_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, execAdhoc_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RetInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, execAdhoc_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class execAdhoc_resultTupleSchemeFactory implements SchemeFactory {
      public execAdhoc_resultTupleScheme getScheme() {
        return new execAdhoc_resultTupleScheme();
      }
    }

    private static class execAdhoc_resultTupleScheme extends TupleScheme<execAdhoc_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, execAdhoc_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, execAdhoc_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RetInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class cancelExecFlow_args implements org.apache.thrift.TBase<cancelExecFlow_args, cancelExecFlow_args._Fields>, java.io.Serializable, Cloneable, Comparable<cancelExecFlow_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelExecFlow_args");

    private static final org.apache.thrift.protocol.TField JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelExecFlow_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelExecFlow_argsTupleSchemeFactory());
    }

    public String jobId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_ID((short)1, "jobId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_ID
            return JOB_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("jobId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelExecFlow_args.class, metaDataMap);
    }

    public cancelExecFlow_args() {
    }

    public cancelExecFlow_args(
      String jobId)
    {
      this();
      this.jobId = jobId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelExecFlow_args(cancelExecFlow_args other) {
      if (other.isSetJobId()) {
        this.jobId = other.jobId;
      }
    }

    public cancelExecFlow_args deepCopy() {
      return new cancelExecFlow_args(this);
    }

    @Override
    public void clear() {
      this.jobId = null;
    }

    public String getJobId() {
      return this.jobId;
    }

    public cancelExecFlow_args setJobId(String jobId) {
      this.jobId = jobId;
      return this;
    }

    public void unsetJobId() {
      this.jobId = null;
    }

    /** Returns true if field jobId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobId() {
      return this.jobId != null;
    }

    public void setJobIdIsSet(boolean value) {
      if (!value) {
        this.jobId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_ID:
        if (value == null) {
          unsetJobId();
        } else {
          setJobId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_ID:
        return getJobId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_ID:
        return isSetJobId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelExecFlow_args)
        return this.equals((cancelExecFlow_args)that);
      return false;
    }

    public boolean equals(cancelExecFlow_args that) {
      if (that == null)
        return false;

      boolean this_present_jobId = true && this.isSetJobId();
      boolean that_present_jobId = true && that.isSetJobId();
      if (this_present_jobId || that_present_jobId) {
        if (!(this_present_jobId && that_present_jobId))
          return false;
        if (!this.jobId.equals(that.jobId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(cancelExecFlow_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobId()).compareTo(other.isSetJobId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobId, other.jobId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelExecFlow_args(");
      boolean first = true;

      sb.append("jobId:");
      if (this.jobId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelExecFlow_argsStandardSchemeFactory implements SchemeFactory {
      public cancelExecFlow_argsStandardScheme getScheme() {
        return new cancelExecFlow_argsStandardScheme();
      }
    }

    private static class cancelExecFlow_argsStandardScheme extends StandardScheme<cancelExecFlow_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelExecFlow_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobId = iprot.readString();
                struct.setJobIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelExecFlow_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobId != null) {
          oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
          oprot.writeString(struct.jobId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelExecFlow_argsTupleSchemeFactory implements SchemeFactory {
      public cancelExecFlow_argsTupleScheme getScheme() {
        return new cancelExecFlow_argsTupleScheme();
      }
    }

    private static class cancelExecFlow_argsTupleScheme extends TupleScheme<cancelExecFlow_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelExecFlow_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetJobId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetJobId()) {
          oprot.writeString(struct.jobId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelExecFlow_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.jobId = iprot.readString();
          struct.setJobIdIsSet(true);
        }
      }
    }

  }

  public static class cancelExecFlow_result implements org.apache.thrift.TBase<cancelExecFlow_result, cancelExecFlow_result._Fields>, java.io.Serializable, Cloneable, Comparable<cancelExecFlow_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelExecFlow_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelExecFlow_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelExecFlow_resultTupleSchemeFactory());
    }

    public RetInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RetInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelExecFlow_result.class, metaDataMap);
    }

    public cancelExecFlow_result() {
    }

    public cancelExecFlow_result(
      RetInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelExecFlow_result(cancelExecFlow_result other) {
      if (other.isSetSuccess()) {
        this.success = new RetInfo(other.success);
      }
    }

    public cancelExecFlow_result deepCopy() {
      return new cancelExecFlow_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RetInfo getSuccess() {
      return this.success;
    }

    public cancelExecFlow_result setSuccess(RetInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RetInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelExecFlow_result)
        return this.equals((cancelExecFlow_result)that);
      return false;
    }

    public boolean equals(cancelExecFlow_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(cancelExecFlow_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelExecFlow_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelExecFlow_resultStandardSchemeFactory implements SchemeFactory {
      public cancelExecFlow_resultStandardScheme getScheme() {
        return new cancelExecFlow_resultStandardScheme();
      }
    }

    private static class cancelExecFlow_resultStandardScheme extends StandardScheme<cancelExecFlow_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelExecFlow_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RetInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelExecFlow_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelExecFlow_resultTupleSchemeFactory implements SchemeFactory {
      public cancelExecFlow_resultTupleScheme getScheme() {
        return new cancelExecFlow_resultTupleScheme();
      }
    }

    private static class cancelExecFlow_resultTupleScheme extends TupleScheme<cancelExecFlow_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelExecFlow_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelExecFlow_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RetInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAdhocResult_args implements org.apache.thrift.TBase<getAdhocResult_args, getAdhocResult_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAdhocResult_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAdhocResult_args");

    private static final org.apache.thrift.protocol.TField JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("index", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAdhocResult_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAdhocResult_argsTupleSchemeFactory());
    }

    public String jobId; // required
    public int index; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_ID((short)1, "jobId"),
      INDEX((short)2, "index");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_ID
            return JOB_ID;
          case 2: // INDEX
            return INDEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __INDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("jobId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INDEX, new org.apache.thrift.meta_data.FieldMetaData("index", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAdhocResult_args.class, metaDataMap);
    }

    public getAdhocResult_args() {
    }

    public getAdhocResult_args(
      String jobId,
      int index)
    {
      this();
      this.jobId = jobId;
      this.index = index;
      setIndexIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAdhocResult_args(getAdhocResult_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetJobId()) {
        this.jobId = other.jobId;
      }
      this.index = other.index;
    }

    public getAdhocResult_args deepCopy() {
      return new getAdhocResult_args(this);
    }

    @Override
    public void clear() {
      this.jobId = null;
      setIndexIsSet(false);
      this.index = 0;
    }

    public String getJobId() {
      return this.jobId;
    }

    public getAdhocResult_args setJobId(String jobId) {
      this.jobId = jobId;
      return this;
    }

    public void unsetJobId() {
      this.jobId = null;
    }

    /** Returns true if field jobId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobId() {
      return this.jobId != null;
    }

    public void setJobIdIsSet(boolean value) {
      if (!value) {
        this.jobId = null;
      }
    }

    public int getIndex() {
      return this.index;
    }

    public getAdhocResult_args setIndex(int index) {
      this.index = index;
      setIndexIsSet(true);
      return this;
    }

    public void unsetIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INDEX_ISSET_ID);
    }

    /** Returns true if field index is set (has been assigned a value) and false otherwise */
    public boolean isSetIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __INDEX_ISSET_ID);
    }

    public void setIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INDEX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_ID:
        if (value == null) {
          unsetJobId();
        } else {
          setJobId((String)value);
        }
        break;

      case INDEX:
        if (value == null) {
          unsetIndex();
        } else {
          setIndex((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_ID:
        return getJobId();

      case INDEX:
        return Integer.valueOf(getIndex());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_ID:
        return isSetJobId();
      case INDEX:
        return isSetIndex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAdhocResult_args)
        return this.equals((getAdhocResult_args)that);
      return false;
    }

    public boolean equals(getAdhocResult_args that) {
      if (that == null)
        return false;

      boolean this_present_jobId = true && this.isSetJobId();
      boolean that_present_jobId = true && that.isSetJobId();
      if (this_present_jobId || that_present_jobId) {
        if (!(this_present_jobId && that_present_jobId))
          return false;
        if (!this.jobId.equals(that.jobId))
          return false;
      }

      boolean this_present_index = true;
      boolean that_present_index = true;
      if (this_present_index || that_present_index) {
        if (!(this_present_index && that_present_index))
          return false;
        if (this.index != that.index)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAdhocResult_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobId()).compareTo(other.isSetJobId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobId, other.jobId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIndex()).compareTo(other.isSetIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index, other.index);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAdhocResult_args(");
      boolean first = true;

      sb.append("jobId:");
      if (this.jobId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("index:");
      sb.append(this.index);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAdhocResult_argsStandardSchemeFactory implements SchemeFactory {
      public getAdhocResult_argsStandardScheme getScheme() {
        return new getAdhocResult_argsStandardScheme();
      }
    }

    private static class getAdhocResult_argsStandardScheme extends StandardScheme<getAdhocResult_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAdhocResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobId = iprot.readString();
                struct.setJobIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.index = iprot.readI32();
                struct.setIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAdhocResult_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobId != null) {
          oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
          oprot.writeString(struct.jobId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(INDEX_FIELD_DESC);
        oprot.writeI32(struct.index);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAdhocResult_argsTupleSchemeFactory implements SchemeFactory {
      public getAdhocResult_argsTupleScheme getScheme() {
        return new getAdhocResult_argsTupleScheme();
      }
    }

    private static class getAdhocResult_argsTupleScheme extends TupleScheme<getAdhocResult_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAdhocResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetJobId()) {
          optionals.set(0);
        }
        if (struct.isSetIndex()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetJobId()) {
          oprot.writeString(struct.jobId);
        }
        if (struct.isSetIndex()) {
          oprot.writeI32(struct.index);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAdhocResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.jobId = iprot.readString();
          struct.setJobIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.index = iprot.readI32();
          struct.setIndexIsSet(true);
        }
      }
    }

  }

  public static class getAdhocResult_result implements org.apache.thrift.TBase<getAdhocResult_result, getAdhocResult_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAdhocResult_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAdhocResult_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAdhocResult_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAdhocResult_resultTupleSchemeFactory());
    }

    public AdhocResultRet success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdhocResultRet.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAdhocResult_result.class, metaDataMap);
    }

    public getAdhocResult_result() {
    }

    public getAdhocResult_result(
      AdhocResultRet success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAdhocResult_result(getAdhocResult_result other) {
      if (other.isSetSuccess()) {
        this.success = new AdhocResultRet(other.success);
      }
    }

    public getAdhocResult_result deepCopy() {
      return new getAdhocResult_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public AdhocResultRet getSuccess() {
      return this.success;
    }

    public getAdhocResult_result setSuccess(AdhocResultRet success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((AdhocResultRet)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAdhocResult_result)
        return this.equals((getAdhocResult_result)that);
      return false;
    }

    public boolean equals(getAdhocResult_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAdhocResult_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAdhocResult_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAdhocResult_resultStandardSchemeFactory implements SchemeFactory {
      public getAdhocResult_resultStandardScheme getScheme() {
        return new getAdhocResult_resultStandardScheme();
      }
    }

    private static class getAdhocResult_resultStandardScheme extends StandardScheme<getAdhocResult_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAdhocResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new AdhocResultRet();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAdhocResult_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAdhocResult_resultTupleSchemeFactory implements SchemeFactory {
      public getAdhocResult_resultTupleScheme getScheme() {
        return new getAdhocResult_resultTupleScheme();
      }
    }

    private static class getAdhocResult_resultTupleScheme extends TupleScheme<getAdhocResult_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAdhocResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAdhocResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new AdhocResultRet();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
