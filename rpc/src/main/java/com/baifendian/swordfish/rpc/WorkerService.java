/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baifendian.swordfish.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-13")
public class WorkerService {

  public interface Iface {

    /**
     * 执行某个 workflow
     * projectId : 项目 id
     * execId : 执行 id
     * flowType : workflow 类型（枚举字符串）
     * 
     * @param projectId
     * @param execId
     * @param flowType
     */
    public RetInfo execFlow(int projectId, long execId, String flowType) throws org.apache.thrift.TException;

    /**
     * 调度执行某个 workflow
     * projectId : 项目 id
     * execId : 执行 id
     * flowType : workflow 类型（枚举字符串）
     * scheduleDate : 调度时间（预期的）
     * 
     * @param projectId
     * @param execId
     * @param flowType
     * @param scheduleDate
     */
    public RetInfo scheduleExecFlow(int projectId, long execId, String flowType, long scheduleDate) throws org.apache.thrift.TException;

    /**
     * 取消在执行的指定workflow
     * projectId : 项目 id
     * execId : 执行 id
     * flowType : workflow 类型（枚举字符串）
     * 
     * @param projectId
     * @param execId
     * @param flowType
     */
    public RetInfo cancelExecFlow(int projectId, long execId, String flowType) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void execFlow(int projectId, long execId, String flowType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void scheduleExecFlow(int projectId, long execId, String flowType, long scheduleDate, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void cancelExecFlow(int projectId, long execId, String flowType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public RetInfo execFlow(int projectId, long execId, String flowType) throws org.apache.thrift.TException
    {
      send_execFlow(projectId, execId, flowType);
      return recv_execFlow();
    }

    public void send_execFlow(int projectId, long execId, String flowType) throws org.apache.thrift.TException
    {
      execFlow_args args = new execFlow_args();
      args.setProjectId(projectId);
      args.setExecId(execId);
      args.setFlowType(flowType);
      sendBase("execFlow", args);
    }

    public RetInfo recv_execFlow() throws org.apache.thrift.TException
    {
      execFlow_result result = new execFlow_result();
      receiveBase(result, "execFlow");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "execFlow failed: unknown result");
    }

    public RetInfo scheduleExecFlow(int projectId, long execId, String flowType, long scheduleDate) throws org.apache.thrift.TException
    {
      send_scheduleExecFlow(projectId, execId, flowType, scheduleDate);
      return recv_scheduleExecFlow();
    }

    public void send_scheduleExecFlow(int projectId, long execId, String flowType, long scheduleDate) throws org.apache.thrift.TException
    {
      scheduleExecFlow_args args = new scheduleExecFlow_args();
      args.setProjectId(projectId);
      args.setExecId(execId);
      args.setFlowType(flowType);
      args.setScheduleDate(scheduleDate);
      sendBase("scheduleExecFlow", args);
    }

    public RetInfo recv_scheduleExecFlow() throws org.apache.thrift.TException
    {
      scheduleExecFlow_result result = new scheduleExecFlow_result();
      receiveBase(result, "scheduleExecFlow");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "scheduleExecFlow failed: unknown result");
    }

    public RetInfo cancelExecFlow(int projectId, long execId, String flowType) throws org.apache.thrift.TException
    {
      send_cancelExecFlow(projectId, execId, flowType);
      return recv_cancelExecFlow();
    }

    public void send_cancelExecFlow(int projectId, long execId, String flowType) throws org.apache.thrift.TException
    {
      cancelExecFlow_args args = new cancelExecFlow_args();
      args.setProjectId(projectId);
      args.setExecId(execId);
      args.setFlowType(flowType);
      sendBase("cancelExecFlow", args);
    }

    public RetInfo recv_cancelExecFlow() throws org.apache.thrift.TException
    {
      cancelExecFlow_result result = new cancelExecFlow_result();
      receiveBase(result, "cancelExecFlow");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cancelExecFlow failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void execFlow(int projectId, long execId, String flowType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      execFlow_call method_call = new execFlow_call(projectId, execId, flowType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class execFlow_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      private long execId;
      private String flowType;
      public execFlow_call(int projectId, long execId, String flowType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
        this.execId = execId;
        this.flowType = flowType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("execFlow", org.apache.thrift.protocol.TMessageType.CALL, 0));
        execFlow_args args = new execFlow_args();
        args.setProjectId(projectId);
        args.setExecId(execId);
        args.setFlowType(flowType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RetInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_execFlow();
      }
    }

    public void scheduleExecFlow(int projectId, long execId, String flowType, long scheduleDate, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      scheduleExecFlow_call method_call = new scheduleExecFlow_call(projectId, execId, flowType, scheduleDate, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class scheduleExecFlow_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      private long execId;
      private String flowType;
      private long scheduleDate;
      public scheduleExecFlow_call(int projectId, long execId, String flowType, long scheduleDate, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
        this.execId = execId;
        this.flowType = flowType;
        this.scheduleDate = scheduleDate;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("scheduleExecFlow", org.apache.thrift.protocol.TMessageType.CALL, 0));
        scheduleExecFlow_args args = new scheduleExecFlow_args();
        args.setProjectId(projectId);
        args.setExecId(execId);
        args.setFlowType(flowType);
        args.setScheduleDate(scheduleDate);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RetInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_scheduleExecFlow();
      }
    }

    public void cancelExecFlow(int projectId, long execId, String flowType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cancelExecFlow_call method_call = new cancelExecFlow_call(projectId, execId, flowType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cancelExecFlow_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      private long execId;
      private String flowType;
      public cancelExecFlow_call(int projectId, long execId, String flowType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
        this.execId = execId;
        this.flowType = flowType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancelExecFlow", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cancelExecFlow_args args = new cancelExecFlow_args();
        args.setProjectId(projectId);
        args.setExecId(execId);
        args.setFlowType(flowType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RetInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cancelExecFlow();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("execFlow", new execFlow());
      processMap.put("scheduleExecFlow", new scheduleExecFlow());
      processMap.put("cancelExecFlow", new cancelExecFlow());
      return processMap;
    }

    public static class execFlow<I extends Iface> extends org.apache.thrift.ProcessFunction<I, execFlow_args> {
      public execFlow() {
        super("execFlow");
      }

      public execFlow_args getEmptyArgsInstance() {
        return new execFlow_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public execFlow_result getResult(I iface, execFlow_args args) throws org.apache.thrift.TException {
        execFlow_result result = new execFlow_result();
        result.success = iface.execFlow(args.projectId, args.execId, args.flowType);
        return result;
      }
    }

    public static class scheduleExecFlow<I extends Iface> extends org.apache.thrift.ProcessFunction<I, scheduleExecFlow_args> {
      public scheduleExecFlow() {
        super("scheduleExecFlow");
      }

      public scheduleExecFlow_args getEmptyArgsInstance() {
        return new scheduleExecFlow_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public scheduleExecFlow_result getResult(I iface, scheduleExecFlow_args args) throws org.apache.thrift.TException {
        scheduleExecFlow_result result = new scheduleExecFlow_result();
        result.success = iface.scheduleExecFlow(args.projectId, args.execId, args.flowType, args.scheduleDate);
        return result;
      }
    }

    public static class cancelExecFlow<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancelExecFlow_args> {
      public cancelExecFlow() {
        super("cancelExecFlow");
      }

      public cancelExecFlow_args getEmptyArgsInstance() {
        return new cancelExecFlow_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cancelExecFlow_result getResult(I iface, cancelExecFlow_args args) throws org.apache.thrift.TException {
        cancelExecFlow_result result = new cancelExecFlow_result();
        result.success = iface.cancelExecFlow(args.projectId, args.execId, args.flowType);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("execFlow", new execFlow());
      processMap.put("scheduleExecFlow", new scheduleExecFlow());
      processMap.put("cancelExecFlow", new cancelExecFlow());
      return processMap;
    }

    public static class execFlow<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, execFlow_args, RetInfo> {
      public execFlow() {
        super("execFlow");
      }

      public execFlow_args getEmptyArgsInstance() {
        return new execFlow_args();
      }

      public AsyncMethodCallback<RetInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RetInfo>() { 
          public void onComplete(RetInfo o) {
            execFlow_result result = new execFlow_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            execFlow_result result = new execFlow_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, execFlow_args args, org.apache.thrift.async.AsyncMethodCallback<RetInfo> resultHandler) throws TException {
        iface.execFlow(args.projectId, args.execId, args.flowType,resultHandler);
      }
    }

    public static class scheduleExecFlow<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, scheduleExecFlow_args, RetInfo> {
      public scheduleExecFlow() {
        super("scheduleExecFlow");
      }

      public scheduleExecFlow_args getEmptyArgsInstance() {
        return new scheduleExecFlow_args();
      }

      public AsyncMethodCallback<RetInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RetInfo>() { 
          public void onComplete(RetInfo o) {
            scheduleExecFlow_result result = new scheduleExecFlow_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            scheduleExecFlow_result result = new scheduleExecFlow_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, scheduleExecFlow_args args, org.apache.thrift.async.AsyncMethodCallback<RetInfo> resultHandler) throws TException {
        iface.scheduleExecFlow(args.projectId, args.execId, args.flowType, args.scheduleDate,resultHandler);
      }
    }

    public static class cancelExecFlow<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cancelExecFlow_args, RetInfo> {
      public cancelExecFlow() {
        super("cancelExecFlow");
      }

      public cancelExecFlow_args getEmptyArgsInstance() {
        return new cancelExecFlow_args();
      }

      public AsyncMethodCallback<RetInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RetInfo>() { 
          public void onComplete(RetInfo o) {
            cancelExecFlow_result result = new cancelExecFlow_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            cancelExecFlow_result result = new cancelExecFlow_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cancelExecFlow_args args, org.apache.thrift.async.AsyncMethodCallback<RetInfo> resultHandler) throws TException {
        iface.cancelExecFlow(args.projectId, args.execId, args.flowType,resultHandler);
      }
    }

  }

  public static class execFlow_args implements org.apache.thrift.TBase<execFlow_args, execFlow_args._Fields>, java.io.Serializable, Cloneable, Comparable<execFlow_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("execFlow_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField EXEC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("execId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField FLOW_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("flowType", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new execFlow_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new execFlow_argsTupleSchemeFactory());
    }

    public int projectId; // required
    public long execId; // required
    public String flowType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId"),
      EXEC_ID((short)2, "execId"),
      FLOW_TYPE((short)3, "flowType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          case 2: // EXEC_ID
            return EXEC_ID;
          case 3: // FLOW_TYPE
            return FLOW_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private static final int __EXECID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EXEC_ID, new org.apache.thrift.meta_data.FieldMetaData("execId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.FLOW_TYPE, new org.apache.thrift.meta_data.FieldMetaData("flowType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(execFlow_args.class, metaDataMap);
    }

    public execFlow_args() {
    }

    public execFlow_args(
      int projectId,
      long execId,
      String flowType)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
      this.execId = execId;
      setExecIdIsSet(true);
      this.flowType = flowType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public execFlow_args(execFlow_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
      this.execId = other.execId;
      if (other.isSetFlowType()) {
        this.flowType = other.flowType;
      }
    }

    public execFlow_args deepCopy() {
      return new execFlow_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
      setExecIdIsSet(false);
      this.execId = 0;
      this.flowType = null;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public execFlow_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public long getExecId() {
      return this.execId;
    }

    public execFlow_args setExecId(long execId) {
      this.execId = execId;
      setExecIdIsSet(true);
      return this;
    }

    public void unsetExecId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXECID_ISSET_ID);
    }

    /** Returns true if field execId is set (has been assigned a value) and false otherwise */
    public boolean isSetExecId() {
      return EncodingUtils.testBit(__isset_bitfield, __EXECID_ISSET_ID);
    }

    public void setExecIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXECID_ISSET_ID, value);
    }

    public String getFlowType() {
      return this.flowType;
    }

    public execFlow_args setFlowType(String flowType) {
      this.flowType = flowType;
      return this;
    }

    public void unsetFlowType() {
      this.flowType = null;
    }

    /** Returns true if field flowType is set (has been assigned a value) and false otherwise */
    public boolean isSetFlowType() {
      return this.flowType != null;
    }

    public void setFlowTypeIsSet(boolean value) {
      if (!value) {
        this.flowType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      case EXEC_ID:
        if (value == null) {
          unsetExecId();
        } else {
          setExecId((Long)value);
        }
        break;

      case FLOW_TYPE:
        if (value == null) {
          unsetFlowType();
        } else {
          setFlowType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      case EXEC_ID:
        return Long.valueOf(getExecId());

      case FLOW_TYPE:
        return getFlowType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      case EXEC_ID:
        return isSetExecId();
      case FLOW_TYPE:
        return isSetFlowType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof execFlow_args)
        return this.equals((execFlow_args)that);
      return false;
    }

    public boolean equals(execFlow_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      boolean this_present_execId = true;
      boolean that_present_execId = true;
      if (this_present_execId || that_present_execId) {
        if (!(this_present_execId && that_present_execId))
          return false;
        if (this.execId != that.execId)
          return false;
      }

      boolean this_present_flowType = true && this.isSetFlowType();
      boolean that_present_flowType = true && that.isSetFlowType();
      if (this_present_flowType || that_present_flowType) {
        if (!(this_present_flowType && that_present_flowType))
          return false;
        if (!this.flowType.equals(that.flowType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      boolean present_execId = true;
      list.add(present_execId);
      if (present_execId)
        list.add(execId);

      boolean present_flowType = true && (isSetFlowType());
      list.add(present_flowType);
      if (present_flowType)
        list.add(flowType);

      return list.hashCode();
    }

    @Override
    public int compareTo(execFlow_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExecId()).compareTo(other.isSetExecId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExecId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execId, other.execId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFlowType()).compareTo(other.isSetFlowType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlowType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flowType, other.flowType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("execFlow_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("execId:");
      sb.append(this.execId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("flowType:");
      if (this.flowType == null) {
        sb.append("null");
      } else {
        sb.append(this.flowType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class execFlow_argsStandardSchemeFactory implements SchemeFactory {
      public execFlow_argsStandardScheme getScheme() {
        return new execFlow_argsStandardScheme();
      }
    }

    private static class execFlow_argsStandardScheme extends StandardScheme<execFlow_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, execFlow_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXEC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.execId = iprot.readI64();
                struct.setExecIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FLOW_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.flowType = iprot.readString();
                struct.setFlowTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, execFlow_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(EXEC_ID_FIELD_DESC);
        oprot.writeI64(struct.execId);
        oprot.writeFieldEnd();
        if (struct.flowType != null) {
          oprot.writeFieldBegin(FLOW_TYPE_FIELD_DESC);
          oprot.writeString(struct.flowType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class execFlow_argsTupleSchemeFactory implements SchemeFactory {
      public execFlow_argsTupleScheme getScheme() {
        return new execFlow_argsTupleScheme();
      }
    }

    private static class execFlow_argsTupleScheme extends TupleScheme<execFlow_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, execFlow_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        if (struct.isSetExecId()) {
          optionals.set(1);
        }
        if (struct.isSetFlowType()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
        if (struct.isSetExecId()) {
          oprot.writeI64(struct.execId);
        }
        if (struct.isSetFlowType()) {
          oprot.writeString(struct.flowType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, execFlow_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.execId = iprot.readI64();
          struct.setExecIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.flowType = iprot.readString();
          struct.setFlowTypeIsSet(true);
        }
      }
    }

  }

  public static class execFlow_result implements org.apache.thrift.TBase<execFlow_result, execFlow_result._Fields>, java.io.Serializable, Cloneable, Comparable<execFlow_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("execFlow_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new execFlow_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new execFlow_resultTupleSchemeFactory());
    }

    public RetInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RetInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(execFlow_result.class, metaDataMap);
    }

    public execFlow_result() {
    }

    public execFlow_result(
      RetInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public execFlow_result(execFlow_result other) {
      if (other.isSetSuccess()) {
        this.success = new RetInfo(other.success);
      }
    }

    public execFlow_result deepCopy() {
      return new execFlow_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RetInfo getSuccess() {
      return this.success;
    }

    public execFlow_result setSuccess(RetInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RetInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof execFlow_result)
        return this.equals((execFlow_result)that);
      return false;
    }

    public boolean equals(execFlow_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(execFlow_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("execFlow_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class execFlow_resultStandardSchemeFactory implements SchemeFactory {
      public execFlow_resultStandardScheme getScheme() {
        return new execFlow_resultStandardScheme();
      }
    }

    private static class execFlow_resultStandardScheme extends StandardScheme<execFlow_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, execFlow_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RetInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, execFlow_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class execFlow_resultTupleSchemeFactory implements SchemeFactory {
      public execFlow_resultTupleScheme getScheme() {
        return new execFlow_resultTupleScheme();
      }
    }

    private static class execFlow_resultTupleScheme extends TupleScheme<execFlow_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, execFlow_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, execFlow_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RetInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class scheduleExecFlow_args implements org.apache.thrift.TBase<scheduleExecFlow_args, scheduleExecFlow_args._Fields>, java.io.Serializable, Cloneable, Comparable<scheduleExecFlow_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scheduleExecFlow_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField EXEC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("execId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField FLOW_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("flowType", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SCHEDULE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("scheduleDate", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new scheduleExecFlow_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new scheduleExecFlow_argsTupleSchemeFactory());
    }

    public int projectId; // required
    public long execId; // required
    public String flowType; // required
    public long scheduleDate; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId"),
      EXEC_ID((short)2, "execId"),
      FLOW_TYPE((short)3, "flowType"),
      SCHEDULE_DATE((short)4, "scheduleDate");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          case 2: // EXEC_ID
            return EXEC_ID;
          case 3: // FLOW_TYPE
            return FLOW_TYPE;
          case 4: // SCHEDULE_DATE
            return SCHEDULE_DATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private static final int __EXECID_ISSET_ID = 1;
    private static final int __SCHEDULEDATE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EXEC_ID, new org.apache.thrift.meta_data.FieldMetaData("execId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.FLOW_TYPE, new org.apache.thrift.meta_data.FieldMetaData("flowType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SCHEDULE_DATE, new org.apache.thrift.meta_data.FieldMetaData("scheduleDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(scheduleExecFlow_args.class, metaDataMap);
    }

    public scheduleExecFlow_args() {
    }

    public scheduleExecFlow_args(
      int projectId,
      long execId,
      String flowType,
      long scheduleDate)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
      this.execId = execId;
      setExecIdIsSet(true);
      this.flowType = flowType;
      this.scheduleDate = scheduleDate;
      setScheduleDateIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public scheduleExecFlow_args(scheduleExecFlow_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
      this.execId = other.execId;
      if (other.isSetFlowType()) {
        this.flowType = other.flowType;
      }
      this.scheduleDate = other.scheduleDate;
    }

    public scheduleExecFlow_args deepCopy() {
      return new scheduleExecFlow_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
      setExecIdIsSet(false);
      this.execId = 0;
      this.flowType = null;
      setScheduleDateIsSet(false);
      this.scheduleDate = 0;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public scheduleExecFlow_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public long getExecId() {
      return this.execId;
    }

    public scheduleExecFlow_args setExecId(long execId) {
      this.execId = execId;
      setExecIdIsSet(true);
      return this;
    }

    public void unsetExecId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXECID_ISSET_ID);
    }

    /** Returns true if field execId is set (has been assigned a value) and false otherwise */
    public boolean isSetExecId() {
      return EncodingUtils.testBit(__isset_bitfield, __EXECID_ISSET_ID);
    }

    public void setExecIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXECID_ISSET_ID, value);
    }

    public String getFlowType() {
      return this.flowType;
    }

    public scheduleExecFlow_args setFlowType(String flowType) {
      this.flowType = flowType;
      return this;
    }

    public void unsetFlowType() {
      this.flowType = null;
    }

    /** Returns true if field flowType is set (has been assigned a value) and false otherwise */
    public boolean isSetFlowType() {
      return this.flowType != null;
    }

    public void setFlowTypeIsSet(boolean value) {
      if (!value) {
        this.flowType = null;
      }
    }

    public long getScheduleDate() {
      return this.scheduleDate;
    }

    public scheduleExecFlow_args setScheduleDate(long scheduleDate) {
      this.scheduleDate = scheduleDate;
      setScheduleDateIsSet(true);
      return this;
    }

    public void unsetScheduleDate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCHEDULEDATE_ISSET_ID);
    }

    /** Returns true if field scheduleDate is set (has been assigned a value) and false otherwise */
    public boolean isSetScheduleDate() {
      return EncodingUtils.testBit(__isset_bitfield, __SCHEDULEDATE_ISSET_ID);
    }

    public void setScheduleDateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCHEDULEDATE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      case EXEC_ID:
        if (value == null) {
          unsetExecId();
        } else {
          setExecId((Long)value);
        }
        break;

      case FLOW_TYPE:
        if (value == null) {
          unsetFlowType();
        } else {
          setFlowType((String)value);
        }
        break;

      case SCHEDULE_DATE:
        if (value == null) {
          unsetScheduleDate();
        } else {
          setScheduleDate((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      case EXEC_ID:
        return Long.valueOf(getExecId());

      case FLOW_TYPE:
        return getFlowType();

      case SCHEDULE_DATE:
        return Long.valueOf(getScheduleDate());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      case EXEC_ID:
        return isSetExecId();
      case FLOW_TYPE:
        return isSetFlowType();
      case SCHEDULE_DATE:
        return isSetScheduleDate();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof scheduleExecFlow_args)
        return this.equals((scheduleExecFlow_args)that);
      return false;
    }

    public boolean equals(scheduleExecFlow_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      boolean this_present_execId = true;
      boolean that_present_execId = true;
      if (this_present_execId || that_present_execId) {
        if (!(this_present_execId && that_present_execId))
          return false;
        if (this.execId != that.execId)
          return false;
      }

      boolean this_present_flowType = true && this.isSetFlowType();
      boolean that_present_flowType = true && that.isSetFlowType();
      if (this_present_flowType || that_present_flowType) {
        if (!(this_present_flowType && that_present_flowType))
          return false;
        if (!this.flowType.equals(that.flowType))
          return false;
      }

      boolean this_present_scheduleDate = true;
      boolean that_present_scheduleDate = true;
      if (this_present_scheduleDate || that_present_scheduleDate) {
        if (!(this_present_scheduleDate && that_present_scheduleDate))
          return false;
        if (this.scheduleDate != that.scheduleDate)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      boolean present_execId = true;
      list.add(present_execId);
      if (present_execId)
        list.add(execId);

      boolean present_flowType = true && (isSetFlowType());
      list.add(present_flowType);
      if (present_flowType)
        list.add(flowType);

      boolean present_scheduleDate = true;
      list.add(present_scheduleDate);
      if (present_scheduleDate)
        list.add(scheduleDate);

      return list.hashCode();
    }

    @Override
    public int compareTo(scheduleExecFlow_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExecId()).compareTo(other.isSetExecId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExecId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execId, other.execId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFlowType()).compareTo(other.isSetFlowType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlowType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flowType, other.flowType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetScheduleDate()).compareTo(other.isSetScheduleDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScheduleDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scheduleDate, other.scheduleDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("scheduleExecFlow_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("execId:");
      sb.append(this.execId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("flowType:");
      if (this.flowType == null) {
        sb.append("null");
      } else {
        sb.append(this.flowType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("scheduleDate:");
      sb.append(this.scheduleDate);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class scheduleExecFlow_argsStandardSchemeFactory implements SchemeFactory {
      public scheduleExecFlow_argsStandardScheme getScheme() {
        return new scheduleExecFlow_argsStandardScheme();
      }
    }

    private static class scheduleExecFlow_argsStandardScheme extends StandardScheme<scheduleExecFlow_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, scheduleExecFlow_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXEC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.execId = iprot.readI64();
                struct.setExecIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FLOW_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.flowType = iprot.readString();
                struct.setFlowTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SCHEDULE_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.scheduleDate = iprot.readI64();
                struct.setScheduleDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, scheduleExecFlow_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(EXEC_ID_FIELD_DESC);
        oprot.writeI64(struct.execId);
        oprot.writeFieldEnd();
        if (struct.flowType != null) {
          oprot.writeFieldBegin(FLOW_TYPE_FIELD_DESC);
          oprot.writeString(struct.flowType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SCHEDULE_DATE_FIELD_DESC);
        oprot.writeI64(struct.scheduleDate);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class scheduleExecFlow_argsTupleSchemeFactory implements SchemeFactory {
      public scheduleExecFlow_argsTupleScheme getScheme() {
        return new scheduleExecFlow_argsTupleScheme();
      }
    }

    private static class scheduleExecFlow_argsTupleScheme extends TupleScheme<scheduleExecFlow_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, scheduleExecFlow_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        if (struct.isSetExecId()) {
          optionals.set(1);
        }
        if (struct.isSetFlowType()) {
          optionals.set(2);
        }
        if (struct.isSetScheduleDate()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
        if (struct.isSetExecId()) {
          oprot.writeI64(struct.execId);
        }
        if (struct.isSetFlowType()) {
          oprot.writeString(struct.flowType);
        }
        if (struct.isSetScheduleDate()) {
          oprot.writeI64(struct.scheduleDate);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, scheduleExecFlow_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.execId = iprot.readI64();
          struct.setExecIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.flowType = iprot.readString();
          struct.setFlowTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.scheduleDate = iprot.readI64();
          struct.setScheduleDateIsSet(true);
        }
      }
    }

  }

  public static class scheduleExecFlow_result implements org.apache.thrift.TBase<scheduleExecFlow_result, scheduleExecFlow_result._Fields>, java.io.Serializable, Cloneable, Comparable<scheduleExecFlow_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scheduleExecFlow_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new scheduleExecFlow_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new scheduleExecFlow_resultTupleSchemeFactory());
    }

    public RetInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RetInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(scheduleExecFlow_result.class, metaDataMap);
    }

    public scheduleExecFlow_result() {
    }

    public scheduleExecFlow_result(
      RetInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public scheduleExecFlow_result(scheduleExecFlow_result other) {
      if (other.isSetSuccess()) {
        this.success = new RetInfo(other.success);
      }
    }

    public scheduleExecFlow_result deepCopy() {
      return new scheduleExecFlow_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RetInfo getSuccess() {
      return this.success;
    }

    public scheduleExecFlow_result setSuccess(RetInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RetInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof scheduleExecFlow_result)
        return this.equals((scheduleExecFlow_result)that);
      return false;
    }

    public boolean equals(scheduleExecFlow_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(scheduleExecFlow_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("scheduleExecFlow_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class scheduleExecFlow_resultStandardSchemeFactory implements SchemeFactory {
      public scheduleExecFlow_resultStandardScheme getScheme() {
        return new scheduleExecFlow_resultStandardScheme();
      }
    }

    private static class scheduleExecFlow_resultStandardScheme extends StandardScheme<scheduleExecFlow_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, scheduleExecFlow_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RetInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, scheduleExecFlow_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class scheduleExecFlow_resultTupleSchemeFactory implements SchemeFactory {
      public scheduleExecFlow_resultTupleScheme getScheme() {
        return new scheduleExecFlow_resultTupleScheme();
      }
    }

    private static class scheduleExecFlow_resultTupleScheme extends TupleScheme<scheduleExecFlow_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, scheduleExecFlow_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, scheduleExecFlow_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RetInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class cancelExecFlow_args implements org.apache.thrift.TBase<cancelExecFlow_args, cancelExecFlow_args._Fields>, java.io.Serializable, Cloneable, Comparable<cancelExecFlow_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelExecFlow_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField EXEC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("execId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField FLOW_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("flowType", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelExecFlow_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelExecFlow_argsTupleSchemeFactory());
    }

    public int projectId; // required
    public long execId; // required
    public String flowType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId"),
      EXEC_ID((short)2, "execId"),
      FLOW_TYPE((short)3, "flowType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          case 2: // EXEC_ID
            return EXEC_ID;
          case 3: // FLOW_TYPE
            return FLOW_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private static final int __EXECID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EXEC_ID, new org.apache.thrift.meta_data.FieldMetaData("execId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.FLOW_TYPE, new org.apache.thrift.meta_data.FieldMetaData("flowType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelExecFlow_args.class, metaDataMap);
    }

    public cancelExecFlow_args() {
    }

    public cancelExecFlow_args(
      int projectId,
      long execId,
      String flowType)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
      this.execId = execId;
      setExecIdIsSet(true);
      this.flowType = flowType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelExecFlow_args(cancelExecFlow_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
      this.execId = other.execId;
      if (other.isSetFlowType()) {
        this.flowType = other.flowType;
      }
    }

    public cancelExecFlow_args deepCopy() {
      return new cancelExecFlow_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
      setExecIdIsSet(false);
      this.execId = 0;
      this.flowType = null;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public cancelExecFlow_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public long getExecId() {
      return this.execId;
    }

    public cancelExecFlow_args setExecId(long execId) {
      this.execId = execId;
      setExecIdIsSet(true);
      return this;
    }

    public void unsetExecId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXECID_ISSET_ID);
    }

    /** Returns true if field execId is set (has been assigned a value) and false otherwise */
    public boolean isSetExecId() {
      return EncodingUtils.testBit(__isset_bitfield, __EXECID_ISSET_ID);
    }

    public void setExecIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXECID_ISSET_ID, value);
    }

    public String getFlowType() {
      return this.flowType;
    }

    public cancelExecFlow_args setFlowType(String flowType) {
      this.flowType = flowType;
      return this;
    }

    public void unsetFlowType() {
      this.flowType = null;
    }

    /** Returns true if field flowType is set (has been assigned a value) and false otherwise */
    public boolean isSetFlowType() {
      return this.flowType != null;
    }

    public void setFlowTypeIsSet(boolean value) {
      if (!value) {
        this.flowType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      case EXEC_ID:
        if (value == null) {
          unsetExecId();
        } else {
          setExecId((Long)value);
        }
        break;

      case FLOW_TYPE:
        if (value == null) {
          unsetFlowType();
        } else {
          setFlowType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      case EXEC_ID:
        return Long.valueOf(getExecId());

      case FLOW_TYPE:
        return getFlowType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      case EXEC_ID:
        return isSetExecId();
      case FLOW_TYPE:
        return isSetFlowType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelExecFlow_args)
        return this.equals((cancelExecFlow_args)that);
      return false;
    }

    public boolean equals(cancelExecFlow_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      boolean this_present_execId = true;
      boolean that_present_execId = true;
      if (this_present_execId || that_present_execId) {
        if (!(this_present_execId && that_present_execId))
          return false;
        if (this.execId != that.execId)
          return false;
      }

      boolean this_present_flowType = true && this.isSetFlowType();
      boolean that_present_flowType = true && that.isSetFlowType();
      if (this_present_flowType || that_present_flowType) {
        if (!(this_present_flowType && that_present_flowType))
          return false;
        if (!this.flowType.equals(that.flowType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      boolean present_execId = true;
      list.add(present_execId);
      if (present_execId)
        list.add(execId);

      boolean present_flowType = true && (isSetFlowType());
      list.add(present_flowType);
      if (present_flowType)
        list.add(flowType);

      return list.hashCode();
    }

    @Override
    public int compareTo(cancelExecFlow_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExecId()).compareTo(other.isSetExecId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExecId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execId, other.execId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFlowType()).compareTo(other.isSetFlowType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlowType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flowType, other.flowType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelExecFlow_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("execId:");
      sb.append(this.execId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("flowType:");
      if (this.flowType == null) {
        sb.append("null");
      } else {
        sb.append(this.flowType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelExecFlow_argsStandardSchemeFactory implements SchemeFactory {
      public cancelExecFlow_argsStandardScheme getScheme() {
        return new cancelExecFlow_argsStandardScheme();
      }
    }

    private static class cancelExecFlow_argsStandardScheme extends StandardScheme<cancelExecFlow_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelExecFlow_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXEC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.execId = iprot.readI64();
                struct.setExecIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FLOW_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.flowType = iprot.readString();
                struct.setFlowTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelExecFlow_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(EXEC_ID_FIELD_DESC);
        oprot.writeI64(struct.execId);
        oprot.writeFieldEnd();
        if (struct.flowType != null) {
          oprot.writeFieldBegin(FLOW_TYPE_FIELD_DESC);
          oprot.writeString(struct.flowType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelExecFlow_argsTupleSchemeFactory implements SchemeFactory {
      public cancelExecFlow_argsTupleScheme getScheme() {
        return new cancelExecFlow_argsTupleScheme();
      }
    }

    private static class cancelExecFlow_argsTupleScheme extends TupleScheme<cancelExecFlow_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelExecFlow_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        if (struct.isSetExecId()) {
          optionals.set(1);
        }
        if (struct.isSetFlowType()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
        if (struct.isSetExecId()) {
          oprot.writeI64(struct.execId);
        }
        if (struct.isSetFlowType()) {
          oprot.writeString(struct.flowType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelExecFlow_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.execId = iprot.readI64();
          struct.setExecIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.flowType = iprot.readString();
          struct.setFlowTypeIsSet(true);
        }
      }
    }

  }

  public static class cancelExecFlow_result implements org.apache.thrift.TBase<cancelExecFlow_result, cancelExecFlow_result._Fields>, java.io.Serializable, Cloneable, Comparable<cancelExecFlow_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelExecFlow_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelExecFlow_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelExecFlow_resultTupleSchemeFactory());
    }

    public RetInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RetInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelExecFlow_result.class, metaDataMap);
    }

    public cancelExecFlow_result() {
    }

    public cancelExecFlow_result(
      RetInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelExecFlow_result(cancelExecFlow_result other) {
      if (other.isSetSuccess()) {
        this.success = new RetInfo(other.success);
      }
    }

    public cancelExecFlow_result deepCopy() {
      return new cancelExecFlow_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RetInfo getSuccess() {
      return this.success;
    }

    public cancelExecFlow_result setSuccess(RetInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RetInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelExecFlow_result)
        return this.equals((cancelExecFlow_result)that);
      return false;
    }

    public boolean equals(cancelExecFlow_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(cancelExecFlow_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelExecFlow_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelExecFlow_resultStandardSchemeFactory implements SchemeFactory {
      public cancelExecFlow_resultStandardScheme getScheme() {
        return new cancelExecFlow_resultStandardScheme();
      }
    }

    private static class cancelExecFlow_resultStandardScheme extends StandardScheme<cancelExecFlow_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelExecFlow_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RetInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelExecFlow_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelExecFlow_resultTupleSchemeFactory implements SchemeFactory {
      public cancelExecFlow_resultTupleScheme getScheme() {
        return new cancelExecFlow_resultTupleScheme();
      }
    }

    private static class cancelExecFlow_resultTupleScheme extends TupleScheme<cancelExecFlow_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelExecFlow_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelExecFlow_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RetInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
