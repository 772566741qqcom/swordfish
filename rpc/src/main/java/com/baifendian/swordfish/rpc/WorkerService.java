/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baifendian.swordfish.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-07-18")
public class WorkerService {

  /**
   * Worker 服务接口, 供 master-server 调用使用
   */
  public interface Iface {

    /**
     * 执行某个 workflow
     *
     * execId : 执行 id
     *
     * @param execId
     */
    public RetInfo execFlow(int execId) throws org.apache.thrift.TException;

    /**
     * 取消在执行的指定workflow
     *
     * execId : 执行 id
     *
     * @param execId
     */
    public RetInfo cancelExecFlow(int execId) throws org.apache.thrift.TException;

    /**
     * 执行某个流任务
     *
     * execId : 执行 id
     *
     * @param execId
     */
    public RetInfo execStreamingJob(int execId) throws org.apache.thrift.TException;

    /**
     * 取消在执行的指定流任务
     *
     * execId : 执行 id
     *
     * @param execId
     */
    public RetInfo cancelStreamingJob(int execId) throws org.apache.thrift.TException;

    /**
     * 恢复暂停的流任务
     *
     * execId : 执行 id
     *
     * @param execId
     */
    public RetInfo activateStreamingJob(int execId) throws org.apache.thrift.TException;

    /**
     * 暂停流任务
     *
     * execId : 执行 id
     *
     * @param execId
     */
    public RetInfo deactivateStreamingJob(int execId) throws org.apache.thrift.TException;

    /**
     * 执行某个 adHoc SQL
     *
     * adHocId : adHoc id
     *
     * @param adHocId
     */
    public RetInfo execAdHoc(int adHocId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void execFlow(int execId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void cancelExecFlow(int execId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void execStreamingJob(int execId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void cancelStreamingJob(int execId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void activateStreamingJob(int execId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deactivateStreamingJob(int execId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void execAdHoc(int adHocId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public RetInfo execFlow(int execId) throws org.apache.thrift.TException
    {
      send_execFlow(execId);
      return recv_execFlow();
    }

    public void send_execFlow(int execId) throws org.apache.thrift.TException
    {
      execFlow_args args = new execFlow_args();
      args.setExecId(execId);
      sendBase("execFlow", args);
    }

    public RetInfo recv_execFlow() throws org.apache.thrift.TException
    {
      execFlow_result result = new execFlow_result();
      receiveBase(result, "execFlow");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "execFlow failed: unknown result");
    }

    public RetInfo cancelExecFlow(int execId) throws org.apache.thrift.TException
    {
      send_cancelExecFlow(execId);
      return recv_cancelExecFlow();
    }

    public void send_cancelExecFlow(int execId) throws org.apache.thrift.TException
    {
      cancelExecFlow_args args = new cancelExecFlow_args();
      args.setExecId(execId);
      sendBase("cancelExecFlow", args);
    }

    public RetInfo recv_cancelExecFlow() throws org.apache.thrift.TException
    {
      cancelExecFlow_result result = new cancelExecFlow_result();
      receiveBase(result, "cancelExecFlow");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cancelExecFlow failed: unknown result");
    }

    public RetInfo execStreamingJob(int execId) throws org.apache.thrift.TException
    {
      send_execStreamingJob(execId);
      return recv_execStreamingJob();
    }

    public void send_execStreamingJob(int execId) throws org.apache.thrift.TException
    {
      execStreamingJob_args args = new execStreamingJob_args();
      args.setExecId(execId);
      sendBase("execStreamingJob", args);
    }

    public RetInfo recv_execStreamingJob() throws org.apache.thrift.TException
    {
      execStreamingJob_result result = new execStreamingJob_result();
      receiveBase(result, "execStreamingJob");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "execStreamingJob failed: unknown result");
    }

    public RetInfo cancelStreamingJob(int execId) throws org.apache.thrift.TException
    {
      send_cancelStreamingJob(execId);
      return recv_cancelStreamingJob();
    }

    public void send_cancelStreamingJob(int execId) throws org.apache.thrift.TException
    {
      cancelStreamingJob_args args = new cancelStreamingJob_args();
      args.setExecId(execId);
      sendBase("cancelStreamingJob", args);
    }

    public RetInfo recv_cancelStreamingJob() throws org.apache.thrift.TException
    {
      cancelStreamingJob_result result = new cancelStreamingJob_result();
      receiveBase(result, "cancelStreamingJob");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cancelStreamingJob failed: unknown result");
    }

    public RetInfo activateStreamingJob(int execId) throws org.apache.thrift.TException
    {
      send_activateStreamingJob(execId);
      return recv_activateStreamingJob();
    }

    public void send_activateStreamingJob(int execId) throws org.apache.thrift.TException
    {
      activateStreamingJob_args args = new activateStreamingJob_args();
      args.setExecId(execId);
      sendBase("activateStreamingJob", args);
    }

    public RetInfo recv_activateStreamingJob() throws org.apache.thrift.TException
    {
      activateStreamingJob_result result = new activateStreamingJob_result();
      receiveBase(result, "activateStreamingJob");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "activateStreamingJob failed: unknown result");
    }

    public RetInfo deactivateStreamingJob(int execId) throws org.apache.thrift.TException
    {
      send_deactivateStreamingJob(execId);
      return recv_deactivateStreamingJob();
    }

    public void send_deactivateStreamingJob(int execId) throws org.apache.thrift.TException
    {
      deactivateStreamingJob_args args = new deactivateStreamingJob_args();
      args.setExecId(execId);
      sendBase("deactivateStreamingJob", args);
    }

    public RetInfo recv_deactivateStreamingJob() throws org.apache.thrift.TException
    {
      deactivateStreamingJob_result result = new deactivateStreamingJob_result();
      receiveBase(result, "deactivateStreamingJob");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deactivateStreamingJob failed: unknown result");
    }

    public RetInfo execAdHoc(int adHocId) throws org.apache.thrift.TException
    {
      send_execAdHoc(adHocId);
      return recv_execAdHoc();
    }

    public void send_execAdHoc(int adHocId) throws org.apache.thrift.TException
    {
      execAdHoc_args args = new execAdHoc_args();
      args.setAdHocId(adHocId);
      sendBase("execAdHoc", args);
    }

    public RetInfo recv_execAdHoc() throws org.apache.thrift.TException
    {
      execAdHoc_result result = new execAdHoc_result();
      receiveBase(result, "execAdHoc");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "execAdHoc failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void execFlow(int execId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      execFlow_call method_call = new execFlow_call(execId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class execFlow_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int execId;
      public execFlow_call(int execId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.execId = execId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("execFlow", org.apache.thrift.protocol.TMessageType.CALL, 0));
        execFlow_args args = new execFlow_args();
        args.setExecId(execId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RetInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_execFlow();
      }
    }

    public void cancelExecFlow(int execId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cancelExecFlow_call method_call = new cancelExecFlow_call(execId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cancelExecFlow_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int execId;
      public cancelExecFlow_call(int execId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.execId = execId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancelExecFlow", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cancelExecFlow_args args = new cancelExecFlow_args();
        args.setExecId(execId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RetInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cancelExecFlow();
      }
    }

    public void execStreamingJob(int execId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      execStreamingJob_call method_call = new execStreamingJob_call(execId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class execStreamingJob_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int execId;
      public execStreamingJob_call(int execId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.execId = execId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("execStreamingJob", org.apache.thrift.protocol.TMessageType.CALL, 0));
        execStreamingJob_args args = new execStreamingJob_args();
        args.setExecId(execId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RetInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_execStreamingJob();
      }
    }

    public void cancelStreamingJob(int execId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cancelStreamingJob_call method_call = new cancelStreamingJob_call(execId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cancelStreamingJob_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int execId;
      public cancelStreamingJob_call(int execId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.execId = execId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancelStreamingJob", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cancelStreamingJob_args args = new cancelStreamingJob_args();
        args.setExecId(execId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RetInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cancelStreamingJob();
      }
    }

    public void activateStreamingJob(int execId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      activateStreamingJob_call method_call = new activateStreamingJob_call(execId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class activateStreamingJob_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int execId;
      public activateStreamingJob_call(int execId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.execId = execId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("activateStreamingJob", org.apache.thrift.protocol.TMessageType.CALL, 0));
        activateStreamingJob_args args = new activateStreamingJob_args();
        args.setExecId(execId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RetInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_activateStreamingJob();
      }
    }

    public void deactivateStreamingJob(int execId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deactivateStreamingJob_call method_call = new deactivateStreamingJob_call(execId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deactivateStreamingJob_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int execId;
      public deactivateStreamingJob_call(int execId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.execId = execId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deactivateStreamingJob", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deactivateStreamingJob_args args = new deactivateStreamingJob_args();
        args.setExecId(execId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RetInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deactivateStreamingJob();
      }
    }

    public void execAdHoc(int adHocId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      execAdHoc_call method_call = new execAdHoc_call(adHocId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class execAdHoc_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int adHocId;
      public execAdHoc_call(int adHocId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.adHocId = adHocId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("execAdHoc", org.apache.thrift.protocol.TMessageType.CALL, 0));
        execAdHoc_args args = new execAdHoc_args();
        args.setAdHocId(adHocId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RetInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_execAdHoc();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("execFlow", new execFlow());
      processMap.put("cancelExecFlow", new cancelExecFlow());
      processMap.put("execStreamingJob", new execStreamingJob());
      processMap.put("cancelStreamingJob", new cancelStreamingJob());
      processMap.put("activateStreamingJob", new activateStreamingJob());
      processMap.put("deactivateStreamingJob", new deactivateStreamingJob());
      processMap.put("execAdHoc", new execAdHoc());
      return processMap;
    }

    public static class execFlow<I extends Iface> extends org.apache.thrift.ProcessFunction<I, execFlow_args> {
      public execFlow() {
        super("execFlow");
      }

      public execFlow_args getEmptyArgsInstance() {
        return new execFlow_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public execFlow_result getResult(I iface, execFlow_args args) throws org.apache.thrift.TException {
        execFlow_result result = new execFlow_result();
        result.success = iface.execFlow(args.execId);
        return result;
      }
    }

    public static class cancelExecFlow<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancelExecFlow_args> {
      public cancelExecFlow() {
        super("cancelExecFlow");
      }

      public cancelExecFlow_args getEmptyArgsInstance() {
        return new cancelExecFlow_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cancelExecFlow_result getResult(I iface, cancelExecFlow_args args) throws org.apache.thrift.TException {
        cancelExecFlow_result result = new cancelExecFlow_result();
        result.success = iface.cancelExecFlow(args.execId);
        return result;
      }
    }

    public static class execStreamingJob<I extends Iface> extends org.apache.thrift.ProcessFunction<I, execStreamingJob_args> {
      public execStreamingJob() {
        super("execStreamingJob");
      }

      public execStreamingJob_args getEmptyArgsInstance() {
        return new execStreamingJob_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public execStreamingJob_result getResult(I iface, execStreamingJob_args args) throws org.apache.thrift.TException {
        execStreamingJob_result result = new execStreamingJob_result();
        result.success = iface.execStreamingJob(args.execId);
        return result;
      }
    }

    public static class cancelStreamingJob<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancelStreamingJob_args> {
      public cancelStreamingJob() {
        super("cancelStreamingJob");
      }

      public cancelStreamingJob_args getEmptyArgsInstance() {
        return new cancelStreamingJob_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cancelStreamingJob_result getResult(I iface, cancelStreamingJob_args args) throws org.apache.thrift.TException {
        cancelStreamingJob_result result = new cancelStreamingJob_result();
        result.success = iface.cancelStreamingJob(args.execId);
        return result;
      }
    }

    public static class activateStreamingJob<I extends Iface> extends org.apache.thrift.ProcessFunction<I, activateStreamingJob_args> {
      public activateStreamingJob() {
        super("activateStreamingJob");
      }

      public activateStreamingJob_args getEmptyArgsInstance() {
        return new activateStreamingJob_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public activateStreamingJob_result getResult(I iface, activateStreamingJob_args args) throws org.apache.thrift.TException {
        activateStreamingJob_result result = new activateStreamingJob_result();
        result.success = iface.activateStreamingJob(args.execId);
        return result;
      }
    }

    public static class deactivateStreamingJob<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deactivateStreamingJob_args> {
      public deactivateStreamingJob() {
        super("deactivateStreamingJob");
      }

      public deactivateStreamingJob_args getEmptyArgsInstance() {
        return new deactivateStreamingJob_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deactivateStreamingJob_result getResult(I iface, deactivateStreamingJob_args args) throws org.apache.thrift.TException {
        deactivateStreamingJob_result result = new deactivateStreamingJob_result();
        result.success = iface.deactivateStreamingJob(args.execId);
        return result;
      }
    }

    public static class execAdHoc<I extends Iface> extends org.apache.thrift.ProcessFunction<I, execAdHoc_args> {
      public execAdHoc() {
        super("execAdHoc");
      }

      public execAdHoc_args getEmptyArgsInstance() {
        return new execAdHoc_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public execAdHoc_result getResult(I iface, execAdHoc_args args) throws org.apache.thrift.TException {
        execAdHoc_result result = new execAdHoc_result();
        result.success = iface.execAdHoc(args.adHocId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("execFlow", new execFlow());
      processMap.put("cancelExecFlow", new cancelExecFlow());
      processMap.put("execStreamingJob", new execStreamingJob());
      processMap.put("cancelStreamingJob", new cancelStreamingJob());
      processMap.put("activateStreamingJob", new activateStreamingJob());
      processMap.put("deactivateStreamingJob", new deactivateStreamingJob());
      processMap.put("execAdHoc", new execAdHoc());
      return processMap;
    }

    public static class execFlow<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, execFlow_args, RetInfo> {
      public execFlow() {
        super("execFlow");
      }

      public execFlow_args getEmptyArgsInstance() {
        return new execFlow_args();
      }

      public AsyncMethodCallback<RetInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RetInfo>() {
          public void onComplete(RetInfo o) {
            execFlow_result result = new execFlow_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            execFlow_result result = new execFlow_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, execFlow_args args, org.apache.thrift.async.AsyncMethodCallback<RetInfo> resultHandler) throws TException {
        iface.execFlow(args.execId,resultHandler);
      }
    }

    public static class cancelExecFlow<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cancelExecFlow_args, RetInfo> {
      public cancelExecFlow() {
        super("cancelExecFlow");
      }

      public cancelExecFlow_args getEmptyArgsInstance() {
        return new cancelExecFlow_args();
      }

      public AsyncMethodCallback<RetInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RetInfo>() {
          public void onComplete(RetInfo o) {
            cancelExecFlow_result result = new cancelExecFlow_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            cancelExecFlow_result result = new cancelExecFlow_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cancelExecFlow_args args, org.apache.thrift.async.AsyncMethodCallback<RetInfo> resultHandler) throws TException {
        iface.cancelExecFlow(args.execId,resultHandler);
      }
    }

    public static class execStreamingJob<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, execStreamingJob_args, RetInfo> {
      public execStreamingJob() {
        super("execStreamingJob");
      }

      public execStreamingJob_args getEmptyArgsInstance() {
        return new execStreamingJob_args();
      }

      public AsyncMethodCallback<RetInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RetInfo>() {
          public void onComplete(RetInfo o) {
            execStreamingJob_result result = new execStreamingJob_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            execStreamingJob_result result = new execStreamingJob_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, execStreamingJob_args args, org.apache.thrift.async.AsyncMethodCallback<RetInfo> resultHandler) throws TException {
        iface.execStreamingJob(args.execId,resultHandler);
      }
    }

    public static class cancelStreamingJob<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cancelStreamingJob_args, RetInfo> {
      public cancelStreamingJob() {
        super("cancelStreamingJob");
      }

      public cancelStreamingJob_args getEmptyArgsInstance() {
        return new cancelStreamingJob_args();
      }

      public AsyncMethodCallback<RetInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RetInfo>() {
          public void onComplete(RetInfo o) {
            cancelStreamingJob_result result = new cancelStreamingJob_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            cancelStreamingJob_result result = new cancelStreamingJob_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cancelStreamingJob_args args, org.apache.thrift.async.AsyncMethodCallback<RetInfo> resultHandler) throws TException {
        iface.cancelStreamingJob(args.execId,resultHandler);
      }
    }

    public static class activateStreamingJob<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, activateStreamingJob_args, RetInfo> {
      public activateStreamingJob() {
        super("activateStreamingJob");
      }

      public activateStreamingJob_args getEmptyArgsInstance() {
        return new activateStreamingJob_args();
      }

      public AsyncMethodCallback<RetInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RetInfo>() {
          public void onComplete(RetInfo o) {
            activateStreamingJob_result result = new activateStreamingJob_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            activateStreamingJob_result result = new activateStreamingJob_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, activateStreamingJob_args args, org.apache.thrift.async.AsyncMethodCallback<RetInfo> resultHandler) throws TException {
        iface.activateStreamingJob(args.execId,resultHandler);
      }
    }

    public static class deactivateStreamingJob<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deactivateStreamingJob_args, RetInfo> {
      public deactivateStreamingJob() {
        super("deactivateStreamingJob");
      }

      public deactivateStreamingJob_args getEmptyArgsInstance() {
        return new deactivateStreamingJob_args();
      }

      public AsyncMethodCallback<RetInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RetInfo>() {
          public void onComplete(RetInfo o) {
            deactivateStreamingJob_result result = new deactivateStreamingJob_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deactivateStreamingJob_result result = new deactivateStreamingJob_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deactivateStreamingJob_args args, org.apache.thrift.async.AsyncMethodCallback<RetInfo> resultHandler) throws TException {
        iface.deactivateStreamingJob(args.execId,resultHandler);
      }
    }

    public static class execAdHoc<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, execAdHoc_args, RetInfo> {
      public execAdHoc() {
        super("execAdHoc");
      }

      public execAdHoc_args getEmptyArgsInstance() {
        return new execAdHoc_args();
      }

      public AsyncMethodCallback<RetInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RetInfo>() {
          public void onComplete(RetInfo o) {
            execAdHoc_result result = new execAdHoc_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            execAdHoc_result result = new execAdHoc_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, execAdHoc_args args, org.apache.thrift.async.AsyncMethodCallback<RetInfo> resultHandler) throws TException {
        iface.execAdHoc(args.adHocId,resultHandler);
      }
    }

  }

  public static class execFlow_args implements org.apache.thrift.TBase<execFlow_args, execFlow_args._Fields>, java.io.Serializable, Cloneable, Comparable<execFlow_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("execFlow_args");

    private static final org.apache.thrift.protocol.TField EXEC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("execId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new execFlow_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new execFlow_argsTupleSchemeFactory());
    }

    public int execId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXEC_ID((short)1, "execId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXEC_ID
            return EXEC_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EXECID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXEC_ID, new org.apache.thrift.meta_data.FieldMetaData("execId", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(execFlow_args.class, metaDataMap);
    }

    public execFlow_args() {
    }

    public execFlow_args(
            int execId)
    {
      this();
      this.execId = execId;
      setExecIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public execFlow_args(execFlow_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.execId = other.execId;
    }

    public execFlow_args deepCopy() {
      return new execFlow_args(this);
    }

    @Override
    public void clear() {
      setExecIdIsSet(false);
      this.execId = 0;
    }

    public int getExecId() {
      return this.execId;
    }

    public execFlow_args setExecId(int execId) {
      this.execId = execId;
      setExecIdIsSet(true);
      return this;
    }

    public void unsetExecId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXECID_ISSET_ID);
    }

    /** Returns true if field execId is set (has been assigned a value) and false otherwise */
    public boolean isSetExecId() {
      return EncodingUtils.testBit(__isset_bitfield, __EXECID_ISSET_ID);
    }

    public void setExecIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXECID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case EXEC_ID:
          if (value == null) {
            unsetExecId();
          } else {
            setExecId((Integer)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case EXEC_ID:
          return getExecId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case EXEC_ID:
          return isSetExecId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof execFlow_args)
        return this.equals((execFlow_args)that);
      return false;
    }

    public boolean equals(execFlow_args that) {
      if (that == null)
        return false;

      boolean this_present_execId = true;
      boolean that_present_execId = true;
      if (this_present_execId || that_present_execId) {
        if (!(this_present_execId && that_present_execId))
          return false;
        if (this.execId != that.execId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_execId = true;
      list.add(present_execId);
      if (present_execId)
        list.add(execId);

      return list.hashCode();
    }

    @Override
    public int compareTo(execFlow_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExecId()).compareTo(other.isSetExecId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExecId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execId, other.execId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("execFlow_args(");
      boolean first = true;

      sb.append("execId:");
      sb.append(this.execId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class execFlow_argsStandardSchemeFactory implements SchemeFactory {
      public execFlow_argsStandardScheme getScheme() {
        return new execFlow_argsStandardScheme();
      }
    }

    private static class execFlow_argsStandardScheme extends StandardScheme<execFlow_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, execFlow_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // EXEC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.execId = iprot.readI32();
                struct.setExecIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, execFlow_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EXEC_ID_FIELD_DESC);
        oprot.writeI32(struct.execId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class execFlow_argsTupleSchemeFactory implements SchemeFactory {
      public execFlow_argsTupleScheme getScheme() {
        return new execFlow_argsTupleScheme();
      }
    }

    private static class execFlow_argsTupleScheme extends TupleScheme<execFlow_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, execFlow_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExecId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExecId()) {
          oprot.writeI32(struct.execId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, execFlow_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.execId = iprot.readI32();
          struct.setExecIdIsSet(true);
        }
      }
    }

  }

  public static class execFlow_result implements org.apache.thrift.TBase<execFlow_result, execFlow_result._Fields>, java.io.Serializable, Cloneable, Comparable<execFlow_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("execFlow_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new execFlow_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new execFlow_resultTupleSchemeFactory());
    }

    public RetInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RetInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(execFlow_result.class, metaDataMap);
    }

    public execFlow_result() {
    }

    public execFlow_result(
            RetInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public execFlow_result(execFlow_result other) {
      if (other.isSetSuccess()) {
        this.success = new RetInfo(other.success);
      }
    }

    public execFlow_result deepCopy() {
      return new execFlow_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RetInfo getSuccess() {
      return this.success;
    }

    public execFlow_result setSuccess(RetInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((RetInfo)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof execFlow_result)
        return this.equals((execFlow_result)that);
      return false;
    }

    public boolean equals(execFlow_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(execFlow_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("execFlow_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class execFlow_resultStandardSchemeFactory implements SchemeFactory {
      public execFlow_resultStandardScheme getScheme() {
        return new execFlow_resultStandardScheme();
      }
    }

    private static class execFlow_resultStandardScheme extends StandardScheme<execFlow_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, execFlow_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RetInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, execFlow_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class execFlow_resultTupleSchemeFactory implements SchemeFactory {
      public execFlow_resultTupleScheme getScheme() {
        return new execFlow_resultTupleScheme();
      }
    }

    private static class execFlow_resultTupleScheme extends TupleScheme<execFlow_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, execFlow_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, execFlow_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RetInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class cancelExecFlow_args implements org.apache.thrift.TBase<cancelExecFlow_args, cancelExecFlow_args._Fields>, java.io.Serializable, Cloneable, Comparable<cancelExecFlow_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelExecFlow_args");

    private static final org.apache.thrift.protocol.TField EXEC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("execId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelExecFlow_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelExecFlow_argsTupleSchemeFactory());
    }

    public int execId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXEC_ID((short)1, "execId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXEC_ID
            return EXEC_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EXECID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXEC_ID, new org.apache.thrift.meta_data.FieldMetaData("execId", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelExecFlow_args.class, metaDataMap);
    }

    public cancelExecFlow_args() {
    }

    public cancelExecFlow_args(
            int execId)
    {
      this();
      this.execId = execId;
      setExecIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelExecFlow_args(cancelExecFlow_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.execId = other.execId;
    }

    public cancelExecFlow_args deepCopy() {
      return new cancelExecFlow_args(this);
    }

    @Override
    public void clear() {
      setExecIdIsSet(false);
      this.execId = 0;
    }

    public int getExecId() {
      return this.execId;
    }

    public cancelExecFlow_args setExecId(int execId) {
      this.execId = execId;
      setExecIdIsSet(true);
      return this;
    }

    public void unsetExecId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXECID_ISSET_ID);
    }

    /** Returns true if field execId is set (has been assigned a value) and false otherwise */
    public boolean isSetExecId() {
      return EncodingUtils.testBit(__isset_bitfield, __EXECID_ISSET_ID);
    }

    public void setExecIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXECID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case EXEC_ID:
          if (value == null) {
            unsetExecId();
          } else {
            setExecId((Integer)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case EXEC_ID:
          return getExecId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case EXEC_ID:
          return isSetExecId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelExecFlow_args)
        return this.equals((cancelExecFlow_args)that);
      return false;
    }

    public boolean equals(cancelExecFlow_args that) {
      if (that == null)
        return false;

      boolean this_present_execId = true;
      boolean that_present_execId = true;
      if (this_present_execId || that_present_execId) {
        if (!(this_present_execId && that_present_execId))
          return false;
        if (this.execId != that.execId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_execId = true;
      list.add(present_execId);
      if (present_execId)
        list.add(execId);

      return list.hashCode();
    }

    @Override
    public int compareTo(cancelExecFlow_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExecId()).compareTo(other.isSetExecId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExecId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execId, other.execId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelExecFlow_args(");
      boolean first = true;

      sb.append("execId:");
      sb.append(this.execId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelExecFlow_argsStandardSchemeFactory implements SchemeFactory {
      public cancelExecFlow_argsStandardScheme getScheme() {
        return new cancelExecFlow_argsStandardScheme();
      }
    }

    private static class cancelExecFlow_argsStandardScheme extends StandardScheme<cancelExecFlow_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelExecFlow_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // EXEC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.execId = iprot.readI32();
                struct.setExecIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelExecFlow_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EXEC_ID_FIELD_DESC);
        oprot.writeI32(struct.execId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelExecFlow_argsTupleSchemeFactory implements SchemeFactory {
      public cancelExecFlow_argsTupleScheme getScheme() {
        return new cancelExecFlow_argsTupleScheme();
      }
    }

    private static class cancelExecFlow_argsTupleScheme extends TupleScheme<cancelExecFlow_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelExecFlow_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExecId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExecId()) {
          oprot.writeI32(struct.execId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelExecFlow_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.execId = iprot.readI32();
          struct.setExecIdIsSet(true);
        }
      }
    }

  }

  public static class cancelExecFlow_result implements org.apache.thrift.TBase<cancelExecFlow_result, cancelExecFlow_result._Fields>, java.io.Serializable, Cloneable, Comparable<cancelExecFlow_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelExecFlow_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelExecFlow_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelExecFlow_resultTupleSchemeFactory());
    }

    public RetInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RetInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelExecFlow_result.class, metaDataMap);
    }

    public cancelExecFlow_result() {
    }

    public cancelExecFlow_result(
            RetInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelExecFlow_result(cancelExecFlow_result other) {
      if (other.isSetSuccess()) {
        this.success = new RetInfo(other.success);
      }
    }

    public cancelExecFlow_result deepCopy() {
      return new cancelExecFlow_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RetInfo getSuccess() {
      return this.success;
    }

    public cancelExecFlow_result setSuccess(RetInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((RetInfo)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelExecFlow_result)
        return this.equals((cancelExecFlow_result)that);
      return false;
    }

    public boolean equals(cancelExecFlow_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(cancelExecFlow_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelExecFlow_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelExecFlow_resultStandardSchemeFactory implements SchemeFactory {
      public cancelExecFlow_resultStandardScheme getScheme() {
        return new cancelExecFlow_resultStandardScheme();
      }
    }

    private static class cancelExecFlow_resultStandardScheme extends StandardScheme<cancelExecFlow_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelExecFlow_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RetInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelExecFlow_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelExecFlow_resultTupleSchemeFactory implements SchemeFactory {
      public cancelExecFlow_resultTupleScheme getScheme() {
        return new cancelExecFlow_resultTupleScheme();
      }
    }

    private static class cancelExecFlow_resultTupleScheme extends TupleScheme<cancelExecFlow_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelExecFlow_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelExecFlow_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RetInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class execStreamingJob_args implements org.apache.thrift.TBase<execStreamingJob_args, execStreamingJob_args._Fields>, java.io.Serializable, Cloneable, Comparable<execStreamingJob_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("execStreamingJob_args");

    private static final org.apache.thrift.protocol.TField EXEC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("execId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new execStreamingJob_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new execStreamingJob_argsTupleSchemeFactory());
    }

    public int execId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXEC_ID((short)1, "execId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXEC_ID
            return EXEC_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EXECID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXEC_ID, new org.apache.thrift.meta_data.FieldMetaData("execId", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(execStreamingJob_args.class, metaDataMap);
    }

    public execStreamingJob_args() {
    }

    public execStreamingJob_args(
            int execId)
    {
      this();
      this.execId = execId;
      setExecIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public execStreamingJob_args(execStreamingJob_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.execId = other.execId;
    }

    public execStreamingJob_args deepCopy() {
      return new execStreamingJob_args(this);
    }

    @Override
    public void clear() {
      setExecIdIsSet(false);
      this.execId = 0;
    }

    public int getExecId() {
      return this.execId;
    }

    public execStreamingJob_args setExecId(int execId) {
      this.execId = execId;
      setExecIdIsSet(true);
      return this;
    }

    public void unsetExecId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXECID_ISSET_ID);
    }

    /** Returns true if field execId is set (has been assigned a value) and false otherwise */
    public boolean isSetExecId() {
      return EncodingUtils.testBit(__isset_bitfield, __EXECID_ISSET_ID);
    }

    public void setExecIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXECID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case EXEC_ID:
          if (value == null) {
            unsetExecId();
          } else {
            setExecId((Integer)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case EXEC_ID:
          return getExecId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case EXEC_ID:
          return isSetExecId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof execStreamingJob_args)
        return this.equals((execStreamingJob_args)that);
      return false;
    }

    public boolean equals(execStreamingJob_args that) {
      if (that == null)
        return false;

      boolean this_present_execId = true;
      boolean that_present_execId = true;
      if (this_present_execId || that_present_execId) {
        if (!(this_present_execId && that_present_execId))
          return false;
        if (this.execId != that.execId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_execId = true;
      list.add(present_execId);
      if (present_execId)
        list.add(execId);

      return list.hashCode();
    }

    @Override
    public int compareTo(execStreamingJob_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExecId()).compareTo(other.isSetExecId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExecId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execId, other.execId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("execStreamingJob_args(");
      boolean first = true;

      sb.append("execId:");
      sb.append(this.execId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class execStreamingJob_argsStandardSchemeFactory implements SchemeFactory {
      public execStreamingJob_argsStandardScheme getScheme() {
        return new execStreamingJob_argsStandardScheme();
      }
    }

    private static class execStreamingJob_argsStandardScheme extends StandardScheme<execStreamingJob_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, execStreamingJob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // EXEC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.execId = iprot.readI32();
                struct.setExecIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, execStreamingJob_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EXEC_ID_FIELD_DESC);
        oprot.writeI32(struct.execId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class execStreamingJob_argsTupleSchemeFactory implements SchemeFactory {
      public execStreamingJob_argsTupleScheme getScheme() {
        return new execStreamingJob_argsTupleScheme();
      }
    }

    private static class execStreamingJob_argsTupleScheme extends TupleScheme<execStreamingJob_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, execStreamingJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExecId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExecId()) {
          oprot.writeI32(struct.execId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, execStreamingJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.execId = iprot.readI32();
          struct.setExecIdIsSet(true);
        }
      }
    }

  }

  public static class execStreamingJob_result implements org.apache.thrift.TBase<execStreamingJob_result, execStreamingJob_result._Fields>, java.io.Serializable, Cloneable, Comparable<execStreamingJob_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("execStreamingJob_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new execStreamingJob_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new execStreamingJob_resultTupleSchemeFactory());
    }

    public RetInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RetInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(execStreamingJob_result.class, metaDataMap);
    }

    public execStreamingJob_result() {
    }

    public execStreamingJob_result(
            RetInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public execStreamingJob_result(execStreamingJob_result other) {
      if (other.isSetSuccess()) {
        this.success = new RetInfo(other.success);
      }
    }

    public execStreamingJob_result deepCopy() {
      return new execStreamingJob_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RetInfo getSuccess() {
      return this.success;
    }

    public execStreamingJob_result setSuccess(RetInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((RetInfo)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof execStreamingJob_result)
        return this.equals((execStreamingJob_result)that);
      return false;
    }

    public boolean equals(execStreamingJob_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(execStreamingJob_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("execStreamingJob_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class execStreamingJob_resultStandardSchemeFactory implements SchemeFactory {
      public execStreamingJob_resultStandardScheme getScheme() {
        return new execStreamingJob_resultStandardScheme();
      }
    }

    private static class execStreamingJob_resultStandardScheme extends StandardScheme<execStreamingJob_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, execStreamingJob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RetInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, execStreamingJob_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class execStreamingJob_resultTupleSchemeFactory implements SchemeFactory {
      public execStreamingJob_resultTupleScheme getScheme() {
        return new execStreamingJob_resultTupleScheme();
      }
    }

    private static class execStreamingJob_resultTupleScheme extends TupleScheme<execStreamingJob_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, execStreamingJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, execStreamingJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RetInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class cancelStreamingJob_args implements org.apache.thrift.TBase<cancelStreamingJob_args, cancelStreamingJob_args._Fields>, java.io.Serializable, Cloneable, Comparable<cancelStreamingJob_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelStreamingJob_args");

    private static final org.apache.thrift.protocol.TField EXEC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("execId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelStreamingJob_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelStreamingJob_argsTupleSchemeFactory());
    }

    public int execId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXEC_ID((short)1, "execId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXEC_ID
            return EXEC_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EXECID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXEC_ID, new org.apache.thrift.meta_data.FieldMetaData("execId", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelStreamingJob_args.class, metaDataMap);
    }

    public cancelStreamingJob_args() {
    }

    public cancelStreamingJob_args(
            int execId)
    {
      this();
      this.execId = execId;
      setExecIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelStreamingJob_args(cancelStreamingJob_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.execId = other.execId;
    }

    public cancelStreamingJob_args deepCopy() {
      return new cancelStreamingJob_args(this);
    }

    @Override
    public void clear() {
      setExecIdIsSet(false);
      this.execId = 0;
    }

    public int getExecId() {
      return this.execId;
    }

    public cancelStreamingJob_args setExecId(int execId) {
      this.execId = execId;
      setExecIdIsSet(true);
      return this;
    }

    public void unsetExecId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXECID_ISSET_ID);
    }

    /** Returns true if field execId is set (has been assigned a value) and false otherwise */
    public boolean isSetExecId() {
      return EncodingUtils.testBit(__isset_bitfield, __EXECID_ISSET_ID);
    }

    public void setExecIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXECID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case EXEC_ID:
          if (value == null) {
            unsetExecId();
          } else {
            setExecId((Integer)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case EXEC_ID:
          return getExecId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case EXEC_ID:
          return isSetExecId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelStreamingJob_args)
        return this.equals((cancelStreamingJob_args)that);
      return false;
    }

    public boolean equals(cancelStreamingJob_args that) {
      if (that == null)
        return false;

      boolean this_present_execId = true;
      boolean that_present_execId = true;
      if (this_present_execId || that_present_execId) {
        if (!(this_present_execId && that_present_execId))
          return false;
        if (this.execId != that.execId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_execId = true;
      list.add(present_execId);
      if (present_execId)
        list.add(execId);

      return list.hashCode();
    }

    @Override
    public int compareTo(cancelStreamingJob_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExecId()).compareTo(other.isSetExecId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExecId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execId, other.execId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelStreamingJob_args(");
      boolean first = true;

      sb.append("execId:");
      sb.append(this.execId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelStreamingJob_argsStandardSchemeFactory implements SchemeFactory {
      public cancelStreamingJob_argsStandardScheme getScheme() {
        return new cancelStreamingJob_argsStandardScheme();
      }
    }

    private static class cancelStreamingJob_argsStandardScheme extends StandardScheme<cancelStreamingJob_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelStreamingJob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // EXEC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.execId = iprot.readI32();
                struct.setExecIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelStreamingJob_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EXEC_ID_FIELD_DESC);
        oprot.writeI32(struct.execId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelStreamingJob_argsTupleSchemeFactory implements SchemeFactory {
      public cancelStreamingJob_argsTupleScheme getScheme() {
        return new cancelStreamingJob_argsTupleScheme();
      }
    }

    private static class cancelStreamingJob_argsTupleScheme extends TupleScheme<cancelStreamingJob_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelStreamingJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExecId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExecId()) {
          oprot.writeI32(struct.execId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelStreamingJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.execId = iprot.readI32();
          struct.setExecIdIsSet(true);
        }
      }
    }

  }

  public static class cancelStreamingJob_result implements org.apache.thrift.TBase<cancelStreamingJob_result, cancelStreamingJob_result._Fields>, java.io.Serializable, Cloneable, Comparable<cancelStreamingJob_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelStreamingJob_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelStreamingJob_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelStreamingJob_resultTupleSchemeFactory());
    }

    public RetInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RetInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelStreamingJob_result.class, metaDataMap);
    }

    public cancelStreamingJob_result() {
    }

    public cancelStreamingJob_result(
            RetInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelStreamingJob_result(cancelStreamingJob_result other) {
      if (other.isSetSuccess()) {
        this.success = new RetInfo(other.success);
      }
    }

    public cancelStreamingJob_result deepCopy() {
      return new cancelStreamingJob_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RetInfo getSuccess() {
      return this.success;
    }

    public cancelStreamingJob_result setSuccess(RetInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((RetInfo)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelStreamingJob_result)
        return this.equals((cancelStreamingJob_result)that);
      return false;
    }

    public boolean equals(cancelStreamingJob_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(cancelStreamingJob_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelStreamingJob_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelStreamingJob_resultStandardSchemeFactory implements SchemeFactory {
      public cancelStreamingJob_resultStandardScheme getScheme() {
        return new cancelStreamingJob_resultStandardScheme();
      }
    }

    private static class cancelStreamingJob_resultStandardScheme extends StandardScheme<cancelStreamingJob_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelStreamingJob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RetInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelStreamingJob_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelStreamingJob_resultTupleSchemeFactory implements SchemeFactory {
      public cancelStreamingJob_resultTupleScheme getScheme() {
        return new cancelStreamingJob_resultTupleScheme();
      }
    }

    private static class cancelStreamingJob_resultTupleScheme extends TupleScheme<cancelStreamingJob_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelStreamingJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelStreamingJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RetInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class activateStreamingJob_args implements org.apache.thrift.TBase<activateStreamingJob_args, activateStreamingJob_args._Fields>, java.io.Serializable, Cloneable, Comparable<activateStreamingJob_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("activateStreamingJob_args");

    private static final org.apache.thrift.protocol.TField EXEC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("execId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new activateStreamingJob_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new activateStreamingJob_argsTupleSchemeFactory());
    }

    public int execId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXEC_ID((short)1, "execId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXEC_ID
            return EXEC_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EXECID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXEC_ID, new org.apache.thrift.meta_data.FieldMetaData("execId", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(activateStreamingJob_args.class, metaDataMap);
    }

    public activateStreamingJob_args() {
    }

    public activateStreamingJob_args(
            int execId)
    {
      this();
      this.execId = execId;
      setExecIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public activateStreamingJob_args(activateStreamingJob_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.execId = other.execId;
    }

    public activateStreamingJob_args deepCopy() {
      return new activateStreamingJob_args(this);
    }

    @Override
    public void clear() {
      setExecIdIsSet(false);
      this.execId = 0;
    }

    public int getExecId() {
      return this.execId;
    }

    public activateStreamingJob_args setExecId(int execId) {
      this.execId = execId;
      setExecIdIsSet(true);
      return this;
    }

    public void unsetExecId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXECID_ISSET_ID);
    }

    /** Returns true if field execId is set (has been assigned a value) and false otherwise */
    public boolean isSetExecId() {
      return EncodingUtils.testBit(__isset_bitfield, __EXECID_ISSET_ID);
    }

    public void setExecIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXECID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case EXEC_ID:
          if (value == null) {
            unsetExecId();
          } else {
            setExecId((Integer)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case EXEC_ID:
          return getExecId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case EXEC_ID:
          return isSetExecId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof activateStreamingJob_args)
        return this.equals((activateStreamingJob_args)that);
      return false;
    }

    public boolean equals(activateStreamingJob_args that) {
      if (that == null)
        return false;

      boolean this_present_execId = true;
      boolean that_present_execId = true;
      if (this_present_execId || that_present_execId) {
        if (!(this_present_execId && that_present_execId))
          return false;
        if (this.execId != that.execId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_execId = true;
      list.add(present_execId);
      if (present_execId)
        list.add(execId);

      return list.hashCode();
    }

    @Override
    public int compareTo(activateStreamingJob_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExecId()).compareTo(other.isSetExecId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExecId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execId, other.execId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("activateStreamingJob_args(");
      boolean first = true;

      sb.append("execId:");
      sb.append(this.execId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class activateStreamingJob_argsStandardSchemeFactory implements SchemeFactory {
      public activateStreamingJob_argsStandardScheme getScheme() {
        return new activateStreamingJob_argsStandardScheme();
      }
    }

    private static class activateStreamingJob_argsStandardScheme extends StandardScheme<activateStreamingJob_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, activateStreamingJob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // EXEC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.execId = iprot.readI32();
                struct.setExecIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, activateStreamingJob_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EXEC_ID_FIELD_DESC);
        oprot.writeI32(struct.execId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class activateStreamingJob_argsTupleSchemeFactory implements SchemeFactory {
      public activateStreamingJob_argsTupleScheme getScheme() {
        return new activateStreamingJob_argsTupleScheme();
      }
    }

    private static class activateStreamingJob_argsTupleScheme extends TupleScheme<activateStreamingJob_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, activateStreamingJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExecId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExecId()) {
          oprot.writeI32(struct.execId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, activateStreamingJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.execId = iprot.readI32();
          struct.setExecIdIsSet(true);
        }
      }
    }

  }

  public static class activateStreamingJob_result implements org.apache.thrift.TBase<activateStreamingJob_result, activateStreamingJob_result._Fields>, java.io.Serializable, Cloneable, Comparable<activateStreamingJob_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("activateStreamingJob_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new activateStreamingJob_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new activateStreamingJob_resultTupleSchemeFactory());
    }

    public RetInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RetInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(activateStreamingJob_result.class, metaDataMap);
    }

    public activateStreamingJob_result() {
    }

    public activateStreamingJob_result(
            RetInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public activateStreamingJob_result(activateStreamingJob_result other) {
      if (other.isSetSuccess()) {
        this.success = new RetInfo(other.success);
      }
    }

    public activateStreamingJob_result deepCopy() {
      return new activateStreamingJob_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RetInfo getSuccess() {
      return this.success;
    }

    public activateStreamingJob_result setSuccess(RetInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((RetInfo)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof activateStreamingJob_result)
        return this.equals((activateStreamingJob_result)that);
      return false;
    }

    public boolean equals(activateStreamingJob_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(activateStreamingJob_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("activateStreamingJob_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class activateStreamingJob_resultStandardSchemeFactory implements SchemeFactory {
      public activateStreamingJob_resultStandardScheme getScheme() {
        return new activateStreamingJob_resultStandardScheme();
      }
    }

    private static class activateStreamingJob_resultStandardScheme extends StandardScheme<activateStreamingJob_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, activateStreamingJob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RetInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, activateStreamingJob_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class activateStreamingJob_resultTupleSchemeFactory implements SchemeFactory {
      public activateStreamingJob_resultTupleScheme getScheme() {
        return new activateStreamingJob_resultTupleScheme();
      }
    }

    private static class activateStreamingJob_resultTupleScheme extends TupleScheme<activateStreamingJob_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, activateStreamingJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, activateStreamingJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RetInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deactivateStreamingJob_args implements org.apache.thrift.TBase<deactivateStreamingJob_args, deactivateStreamingJob_args._Fields>, java.io.Serializable, Cloneable, Comparable<deactivateStreamingJob_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deactivateStreamingJob_args");

    private static final org.apache.thrift.protocol.TField EXEC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("execId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deactivateStreamingJob_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deactivateStreamingJob_argsTupleSchemeFactory());
    }

    public int execId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXEC_ID((short)1, "execId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXEC_ID
            return EXEC_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EXECID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXEC_ID, new org.apache.thrift.meta_data.FieldMetaData("execId", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deactivateStreamingJob_args.class, metaDataMap);
    }

    public deactivateStreamingJob_args() {
    }

    public deactivateStreamingJob_args(
            int execId)
    {
      this();
      this.execId = execId;
      setExecIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deactivateStreamingJob_args(deactivateStreamingJob_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.execId = other.execId;
    }

    public deactivateStreamingJob_args deepCopy() {
      return new deactivateStreamingJob_args(this);
    }

    @Override
    public void clear() {
      setExecIdIsSet(false);
      this.execId = 0;
    }

    public int getExecId() {
      return this.execId;
    }

    public deactivateStreamingJob_args setExecId(int execId) {
      this.execId = execId;
      setExecIdIsSet(true);
      return this;
    }

    public void unsetExecId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXECID_ISSET_ID);
    }

    /** Returns true if field execId is set (has been assigned a value) and false otherwise */
    public boolean isSetExecId() {
      return EncodingUtils.testBit(__isset_bitfield, __EXECID_ISSET_ID);
    }

    public void setExecIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXECID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case EXEC_ID:
          if (value == null) {
            unsetExecId();
          } else {
            setExecId((Integer)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case EXEC_ID:
          return getExecId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case EXEC_ID:
          return isSetExecId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deactivateStreamingJob_args)
        return this.equals((deactivateStreamingJob_args)that);
      return false;
    }

    public boolean equals(deactivateStreamingJob_args that) {
      if (that == null)
        return false;

      boolean this_present_execId = true;
      boolean that_present_execId = true;
      if (this_present_execId || that_present_execId) {
        if (!(this_present_execId && that_present_execId))
          return false;
        if (this.execId != that.execId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_execId = true;
      list.add(present_execId);
      if (present_execId)
        list.add(execId);

      return list.hashCode();
    }

    @Override
    public int compareTo(deactivateStreamingJob_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExecId()).compareTo(other.isSetExecId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExecId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execId, other.execId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deactivateStreamingJob_args(");
      boolean first = true;

      sb.append("execId:");
      sb.append(this.execId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deactivateStreamingJob_argsStandardSchemeFactory implements SchemeFactory {
      public deactivateStreamingJob_argsStandardScheme getScheme() {
        return new deactivateStreamingJob_argsStandardScheme();
      }
    }

    private static class deactivateStreamingJob_argsStandardScheme extends StandardScheme<deactivateStreamingJob_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deactivateStreamingJob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // EXEC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.execId = iprot.readI32();
                struct.setExecIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deactivateStreamingJob_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EXEC_ID_FIELD_DESC);
        oprot.writeI32(struct.execId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deactivateStreamingJob_argsTupleSchemeFactory implements SchemeFactory {
      public deactivateStreamingJob_argsTupleScheme getScheme() {
        return new deactivateStreamingJob_argsTupleScheme();
      }
    }

    private static class deactivateStreamingJob_argsTupleScheme extends TupleScheme<deactivateStreamingJob_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deactivateStreamingJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExecId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExecId()) {
          oprot.writeI32(struct.execId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deactivateStreamingJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.execId = iprot.readI32();
          struct.setExecIdIsSet(true);
        }
      }
    }

  }

  public static class deactivateStreamingJob_result implements org.apache.thrift.TBase<deactivateStreamingJob_result, deactivateStreamingJob_result._Fields>, java.io.Serializable, Cloneable, Comparable<deactivateStreamingJob_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deactivateStreamingJob_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deactivateStreamingJob_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deactivateStreamingJob_resultTupleSchemeFactory());
    }

    public RetInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RetInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deactivateStreamingJob_result.class, metaDataMap);
    }

    public deactivateStreamingJob_result() {
    }

    public deactivateStreamingJob_result(
            RetInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deactivateStreamingJob_result(deactivateStreamingJob_result other) {
      if (other.isSetSuccess()) {
        this.success = new RetInfo(other.success);
      }
    }

    public deactivateStreamingJob_result deepCopy() {
      return new deactivateStreamingJob_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RetInfo getSuccess() {
      return this.success;
    }

    public deactivateStreamingJob_result setSuccess(RetInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((RetInfo)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deactivateStreamingJob_result)
        return this.equals((deactivateStreamingJob_result)that);
      return false;
    }

    public boolean equals(deactivateStreamingJob_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deactivateStreamingJob_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deactivateStreamingJob_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deactivateStreamingJob_resultStandardSchemeFactory implements SchemeFactory {
      public deactivateStreamingJob_resultStandardScheme getScheme() {
        return new deactivateStreamingJob_resultStandardScheme();
      }
    }

    private static class deactivateStreamingJob_resultStandardScheme extends StandardScheme<deactivateStreamingJob_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deactivateStreamingJob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RetInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deactivateStreamingJob_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deactivateStreamingJob_resultTupleSchemeFactory implements SchemeFactory {
      public deactivateStreamingJob_resultTupleScheme getScheme() {
        return new deactivateStreamingJob_resultTupleScheme();
      }
    }

    private static class deactivateStreamingJob_resultTupleScheme extends TupleScheme<deactivateStreamingJob_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deactivateStreamingJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deactivateStreamingJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RetInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class execAdHoc_args implements org.apache.thrift.TBase<execAdHoc_args, execAdHoc_args._Fields>, java.io.Serializable, Cloneable, Comparable<execAdHoc_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("execAdHoc_args");

    private static final org.apache.thrift.protocol.TField AD_HOC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("adHocId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new execAdHoc_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new execAdHoc_argsTupleSchemeFactory());
    }

    public int adHocId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AD_HOC_ID((short)1, "adHocId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AD_HOC_ID
            return AD_HOC_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ADHOCID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AD_HOC_ID, new org.apache.thrift.meta_data.FieldMetaData("adHocId", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(execAdHoc_args.class, metaDataMap);
    }

    public execAdHoc_args() {
    }

    public execAdHoc_args(
            int adHocId)
    {
      this();
      this.adHocId = adHocId;
      setAdHocIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public execAdHoc_args(execAdHoc_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.adHocId = other.adHocId;
    }

    public execAdHoc_args deepCopy() {
      return new execAdHoc_args(this);
    }

    @Override
    public void clear() {
      setAdHocIdIsSet(false);
      this.adHocId = 0;
    }

    public int getAdHocId() {
      return this.adHocId;
    }

    public execAdHoc_args setAdHocId(int adHocId) {
      this.adHocId = adHocId;
      setAdHocIdIsSet(true);
      return this;
    }

    public void unsetAdHocId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADHOCID_ISSET_ID);
    }

    /** Returns true if field adHocId is set (has been assigned a value) and false otherwise */
    public boolean isSetAdHocId() {
      return EncodingUtils.testBit(__isset_bitfield, __ADHOCID_ISSET_ID);
    }

    public void setAdHocIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADHOCID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case AD_HOC_ID:
          if (value == null) {
            unsetAdHocId();
          } else {
            setAdHocId((Integer)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case AD_HOC_ID:
          return getAdHocId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case AD_HOC_ID:
          return isSetAdHocId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof execAdHoc_args)
        return this.equals((execAdHoc_args)that);
      return false;
    }

    public boolean equals(execAdHoc_args that) {
      if (that == null)
        return false;

      boolean this_present_adHocId = true;
      boolean that_present_adHocId = true;
      if (this_present_adHocId || that_present_adHocId) {
        if (!(this_present_adHocId && that_present_adHocId))
          return false;
        if (this.adHocId != that.adHocId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_adHocId = true;
      list.add(present_adHocId);
      if (present_adHocId)
        list.add(adHocId);

      return list.hashCode();
    }

    @Override
    public int compareTo(execAdHoc_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAdHocId()).compareTo(other.isSetAdHocId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdHocId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adHocId, other.adHocId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("execAdHoc_args(");
      boolean first = true;

      sb.append("adHocId:");
      sb.append(this.adHocId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class execAdHoc_argsStandardSchemeFactory implements SchemeFactory {
      public execAdHoc_argsStandardScheme getScheme() {
        return new execAdHoc_argsStandardScheme();
      }
    }

    private static class execAdHoc_argsStandardScheme extends StandardScheme<execAdHoc_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, execAdHoc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // AD_HOC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.adHocId = iprot.readI32();
                struct.setAdHocIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, execAdHoc_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(AD_HOC_ID_FIELD_DESC);
        oprot.writeI32(struct.adHocId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class execAdHoc_argsTupleSchemeFactory implements SchemeFactory {
      public execAdHoc_argsTupleScheme getScheme() {
        return new execAdHoc_argsTupleScheme();
      }
    }

    private static class execAdHoc_argsTupleScheme extends TupleScheme<execAdHoc_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, execAdHoc_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAdHocId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAdHocId()) {
          oprot.writeI32(struct.adHocId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, execAdHoc_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.adHocId = iprot.readI32();
          struct.setAdHocIdIsSet(true);
        }
      }
    }

  }

  public static class execAdHoc_result implements org.apache.thrift.TBase<execAdHoc_result, execAdHoc_result._Fields>, java.io.Serializable, Cloneable, Comparable<execAdHoc_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("execAdHoc_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new execAdHoc_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new execAdHoc_resultTupleSchemeFactory());
    }

    public RetInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RetInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(execAdHoc_result.class, metaDataMap);
    }

    public execAdHoc_result() {
    }

    public execAdHoc_result(
            RetInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public execAdHoc_result(execAdHoc_result other) {
      if (other.isSetSuccess()) {
        this.success = new RetInfo(other.success);
      }
    }

    public execAdHoc_result deepCopy() {
      return new execAdHoc_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RetInfo getSuccess() {
      return this.success;
    }

    public execAdHoc_result setSuccess(RetInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((RetInfo)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof execAdHoc_result)
        return this.equals((execAdHoc_result)that);
      return false;
    }

    public boolean equals(execAdHoc_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(execAdHoc_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("execAdHoc_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class execAdHoc_resultStandardSchemeFactory implements SchemeFactory {
      public execAdHoc_resultStandardScheme getScheme() {
        return new execAdHoc_resultStandardScheme();
      }
    }

    private static class execAdHoc_resultStandardScheme extends StandardScheme<execAdHoc_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, execAdHoc_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RetInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, execAdHoc_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class execAdHoc_resultTupleSchemeFactory implements SchemeFactory {
      public execAdHoc_resultTupleScheme getScheme() {
        return new execAdHoc_resultTupleScheme();
      }
    }

    private static class execAdHoc_resultTupleScheme extends TupleScheme<execAdHoc_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, execAdHoc_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, execAdHoc_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RetInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
