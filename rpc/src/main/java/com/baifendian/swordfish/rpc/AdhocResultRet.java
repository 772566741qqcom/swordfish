/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baifendian.swordfish.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 即席查询结果返回值
 */
public class AdhocResultRet implements org.apache.thrift.TBase<AdhocResultRet, AdhocResultRet._Fields>, java.io.Serializable, Cloneable, Comparable<AdhocResultRet> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AdhocResultRet");

  private static final org.apache.thrift.protocol.TField RET_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("retInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField RESULT_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("resultData", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AdhocResultRetStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AdhocResultRetTupleSchemeFactory());
  }

  /**
   * 返回状态
   */
  public RetInfo retInfo; // required
  /**
   * 即席查询结果
   */
  public AdhocResultInfo resultData; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 返回状态
     */
    RET_INFO((short)1, "retInfo"),
    /**
     * 即席查询结果
     */
    RESULT_DATA((short)2, "resultData");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RET_INFO
          return RET_INFO;
        case 2: // RESULT_DATA
          return RESULT_DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RET_INFO, new org.apache.thrift.meta_data.FieldMetaData("retInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RetInfo.class)));
    tmpMap.put(_Fields.RESULT_DATA, new org.apache.thrift.meta_data.FieldMetaData("resultData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdhocResultInfo.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AdhocResultRet.class, metaDataMap);
  }

  public AdhocResultRet() {
  }

  public AdhocResultRet(
    RetInfo retInfo,
    AdhocResultInfo resultData)
  {
    this();
    this.retInfo = retInfo;
    this.resultData = resultData;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AdhocResultRet(AdhocResultRet other) {
    if (other.isSetRetInfo()) {
      this.retInfo = new RetInfo(other.retInfo);
    }
    if (other.isSetResultData()) {
      this.resultData = new AdhocResultInfo(other.resultData);
    }
  }

  public AdhocResultRet deepCopy() {
    return new AdhocResultRet(this);
  }

  @Override
  public void clear() {
    this.retInfo = null;
    this.resultData = null;
  }

  /**
   * 返回状态
   */
  public RetInfo getRetInfo() {
    return this.retInfo;
  }

  /**
   * 返回状态
   */
  public AdhocResultRet setRetInfo(RetInfo retInfo) {
    this.retInfo = retInfo;
    return this;
  }

  public void unsetRetInfo() {
    this.retInfo = null;
  }

  /** Returns true if field retInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetRetInfo() {
    return this.retInfo != null;
  }

  public void setRetInfoIsSet(boolean value) {
    if (!value) {
      this.retInfo = null;
    }
  }

  /**
   * 即席查询结果
   */
  public AdhocResultInfo getResultData() {
    return this.resultData;
  }

  /**
   * 即席查询结果
   */
  public AdhocResultRet setResultData(AdhocResultInfo resultData) {
    this.resultData = resultData;
    return this;
  }

  public void unsetResultData() {
    this.resultData = null;
  }

  /** Returns true if field resultData is set (has been assigned a value) and false otherwise */
  public boolean isSetResultData() {
    return this.resultData != null;
  }

  public void setResultDataIsSet(boolean value) {
    if (!value) {
      this.resultData = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RET_INFO:
      if (value == null) {
        unsetRetInfo();
      } else {
        setRetInfo((RetInfo)value);
      }
      break;

    case RESULT_DATA:
      if (value == null) {
        unsetResultData();
      } else {
        setResultData((AdhocResultInfo)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RET_INFO:
      return getRetInfo();

    case RESULT_DATA:
      return getResultData();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RET_INFO:
      return isSetRetInfo();
    case RESULT_DATA:
      return isSetResultData();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AdhocResultRet)
      return this.equals((AdhocResultRet)that);
    return false;
  }

  public boolean equals(AdhocResultRet that) {
    if (that == null)
      return false;

    boolean this_present_retInfo = true && this.isSetRetInfo();
    boolean that_present_retInfo = true && that.isSetRetInfo();
    if (this_present_retInfo || that_present_retInfo) {
      if (!(this_present_retInfo && that_present_retInfo))
        return false;
      if (!this.retInfo.equals(that.retInfo))
        return false;
    }

    boolean this_present_resultData = true && this.isSetResultData();
    boolean that_present_resultData = true && that.isSetResultData();
    if (this_present_resultData || that_present_resultData) {
      if (!(this_present_resultData && that_present_resultData))
        return false;
      if (!this.resultData.equals(that.resultData))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(AdhocResultRet other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRetInfo()).compareTo(other.isSetRetInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retInfo, other.retInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResultData()).compareTo(other.isSetResultData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultData, other.resultData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AdhocResultRet(");
    boolean first = true;

    sb.append("retInfo:");
    if (this.retInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.retInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("resultData:");
    if (this.resultData == null) {
      sb.append("null");
    } else {
      sb.append(this.resultData);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (retInfo != null) {
      retInfo.validate();
    }
    if (resultData != null) {
      resultData.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AdhocResultRetStandardSchemeFactory implements SchemeFactory {
    public AdhocResultRetStandardScheme getScheme() {
      return new AdhocResultRetStandardScheme();
    }
  }

  private static class AdhocResultRetStandardScheme extends StandardScheme<AdhocResultRet> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AdhocResultRet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RET_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.retInfo = new RetInfo();
              struct.retInfo.read(iprot);
              struct.setRetInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESULT_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.resultData = new AdhocResultInfo();
              struct.resultData.read(iprot);
              struct.setResultDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AdhocResultRet struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.retInfo != null) {
        oprot.writeFieldBegin(RET_INFO_FIELD_DESC);
        struct.retInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.resultData != null) {
        oprot.writeFieldBegin(RESULT_DATA_FIELD_DESC);
        struct.resultData.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AdhocResultRetTupleSchemeFactory implements SchemeFactory {
    public AdhocResultRetTupleScheme getScheme() {
      return new AdhocResultRetTupleScheme();
    }
  }

  private static class AdhocResultRetTupleScheme extends TupleScheme<AdhocResultRet> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AdhocResultRet struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRetInfo()) {
        optionals.set(0);
      }
      if (struct.isSetResultData()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetRetInfo()) {
        struct.retInfo.write(oprot);
      }
      if (struct.isSetResultData()) {
        struct.resultData.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AdhocResultRet struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.retInfo = new RetInfo();
        struct.retInfo.read(iprot);
        struct.setRetInfoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.resultData = new AdhocResultInfo();
        struct.resultData.read(iprot);
        struct.setResultDataIsSet(true);
      }
    }
  }

}

