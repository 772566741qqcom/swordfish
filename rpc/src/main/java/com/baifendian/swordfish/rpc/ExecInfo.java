/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baifendian.swordfish.rpc;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

/**
 * 执行的一些信息
 */
public class ExecInfo implements org.apache.thrift.TBase<ExecInfo, ExecInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExecInfo");

  private static final org.apache.thrift.protocol.TField NODE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NODE_DEP_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeDep", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NOTIFY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("notifyType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField NOTIFY_MAILS_FIELD_DESC = new org.apache.thrift.protocol.TField("notifyMails", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("timeout", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField FAILURE_POLICY_FIELD_DESC = new org.apache.thrift.protocol.TField("failurePolicy", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ExecInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ExecInfoTupleSchemeFactory());
  }

  /**
   * 表示执行的节点名称, 传 空或 null 表示执行工作流
   */
  public String nodeName; // required
  /**
   * 节点依赖类型, 默认仅执行节点
   */
  public int nodeDep; // required
  /**
   * 报警类型, 默认不报警
   */
  public int notifyType; // required
  /**
   * 报警邮箱列表
   */
  public List<String> notifyMails; // required
  /**
   * 超时时间, 单位: 秒
   */
  public int timeout; // required
  /**
   * 失败策略
   */
  public int failurePolicy; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 表示执行的节点名称, 传 空或 null 表示执行工作流
     */
    NODE_NAME((short)1, "nodeName"),
    /**
     * 节点依赖类型, 默认仅执行节点
     */
    NODE_DEP((short)2, "nodeDep"),
    /**
     * 报警类型, 默认不报警
     */
    NOTIFY_TYPE((short)3, "notifyType"),
    /**
     * 报警邮箱列表
     */
    NOTIFY_MAILS((short)4, "notifyMails"),
    /**
     * 超时时间, 单位: 秒
     */
    TIMEOUT((short)5, "timeout"),
    /**
     * 失败策略
     */
    FAILURE_POLICY((short)6, "failurePolicy");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NODE_NAME
          return NODE_NAME;
        case 2: // NODE_DEP
          return NODE_DEP;
        case 3: // NOTIFY_TYPE
          return NOTIFY_TYPE;
        case 4: // NOTIFY_MAILS
          return NOTIFY_MAILS;
        case 5: // TIMEOUT
          return TIMEOUT;
        case 6: // FAILURE_POLICY
          return FAILURE_POLICY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NODEDEP_ISSET_ID = 0;
  private static final int __NOTIFYTYPE_ISSET_ID = 1;
  private static final int __TIMEOUT_ISSET_ID = 2;
  private static final int __FAILUREPOLICY_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NODE_NAME, new org.apache.thrift.meta_data.FieldMetaData("nodeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NODE_DEP, new org.apache.thrift.meta_data.FieldMetaData("nodeDep", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NOTIFY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("notifyType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NOTIFY_MAILS, new org.apache.thrift.meta_data.FieldMetaData("notifyMails", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("timeout", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FAILURE_POLICY, new org.apache.thrift.meta_data.FieldMetaData("failurePolicy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExecInfo.class, metaDataMap);
  }

  public ExecInfo() {
    this.nodeDep = 0;

    this.notifyType = 0;

    this.timeout = 1800;

    this.failurePolicy = 0;

  }

  public ExecInfo(
    String nodeName,
    int nodeDep,
    int notifyType,
    List<String> notifyMails,
    int timeout,
    int failurePolicy)
  {
    this();
    this.nodeName = nodeName;
    this.nodeDep = nodeDep;
    setNodeDepIsSet(true);
    this.notifyType = notifyType;
    setNotifyTypeIsSet(true);
    this.notifyMails = notifyMails;
    this.timeout = timeout;
    setTimeoutIsSet(true);
    this.failurePolicy = failurePolicy;
    setFailurePolicyIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExecInfo(ExecInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetNodeName()) {
      this.nodeName = other.nodeName;
    }
    this.nodeDep = other.nodeDep;
    this.notifyType = other.notifyType;
    if (other.isSetNotifyMails()) {
      List<String> __this__notifyMails = new ArrayList<String>();
      for (String other_element : other.notifyMails) {
        __this__notifyMails.add(other_element);
      }
      this.notifyMails = __this__notifyMails;
    }
    this.timeout = other.timeout;
    this.failurePolicy = other.failurePolicy;
  }

  public ExecInfo deepCopy() {
    return new ExecInfo(this);
  }

  @Override
  public void clear() {
    this.nodeName = null;
    this.nodeDep = 0;

    this.notifyType = 0;

    this.notifyMails = null;
    this.timeout = 1800;

    this.failurePolicy = 0;

  }

  /**
   * 表示执行的节点名称, 传 空或 null 表示执行工作流
   */
  public String getNodeName() {
    return this.nodeName;
  }

  /**
   * 表示执行的节点名称, 传 空或 null 表示执行工作流
   */
  public ExecInfo setNodeName(String nodeName) {
    this.nodeName = nodeName;
    return this;
  }

  public void unsetNodeName() {
    this.nodeName = null;
  }

  /** Returns true if field nodeName is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeName() {
    return this.nodeName != null;
  }

  public void setNodeNameIsSet(boolean value) {
    if (!value) {
      this.nodeName = null;
    }
  }

  /**
   * 节点依赖类型, 默认仅执行节点
   */
  public int getNodeDep() {
    return this.nodeDep;
  }

  /**
   * 节点依赖类型, 默认仅执行节点
   */
  public ExecInfo setNodeDep(int nodeDep) {
    this.nodeDep = nodeDep;
    setNodeDepIsSet(true);
    return this;
  }

  public void unsetNodeDep() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NODEDEP_ISSET_ID);
  }

  /** Returns true if field nodeDep is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeDep() {
    return EncodingUtils.testBit(__isset_bitfield, __NODEDEP_ISSET_ID);
  }

  public void setNodeDepIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NODEDEP_ISSET_ID, value);
  }

  /**
   * 报警类型, 默认不报警
   */
  public int getNotifyType() {
    return this.notifyType;
  }

  /**
   * 报警类型, 默认不报警
   */
  public ExecInfo setNotifyType(int notifyType) {
    this.notifyType = notifyType;
    setNotifyTypeIsSet(true);
    return this;
  }

  public void unsetNotifyType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTIFYTYPE_ISSET_ID);
  }

  /** Returns true if field notifyType is set (has been assigned a value) and false otherwise */
  public boolean isSetNotifyType() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTIFYTYPE_ISSET_ID);
  }

  public void setNotifyTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTIFYTYPE_ISSET_ID, value);
  }

  public int getNotifyMailsSize() {
    return (this.notifyMails == null) ? 0 : this.notifyMails.size();
  }

  public java.util.Iterator<String> getNotifyMailsIterator() {
    return (this.notifyMails == null) ? null : this.notifyMails.iterator();
  }

  public void addToNotifyMails(String elem) {
    if (this.notifyMails == null) {
      this.notifyMails = new ArrayList<String>();
    }
    this.notifyMails.add(elem);
  }

  /**
   * 报警邮箱列表
   */
  public List<String> getNotifyMails() {
    return this.notifyMails;
  }

  /**
   * 报警邮箱列表
   */
  public ExecInfo setNotifyMails(List<String> notifyMails) {
    this.notifyMails = notifyMails;
    return this;
  }

  public void unsetNotifyMails() {
    this.notifyMails = null;
  }

  /** Returns true if field notifyMails is set (has been assigned a value) and false otherwise */
  public boolean isSetNotifyMails() {
    return this.notifyMails != null;
  }

  public void setNotifyMailsIsSet(boolean value) {
    if (!value) {
      this.notifyMails = null;
    }
  }

  /**
   * 超时时间, 单位: 秒
   */
  public int getTimeout() {
    return this.timeout;
  }

  /**
   * 超时时间, 单位: 秒
   */
  public ExecInfo setTimeout(int timeout) {
    this.timeout = timeout;
    setTimeoutIsSet(true);
    return this;
  }

  public void unsetTimeout() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
  }

  /** Returns true if field timeout is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeout() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
  }

  public void setTimeoutIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMEOUT_ISSET_ID, value);
  }

  /**
   * 失败策略
   */
  public int getFailurePolicy() {
    return this.failurePolicy;
  }

  /**
   * 失败策略
   */
  public ExecInfo setFailurePolicy(int failurePolicy) {
    this.failurePolicy = failurePolicy;
    setFailurePolicyIsSet(true);
    return this;
  }

  public void unsetFailurePolicy() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FAILUREPOLICY_ISSET_ID);
  }

  /** Returns true if field failurePolicy is set (has been assigned a value) and false otherwise */
  public boolean isSetFailurePolicy() {
    return EncodingUtils.testBit(__isset_bitfield, __FAILUREPOLICY_ISSET_ID);
  }

  public void setFailurePolicyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FAILUREPOLICY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NODE_NAME:
      if (value == null) {
        unsetNodeName();
      } else {
        setNodeName((String)value);
      }
      break;

    case NODE_DEP:
      if (value == null) {
        unsetNodeDep();
      } else {
        setNodeDep((Integer)value);
      }
      break;

    case NOTIFY_TYPE:
      if (value == null) {
        unsetNotifyType();
      } else {
        setNotifyType((Integer)value);
      }
      break;

    case NOTIFY_MAILS:
      if (value == null) {
        unsetNotifyMails();
      } else {
        setNotifyMails((List<String>)value);
      }
      break;

    case TIMEOUT:
      if (value == null) {
        unsetTimeout();
      } else {
        setTimeout((Integer)value);
      }
      break;

    case FAILURE_POLICY:
      if (value == null) {
        unsetFailurePolicy();
      } else {
        setFailurePolicy((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NODE_NAME:
      return getNodeName();

    case NODE_DEP:
      return Integer.valueOf(getNodeDep());

    case NOTIFY_TYPE:
      return Integer.valueOf(getNotifyType());

    case NOTIFY_MAILS:
      return getNotifyMails();

    case TIMEOUT:
      return Integer.valueOf(getTimeout());

    case FAILURE_POLICY:
      return Integer.valueOf(getFailurePolicy());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NODE_NAME:
      return isSetNodeName();
    case NODE_DEP:
      return isSetNodeDep();
    case NOTIFY_TYPE:
      return isSetNotifyType();
    case NOTIFY_MAILS:
      return isSetNotifyMails();
    case TIMEOUT:
      return isSetTimeout();
    case FAILURE_POLICY:
      return isSetFailurePolicy();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ExecInfo)
      return this.equals((ExecInfo)that);
    return false;
  }

  public boolean equals(ExecInfo that) {
    if (that == null)
      return false;

    boolean this_present_nodeName = true && this.isSetNodeName();
    boolean that_present_nodeName = true && that.isSetNodeName();
    if (this_present_nodeName || that_present_nodeName) {
      if (!(this_present_nodeName && that_present_nodeName))
        return false;
      if (!this.nodeName.equals(that.nodeName))
        return false;
    }

    boolean this_present_nodeDep = true;
    boolean that_present_nodeDep = true;
    if (this_present_nodeDep || that_present_nodeDep) {
      if (!(this_present_nodeDep && that_present_nodeDep))
        return false;
      if (this.nodeDep != that.nodeDep)
        return false;
    }

    boolean this_present_notifyType = true;
    boolean that_present_notifyType = true;
    if (this_present_notifyType || that_present_notifyType) {
      if (!(this_present_notifyType && that_present_notifyType))
        return false;
      if (this.notifyType != that.notifyType)
        return false;
    }

    boolean this_present_notifyMails = true && this.isSetNotifyMails();
    boolean that_present_notifyMails = true && that.isSetNotifyMails();
    if (this_present_notifyMails || that_present_notifyMails) {
      if (!(this_present_notifyMails && that_present_notifyMails))
        return false;
      if (!this.notifyMails.equals(that.notifyMails))
        return false;
    }

    boolean this_present_timeout = true;
    boolean that_present_timeout = true;
    if (this_present_timeout || that_present_timeout) {
      if (!(this_present_timeout && that_present_timeout))
        return false;
      if (this.timeout != that.timeout)
        return false;
    }

    boolean this_present_failurePolicy = true;
    boolean that_present_failurePolicy = true;
    if (this_present_failurePolicy || that_present_failurePolicy) {
      if (!(this_present_failurePolicy && that_present_failurePolicy))
        return false;
      if (this.failurePolicy != that.failurePolicy)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ExecInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ExecInfo typedOther = (ExecInfo)other;

    lastComparison = Boolean.valueOf(isSetNodeName()).compareTo(typedOther.isSetNodeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeName, typedOther.nodeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNodeDep()).compareTo(typedOther.isSetNodeDep());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeDep()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeDep, typedOther.nodeDep);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotifyType()).compareTo(typedOther.isSetNotifyType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotifyType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notifyType, typedOther.notifyType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotifyMails()).compareTo(typedOther.isSetNotifyMails());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotifyMails()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notifyMails, typedOther.notifyMails);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeout()).compareTo(typedOther.isSetTimeout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeout, typedOther.timeout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFailurePolicy()).compareTo(typedOther.isSetFailurePolicy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailurePolicy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failurePolicy, typedOther.failurePolicy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ExecInfo(");
    boolean first = true;

    sb.append("nodeName:");
    if (this.nodeName == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nodeDep:");
    sb.append(this.nodeDep);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notifyType:");
    sb.append(this.notifyType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notifyMails:");
    if (this.notifyMails == null) {
      sb.append("null");
    } else {
      sb.append(this.notifyMails);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeout:");
    sb.append(this.timeout);
    first = false;
    if (!first) sb.append(", ");
    sb.append("failurePolicy:");
    sb.append(this.failurePolicy);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExecInfoStandardSchemeFactory implements SchemeFactory {
    public ExecInfoStandardScheme getScheme() {
      return new ExecInfoStandardScheme();
    }
  }

  private static class ExecInfoStandardScheme extends StandardScheme<ExecInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExecInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NODE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nodeName = iprot.readString();
              struct.setNodeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NODE_DEP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nodeDep = iprot.readI32();
              struct.setNodeDepIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NOTIFY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.notifyType = iprot.readI32();
              struct.setNotifyTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NOTIFY_MAILS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.notifyMails = new ArrayList<String>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  String _elem10; // required
                  _elem10 = iprot.readString();
                  struct.notifyMails.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setNotifyMailsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TIMEOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.timeout = iprot.readI32();
              struct.setTimeoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FAILURE_POLICY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.failurePolicy = iprot.readI32();
              struct.setFailurePolicyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExecInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.nodeName != null) {
        oprot.writeFieldBegin(NODE_NAME_FIELD_DESC);
        oprot.writeString(struct.nodeName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NODE_DEP_FIELD_DESC);
      oprot.writeI32(struct.nodeDep);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOTIFY_TYPE_FIELD_DESC);
      oprot.writeI32(struct.notifyType);
      oprot.writeFieldEnd();
      if (struct.notifyMails != null) {
        oprot.writeFieldBegin(NOTIFY_MAILS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.notifyMails.size()));
          for (String _iter11 : struct.notifyMails)
          {
            oprot.writeString(_iter11);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMEOUT_FIELD_DESC);
      oprot.writeI32(struct.timeout);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FAILURE_POLICY_FIELD_DESC);
      oprot.writeI32(struct.failurePolicy);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExecInfoTupleSchemeFactory implements SchemeFactory {
    public ExecInfoTupleScheme getScheme() {
      return new ExecInfoTupleScheme();
    }
  }

  private static class ExecInfoTupleScheme extends TupleScheme<ExecInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExecInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNodeName()) {
        optionals.set(0);
      }
      if (struct.isSetNodeDep()) {
        optionals.set(1);
      }
      if (struct.isSetNotifyType()) {
        optionals.set(2);
      }
      if (struct.isSetNotifyMails()) {
        optionals.set(3);
      }
      if (struct.isSetTimeout()) {
        optionals.set(4);
      }
      if (struct.isSetFailurePolicy()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetNodeName()) {
        oprot.writeString(struct.nodeName);
      }
      if (struct.isSetNodeDep()) {
        oprot.writeI32(struct.nodeDep);
      }
      if (struct.isSetNotifyType()) {
        oprot.writeI32(struct.notifyType);
      }
      if (struct.isSetNotifyMails()) {
        {
          oprot.writeI32(struct.notifyMails.size());
          for (String _iter12 : struct.notifyMails)
          {
            oprot.writeString(_iter12);
          }
        }
      }
      if (struct.isSetTimeout()) {
        oprot.writeI32(struct.timeout);
      }
      if (struct.isSetFailurePolicy()) {
        oprot.writeI32(struct.failurePolicy);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExecInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.nodeName = iprot.readString();
        struct.setNodeNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.nodeDep = iprot.readI32();
        struct.setNodeDepIsSet(true);
      }
      if (incoming.get(2)) {
        struct.notifyType = iprot.readI32();
        struct.setNotifyTypeIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.notifyMails = new ArrayList<String>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            String _elem15; // required
            _elem15 = iprot.readString();
            struct.notifyMails.add(_elem15);
          }
        }
        struct.setNotifyMailsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.timeout = iprot.readI32();
        struct.setTimeoutIsSet(true);
      }
      if (incoming.get(5)) {
        struct.failurePolicy = iprot.readI32();
        struct.setFailurePolicyIsSet(true);
      }
    }
  }

}

