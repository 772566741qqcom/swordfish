/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baifendian.swordfish.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-03-14")
public class MasterService {

  public interface Iface {

    /**
     * 执行某个 workflow
     * projectId : 项目 id
     * execId : 执行 id
     * flowType : workflow 类型（枚举字符串）
     * 
     * @param projectId
     * @param execId
     * @param flowType
     */
    public RetInfo execFlow(int projectId, long execId, String flowType) throws org.apache.thrift.TException;

    /**
     * 设置某个 workflow 的调度信息
     * projectId : 项目 id
     * flowId : workflow id
     * flowType : workflow 类型（枚举字符串）
     * scheduleInfo : schedule 详情
     * 
     * @param projectId
     * @param flowId
     * @param flowType
     * @param scheduleInfo
     */
    public RetInfo setSchedule(int projectId, int flowId, String flowType, ScheduleInfo scheduleInfo) throws org.apache.thrift.TException;

    /**
     * 删除某个 workflow 的调度
     * projectId : 项目 id
     * flowId : workflowId
     * flowType : workflow 类型（枚举字符串）
     * 
     * @param projectId
     * @param flowId
     * @param flowType
     */
    public RetInfo deleteSchedule(int projectId, int flowId, String flowType) throws org.apache.thrift.TException;

    /**
     * 删除某个项目的所有调度
     * projectId : 项目 id
     * 
     * @param projectId
     */
    public RetInfo deleteSchedules(int projectId) throws org.apache.thrift.TException;

    /**
     * 给一个workflow 补数据
     * projectId : 项目ID
     * flowId : 工作流ID
     * scheduleMeta: 补数据相关信息(此处不通过调度去执行)
     * 
     * @param projectId
     * @param flowId
     * @param scheduleMeta
     */
    public RetInfo appendWorkFlow(int projectId, int flowId, String scheduleMeta) throws org.apache.thrift.TException;

    /**
     * 注册execServer
     * ip :  ip地址
     * port : 端口号
     * 
     * @param ip
     * @param port
     * @param registerTime
     */
    public RetInfo registerExecutor(String ip, int port, long registerTime) throws org.apache.thrift.TException;

    /**
     * execServer汇报心跳
     * ip :  ip地址
     * port : 端口号
     * 
     * @param ip
     * @param port
     * @param heartBeatData
     */
    public RetInfo executorReport(String ip, int port, HeartBeatData heartBeatData) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void execFlow(int projectId, long execId, String flowType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setSchedule(int projectId, int flowId, String flowType, ScheduleInfo scheduleInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteSchedule(int projectId, int flowId, String flowType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteSchedules(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void appendWorkFlow(int projectId, int flowId, String scheduleMeta, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void registerExecutor(String ip, int port, long registerTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void executorReport(String ip, int port, HeartBeatData heartBeatData, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public RetInfo execFlow(int projectId, long execId, String flowType) throws org.apache.thrift.TException
    {
      send_execFlow(projectId, execId, flowType);
      return recv_execFlow();
    }

    public void send_execFlow(int projectId, long execId, String flowType) throws org.apache.thrift.TException
    {
      execFlow_args args = new execFlow_args();
      args.setProjectId(projectId);
      args.setExecId(execId);
      args.setFlowType(flowType);
      sendBase("execFlow", args);
    }

    public RetInfo recv_execFlow() throws org.apache.thrift.TException
    {
      execFlow_result result = new execFlow_result();
      receiveBase(result, "execFlow");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "execFlow failed: unknown result");
    }

    public RetInfo setSchedule(int projectId, int flowId, String flowType, ScheduleInfo scheduleInfo) throws org.apache.thrift.TException
    {
      send_setSchedule(projectId, flowId, flowType, scheduleInfo);
      return recv_setSchedule();
    }

    public void send_setSchedule(int projectId, int flowId, String flowType, ScheduleInfo scheduleInfo) throws org.apache.thrift.TException
    {
      setSchedule_args args = new setSchedule_args();
      args.setProjectId(projectId);
      args.setFlowId(flowId);
      args.setFlowType(flowType);
      args.setScheduleInfo(scheduleInfo);
      sendBase("setSchedule", args);
    }

    public RetInfo recv_setSchedule() throws org.apache.thrift.TException
    {
      setSchedule_result result = new setSchedule_result();
      receiveBase(result, "setSchedule");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setSchedule failed: unknown result");
    }

    public RetInfo deleteSchedule(int projectId, int flowId, String flowType) throws org.apache.thrift.TException
    {
      send_deleteSchedule(projectId, flowId, flowType);
      return recv_deleteSchedule();
    }

    public void send_deleteSchedule(int projectId, int flowId, String flowType) throws org.apache.thrift.TException
    {
      deleteSchedule_args args = new deleteSchedule_args();
      args.setProjectId(projectId);
      args.setFlowId(flowId);
      args.setFlowType(flowType);
      sendBase("deleteSchedule", args);
    }

    public RetInfo recv_deleteSchedule() throws org.apache.thrift.TException
    {
      deleteSchedule_result result = new deleteSchedule_result();
      receiveBase(result, "deleteSchedule");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteSchedule failed: unknown result");
    }

    public RetInfo deleteSchedules(int projectId) throws org.apache.thrift.TException
    {
      send_deleteSchedules(projectId);
      return recv_deleteSchedules();
    }

    public void send_deleteSchedules(int projectId) throws org.apache.thrift.TException
    {
      deleteSchedules_args args = new deleteSchedules_args();
      args.setProjectId(projectId);
      sendBase("deleteSchedules", args);
    }

    public RetInfo recv_deleteSchedules() throws org.apache.thrift.TException
    {
      deleteSchedules_result result = new deleteSchedules_result();
      receiveBase(result, "deleteSchedules");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteSchedules failed: unknown result");
    }

    public RetInfo appendWorkFlow(int projectId, int flowId, String scheduleMeta) throws org.apache.thrift.TException
    {
      send_appendWorkFlow(projectId, flowId, scheduleMeta);
      return recv_appendWorkFlow();
    }

    public void send_appendWorkFlow(int projectId, int flowId, String scheduleMeta) throws org.apache.thrift.TException
    {
      appendWorkFlow_args args = new appendWorkFlow_args();
      args.setProjectId(projectId);
      args.setFlowId(flowId);
      args.setScheduleMeta(scheduleMeta);
      sendBase("appendWorkFlow", args);
    }

    public RetInfo recv_appendWorkFlow() throws org.apache.thrift.TException
    {
      appendWorkFlow_result result = new appendWorkFlow_result();
      receiveBase(result, "appendWorkFlow");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "appendWorkFlow failed: unknown result");
    }

    public RetInfo registerExecutor(String ip, int port, long registerTime) throws org.apache.thrift.TException
    {
      send_registerExecutor(ip, port, registerTime);
      return recv_registerExecutor();
    }

    public void send_registerExecutor(String ip, int port, long registerTime) throws org.apache.thrift.TException
    {
      registerExecutor_args args = new registerExecutor_args();
      args.setIp(ip);
      args.setPort(port);
      args.setRegisterTime(registerTime);
      sendBase("registerExecutor", args);
    }

    public RetInfo recv_registerExecutor() throws org.apache.thrift.TException
    {
      registerExecutor_result result = new registerExecutor_result();
      receiveBase(result, "registerExecutor");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registerExecutor failed: unknown result");
    }

    public RetInfo executorReport(String ip, int port, HeartBeatData heartBeatData) throws org.apache.thrift.TException
    {
      send_executorReport(ip, port, heartBeatData);
      return recv_executorReport();
    }

    public void send_executorReport(String ip, int port, HeartBeatData heartBeatData) throws org.apache.thrift.TException
    {
      executorReport_args args = new executorReport_args();
      args.setIp(ip);
      args.setPort(port);
      args.setHeartBeatData(heartBeatData);
      sendBase("executorReport", args);
    }

    public RetInfo recv_executorReport() throws org.apache.thrift.TException
    {
      executorReport_result result = new executorReport_result();
      receiveBase(result, "executorReport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "executorReport failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void execFlow(int projectId, long execId, String flowType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      execFlow_call method_call = new execFlow_call(projectId, execId, flowType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class execFlow_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      private long execId;
      private String flowType;
      public execFlow_call(int projectId, long execId, String flowType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
        this.execId = execId;
        this.flowType = flowType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("execFlow", org.apache.thrift.protocol.TMessageType.CALL, 0));
        execFlow_args args = new execFlow_args();
        args.setProjectId(projectId);
        args.setExecId(execId);
        args.setFlowType(flowType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RetInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_execFlow();
      }
    }

    public void setSchedule(int projectId, int flowId, String flowType, ScheduleInfo scheduleInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setSchedule_call method_call = new setSchedule_call(projectId, flowId, flowType, scheduleInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setSchedule_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      private int flowId;
      private String flowType;
      private ScheduleInfo scheduleInfo;
      public setSchedule_call(int projectId, int flowId, String flowType, ScheduleInfo scheduleInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
        this.flowId = flowId;
        this.flowType = flowType;
        this.scheduleInfo = scheduleInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setSchedule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setSchedule_args args = new setSchedule_args();
        args.setProjectId(projectId);
        args.setFlowId(flowId);
        args.setFlowType(flowType);
        args.setScheduleInfo(scheduleInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RetInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setSchedule();
      }
    }

    public void deleteSchedule(int projectId, int flowId, String flowType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteSchedule_call method_call = new deleteSchedule_call(projectId, flowId, flowType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteSchedule_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      private int flowId;
      private String flowType;
      public deleteSchedule_call(int projectId, int flowId, String flowType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
        this.flowId = flowId;
        this.flowType = flowType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteSchedule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteSchedule_args args = new deleteSchedule_args();
        args.setProjectId(projectId);
        args.setFlowId(flowId);
        args.setFlowType(flowType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RetInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteSchedule();
      }
    }

    public void deleteSchedules(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteSchedules_call method_call = new deleteSchedules_call(projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteSchedules_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      public deleteSchedules_call(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteSchedules", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteSchedules_args args = new deleteSchedules_args();
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RetInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteSchedules();
      }
    }

    public void appendWorkFlow(int projectId, int flowId, String scheduleMeta, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      appendWorkFlow_call method_call = new appendWorkFlow_call(projectId, flowId, scheduleMeta, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class appendWorkFlow_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      private int flowId;
      private String scheduleMeta;
      public appendWorkFlow_call(int projectId, int flowId, String scheduleMeta, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
        this.flowId = flowId;
        this.scheduleMeta = scheduleMeta;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("appendWorkFlow", org.apache.thrift.protocol.TMessageType.CALL, 0));
        appendWorkFlow_args args = new appendWorkFlow_args();
        args.setProjectId(projectId);
        args.setFlowId(flowId);
        args.setScheduleMeta(scheduleMeta);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RetInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_appendWorkFlow();
      }
    }

    public void registerExecutor(String ip, int port, long registerTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerExecutor_call method_call = new registerExecutor_call(ip, port, registerTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerExecutor_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ip;
      private int port;
      private long registerTime;
      public registerExecutor_call(String ip, int port, long registerTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ip = ip;
        this.port = port;
        this.registerTime = registerTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerExecutor", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerExecutor_args args = new registerExecutor_args();
        args.setIp(ip);
        args.setPort(port);
        args.setRegisterTime(registerTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RetInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registerExecutor();
      }
    }

    public void executorReport(String ip, int port, HeartBeatData heartBeatData, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      executorReport_call method_call = new executorReport_call(ip, port, heartBeatData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class executorReport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ip;
      private int port;
      private HeartBeatData heartBeatData;
      public executorReport_call(String ip, int port, HeartBeatData heartBeatData, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ip = ip;
        this.port = port;
        this.heartBeatData = heartBeatData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("executorReport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        executorReport_args args = new executorReport_args();
        args.setIp(ip);
        args.setPort(port);
        args.setHeartBeatData(heartBeatData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RetInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_executorReport();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("execFlow", new execFlow());
      processMap.put("setSchedule", new setSchedule());
      processMap.put("deleteSchedule", new deleteSchedule());
      processMap.put("deleteSchedules", new deleteSchedules());
      processMap.put("appendWorkFlow", new appendWorkFlow());
      processMap.put("registerExecutor", new registerExecutor());
      processMap.put("executorReport", new executorReport());
      return processMap;
    }

    public static class execFlow<I extends Iface> extends org.apache.thrift.ProcessFunction<I, execFlow_args> {
      public execFlow() {
        super("execFlow");
      }

      public execFlow_args getEmptyArgsInstance() {
        return new execFlow_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public execFlow_result getResult(I iface, execFlow_args args) throws org.apache.thrift.TException {
        execFlow_result result = new execFlow_result();
        result.success = iface.execFlow(args.projectId, args.execId, args.flowType);
        return result;
      }
    }

    public static class setSchedule<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setSchedule_args> {
      public setSchedule() {
        super("setSchedule");
      }

      public setSchedule_args getEmptyArgsInstance() {
        return new setSchedule_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setSchedule_result getResult(I iface, setSchedule_args args) throws org.apache.thrift.TException {
        setSchedule_result result = new setSchedule_result();
        result.success = iface.setSchedule(args.projectId, args.flowId, args.flowType, args.scheduleInfo);
        return result;
      }
    }

    public static class deleteSchedule<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteSchedule_args> {
      public deleteSchedule() {
        super("deleteSchedule");
      }

      public deleteSchedule_args getEmptyArgsInstance() {
        return new deleteSchedule_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteSchedule_result getResult(I iface, deleteSchedule_args args) throws org.apache.thrift.TException {
        deleteSchedule_result result = new deleteSchedule_result();
        result.success = iface.deleteSchedule(args.projectId, args.flowId, args.flowType);
        return result;
      }
    }

    public static class deleteSchedules<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteSchedules_args> {
      public deleteSchedules() {
        super("deleteSchedules");
      }

      public deleteSchedules_args getEmptyArgsInstance() {
        return new deleteSchedules_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteSchedules_result getResult(I iface, deleteSchedules_args args) throws org.apache.thrift.TException {
        deleteSchedules_result result = new deleteSchedules_result();
        result.success = iface.deleteSchedules(args.projectId);
        return result;
      }
    }

    public static class appendWorkFlow<I extends Iface> extends org.apache.thrift.ProcessFunction<I, appendWorkFlow_args> {
      public appendWorkFlow() {
        super("appendWorkFlow");
      }

      public appendWorkFlow_args getEmptyArgsInstance() {
        return new appendWorkFlow_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public appendWorkFlow_result getResult(I iface, appendWorkFlow_args args) throws org.apache.thrift.TException {
        appendWorkFlow_result result = new appendWorkFlow_result();
        result.success = iface.appendWorkFlow(args.projectId, args.flowId, args.scheduleMeta);
        return result;
      }
    }

    public static class registerExecutor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerExecutor_args> {
      public registerExecutor() {
        super("registerExecutor");
      }

      public registerExecutor_args getEmptyArgsInstance() {
        return new registerExecutor_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public registerExecutor_result getResult(I iface, registerExecutor_args args) throws org.apache.thrift.TException {
        registerExecutor_result result = new registerExecutor_result();
        result.success = iface.registerExecutor(args.ip, args.port, args.registerTime);
        return result;
      }
    }

    public static class executorReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, executorReport_args> {
      public executorReport() {
        super("executorReport");
      }

      public executorReport_args getEmptyArgsInstance() {
        return new executorReport_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public executorReport_result getResult(I iface, executorReport_args args) throws org.apache.thrift.TException {
        executorReport_result result = new executorReport_result();
        result.success = iface.executorReport(args.ip, args.port, args.heartBeatData);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("execFlow", new execFlow());
      processMap.put("setSchedule", new setSchedule());
      processMap.put("deleteSchedule", new deleteSchedule());
      processMap.put("deleteSchedules", new deleteSchedules());
      processMap.put("appendWorkFlow", new appendWorkFlow());
      processMap.put("registerExecutor", new registerExecutor());
      processMap.put("executorReport", new executorReport());
      return processMap;
    }

    public static class execFlow<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, execFlow_args, RetInfo> {
      public execFlow() {
        super("execFlow");
      }

      public execFlow_args getEmptyArgsInstance() {
        return new execFlow_args();
      }

      public AsyncMethodCallback<RetInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RetInfo>() { 
          public void onComplete(RetInfo o) {
            execFlow_result result = new execFlow_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            execFlow_result result = new execFlow_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, execFlow_args args, org.apache.thrift.async.AsyncMethodCallback<RetInfo> resultHandler) throws TException {
        iface.execFlow(args.projectId, args.execId, args.flowType,resultHandler);
      }
    }

    public static class setSchedule<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setSchedule_args, RetInfo> {
      public setSchedule() {
        super("setSchedule");
      }

      public setSchedule_args getEmptyArgsInstance() {
        return new setSchedule_args();
      }

      public AsyncMethodCallback<RetInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RetInfo>() { 
          public void onComplete(RetInfo o) {
            setSchedule_result result = new setSchedule_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setSchedule_result result = new setSchedule_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setSchedule_args args, org.apache.thrift.async.AsyncMethodCallback<RetInfo> resultHandler) throws TException {
        iface.setSchedule(args.projectId, args.flowId, args.flowType, args.scheduleInfo,resultHandler);
      }
    }

    public static class deleteSchedule<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteSchedule_args, RetInfo> {
      public deleteSchedule() {
        super("deleteSchedule");
      }

      public deleteSchedule_args getEmptyArgsInstance() {
        return new deleteSchedule_args();
      }

      public AsyncMethodCallback<RetInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RetInfo>() { 
          public void onComplete(RetInfo o) {
            deleteSchedule_result result = new deleteSchedule_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteSchedule_result result = new deleteSchedule_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteSchedule_args args, org.apache.thrift.async.AsyncMethodCallback<RetInfo> resultHandler) throws TException {
        iface.deleteSchedule(args.projectId, args.flowId, args.flowType,resultHandler);
      }
    }

    public static class deleteSchedules<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteSchedules_args, RetInfo> {
      public deleteSchedules() {
        super("deleteSchedules");
      }

      public deleteSchedules_args getEmptyArgsInstance() {
        return new deleteSchedules_args();
      }

      public AsyncMethodCallback<RetInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RetInfo>() { 
          public void onComplete(RetInfo o) {
            deleteSchedules_result result = new deleteSchedules_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteSchedules_result result = new deleteSchedules_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteSchedules_args args, org.apache.thrift.async.AsyncMethodCallback<RetInfo> resultHandler) throws TException {
        iface.deleteSchedules(args.projectId,resultHandler);
      }
    }

    public static class appendWorkFlow<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, appendWorkFlow_args, RetInfo> {
      public appendWorkFlow() {
        super("appendWorkFlow");
      }

      public appendWorkFlow_args getEmptyArgsInstance() {
        return new appendWorkFlow_args();
      }

      public AsyncMethodCallback<RetInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RetInfo>() { 
          public void onComplete(RetInfo o) {
            appendWorkFlow_result result = new appendWorkFlow_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            appendWorkFlow_result result = new appendWorkFlow_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, appendWorkFlow_args args, org.apache.thrift.async.AsyncMethodCallback<RetInfo> resultHandler) throws TException {
        iface.appendWorkFlow(args.projectId, args.flowId, args.scheduleMeta,resultHandler);
      }
    }

    public static class registerExecutor<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerExecutor_args, RetInfo> {
      public registerExecutor() {
        super("registerExecutor");
      }

      public registerExecutor_args getEmptyArgsInstance() {
        return new registerExecutor_args();
      }

      public AsyncMethodCallback<RetInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RetInfo>() { 
          public void onComplete(RetInfo o) {
            registerExecutor_result result = new registerExecutor_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            registerExecutor_result result = new registerExecutor_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registerExecutor_args args, org.apache.thrift.async.AsyncMethodCallback<RetInfo> resultHandler) throws TException {
        iface.registerExecutor(args.ip, args.port, args.registerTime,resultHandler);
      }
    }

    public static class executorReport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, executorReport_args, RetInfo> {
      public executorReport() {
        super("executorReport");
      }

      public executorReport_args getEmptyArgsInstance() {
        return new executorReport_args();
      }

      public AsyncMethodCallback<RetInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RetInfo>() { 
          public void onComplete(RetInfo o) {
            executorReport_result result = new executorReport_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            executorReport_result result = new executorReport_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, executorReport_args args, org.apache.thrift.async.AsyncMethodCallback<RetInfo> resultHandler) throws TException {
        iface.executorReport(args.ip, args.port, args.heartBeatData,resultHandler);
      }
    }

  }

  public static class execFlow_args implements org.apache.thrift.TBase<execFlow_args, execFlow_args._Fields>, java.io.Serializable, Cloneable, Comparable<execFlow_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("execFlow_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField EXEC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("execId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField FLOW_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("flowType", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new execFlow_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new execFlow_argsTupleSchemeFactory());
    }

    public int projectId; // required
    public long execId; // required
    public String flowType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId"),
      EXEC_ID((short)2, "execId"),
      FLOW_TYPE((short)3, "flowType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          case 2: // EXEC_ID
            return EXEC_ID;
          case 3: // FLOW_TYPE
            return FLOW_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private static final int __EXECID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EXEC_ID, new org.apache.thrift.meta_data.FieldMetaData("execId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.FLOW_TYPE, new org.apache.thrift.meta_data.FieldMetaData("flowType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(execFlow_args.class, metaDataMap);
    }

    public execFlow_args() {
    }

    public execFlow_args(
      int projectId,
      long execId,
      String flowType)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
      this.execId = execId;
      setExecIdIsSet(true);
      this.flowType = flowType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public execFlow_args(execFlow_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
      this.execId = other.execId;
      if (other.isSetFlowType()) {
        this.flowType = other.flowType;
      }
    }

    public execFlow_args deepCopy() {
      return new execFlow_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
      setExecIdIsSet(false);
      this.execId = 0;
      this.flowType = null;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public execFlow_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public long getExecId() {
      return this.execId;
    }

    public execFlow_args setExecId(long execId) {
      this.execId = execId;
      setExecIdIsSet(true);
      return this;
    }

    public void unsetExecId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXECID_ISSET_ID);
    }

    /** Returns true if field execId is set (has been assigned a value) and false otherwise */
    public boolean isSetExecId() {
      return EncodingUtils.testBit(__isset_bitfield, __EXECID_ISSET_ID);
    }

    public void setExecIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXECID_ISSET_ID, value);
    }

    public String getFlowType() {
      return this.flowType;
    }

    public execFlow_args setFlowType(String flowType) {
      this.flowType = flowType;
      return this;
    }

    public void unsetFlowType() {
      this.flowType = null;
    }

    /** Returns true if field flowType is set (has been assigned a value) and false otherwise */
    public boolean isSetFlowType() {
      return this.flowType != null;
    }

    public void setFlowTypeIsSet(boolean value) {
      if (!value) {
        this.flowType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      case EXEC_ID:
        if (value == null) {
          unsetExecId();
        } else {
          setExecId((Long)value);
        }
        break;

      case FLOW_TYPE:
        if (value == null) {
          unsetFlowType();
        } else {
          setFlowType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return getProjectId();

      case EXEC_ID:
        return getExecId();

      case FLOW_TYPE:
        return getFlowType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      case EXEC_ID:
        return isSetExecId();
      case FLOW_TYPE:
        return isSetFlowType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof execFlow_args)
        return this.equals((execFlow_args)that);
      return false;
    }

    public boolean equals(execFlow_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      boolean this_present_execId = true;
      boolean that_present_execId = true;
      if (this_present_execId || that_present_execId) {
        if (!(this_present_execId && that_present_execId))
          return false;
        if (this.execId != that.execId)
          return false;
      }

      boolean this_present_flowType = true && this.isSetFlowType();
      boolean that_present_flowType = true && that.isSetFlowType();
      if (this_present_flowType || that_present_flowType) {
        if (!(this_present_flowType && that_present_flowType))
          return false;
        if (!this.flowType.equals(that.flowType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      boolean present_execId = true;
      list.add(present_execId);
      if (present_execId)
        list.add(execId);

      boolean present_flowType = true && (isSetFlowType());
      list.add(present_flowType);
      if (present_flowType)
        list.add(flowType);

      return list.hashCode();
    }

    @Override
    public int compareTo(execFlow_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExecId()).compareTo(other.isSetExecId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExecId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execId, other.execId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFlowType()).compareTo(other.isSetFlowType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlowType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flowType, other.flowType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("execFlow_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("execId:");
      sb.append(this.execId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("flowType:");
      if (this.flowType == null) {
        sb.append("null");
      } else {
        sb.append(this.flowType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class execFlow_argsStandardSchemeFactory implements SchemeFactory {
      public execFlow_argsStandardScheme getScheme() {
        return new execFlow_argsStandardScheme();
      }
    }

    private static class execFlow_argsStandardScheme extends StandardScheme<execFlow_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, execFlow_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXEC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.execId = iprot.readI64();
                struct.setExecIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FLOW_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.flowType = iprot.readString();
                struct.setFlowTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, execFlow_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(EXEC_ID_FIELD_DESC);
        oprot.writeI64(struct.execId);
        oprot.writeFieldEnd();
        if (struct.flowType != null) {
          oprot.writeFieldBegin(FLOW_TYPE_FIELD_DESC);
          oprot.writeString(struct.flowType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class execFlow_argsTupleSchemeFactory implements SchemeFactory {
      public execFlow_argsTupleScheme getScheme() {
        return new execFlow_argsTupleScheme();
      }
    }

    private static class execFlow_argsTupleScheme extends TupleScheme<execFlow_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, execFlow_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        if (struct.isSetExecId()) {
          optionals.set(1);
        }
        if (struct.isSetFlowType()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
        if (struct.isSetExecId()) {
          oprot.writeI64(struct.execId);
        }
        if (struct.isSetFlowType()) {
          oprot.writeString(struct.flowType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, execFlow_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.execId = iprot.readI64();
          struct.setExecIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.flowType = iprot.readString();
          struct.setFlowTypeIsSet(true);
        }
      }
    }

  }

  public static class execFlow_result implements org.apache.thrift.TBase<execFlow_result, execFlow_result._Fields>, java.io.Serializable, Cloneable, Comparable<execFlow_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("execFlow_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new execFlow_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new execFlow_resultTupleSchemeFactory());
    }

    public RetInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RetInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(execFlow_result.class, metaDataMap);
    }

    public execFlow_result() {
    }

    public execFlow_result(
      RetInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public execFlow_result(execFlow_result other) {
      if (other.isSetSuccess()) {
        this.success = new RetInfo(other.success);
      }
    }

    public execFlow_result deepCopy() {
      return new execFlow_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RetInfo getSuccess() {
      return this.success;
    }

    public execFlow_result setSuccess(RetInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RetInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof execFlow_result)
        return this.equals((execFlow_result)that);
      return false;
    }

    public boolean equals(execFlow_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(execFlow_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("execFlow_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class execFlow_resultStandardSchemeFactory implements SchemeFactory {
      public execFlow_resultStandardScheme getScheme() {
        return new execFlow_resultStandardScheme();
      }
    }

    private static class execFlow_resultStandardScheme extends StandardScheme<execFlow_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, execFlow_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RetInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, execFlow_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class execFlow_resultTupleSchemeFactory implements SchemeFactory {
      public execFlow_resultTupleScheme getScheme() {
        return new execFlow_resultTupleScheme();
      }
    }

    private static class execFlow_resultTupleScheme extends TupleScheme<execFlow_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, execFlow_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, execFlow_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RetInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setSchedule_args implements org.apache.thrift.TBase<setSchedule_args, setSchedule_args._Fields>, java.io.Serializable, Cloneable, Comparable<setSchedule_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setSchedule_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField FLOW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("flowId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField FLOW_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("flowType", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SCHEDULE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("scheduleInfo", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setSchedule_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setSchedule_argsTupleSchemeFactory());
    }

    public int projectId; // required
    public int flowId; // required
    public String flowType; // required
    public ScheduleInfo scheduleInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId"),
      FLOW_ID((short)2, "flowId"),
      FLOW_TYPE((short)3, "flowType"),
      SCHEDULE_INFO((short)4, "scheduleInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          case 2: // FLOW_ID
            return FLOW_ID;
          case 3: // FLOW_TYPE
            return FLOW_TYPE;
          case 4: // SCHEDULE_INFO
            return SCHEDULE_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private static final int __FLOWID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FLOW_ID, new org.apache.thrift.meta_data.FieldMetaData("flowId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FLOW_TYPE, new org.apache.thrift.meta_data.FieldMetaData("flowType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SCHEDULE_INFO, new org.apache.thrift.meta_data.FieldMetaData("scheduleInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ScheduleInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setSchedule_args.class, metaDataMap);
    }

    public setSchedule_args() {
    }

    public setSchedule_args(
      int projectId,
      int flowId,
      String flowType,
      ScheduleInfo scheduleInfo)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
      this.flowId = flowId;
      setFlowIdIsSet(true);
      this.flowType = flowType;
      this.scheduleInfo = scheduleInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setSchedule_args(setSchedule_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
      this.flowId = other.flowId;
      if (other.isSetFlowType()) {
        this.flowType = other.flowType;
      }
      if (other.isSetScheduleInfo()) {
        this.scheduleInfo = new ScheduleInfo(other.scheduleInfo);
      }
    }

    public setSchedule_args deepCopy() {
      return new setSchedule_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
      setFlowIdIsSet(false);
      this.flowId = 0;
      this.flowType = null;
      this.scheduleInfo = null;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public setSchedule_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public int getFlowId() {
      return this.flowId;
    }

    public setSchedule_args setFlowId(int flowId) {
      this.flowId = flowId;
      setFlowIdIsSet(true);
      return this;
    }

    public void unsetFlowId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLOWID_ISSET_ID);
    }

    /** Returns true if field flowId is set (has been assigned a value) and false otherwise */
    public boolean isSetFlowId() {
      return EncodingUtils.testBit(__isset_bitfield, __FLOWID_ISSET_ID);
    }

    public void setFlowIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLOWID_ISSET_ID, value);
    }

    public String getFlowType() {
      return this.flowType;
    }

    public setSchedule_args setFlowType(String flowType) {
      this.flowType = flowType;
      return this;
    }

    public void unsetFlowType() {
      this.flowType = null;
    }

    /** Returns true if field flowType is set (has been assigned a value) and false otherwise */
    public boolean isSetFlowType() {
      return this.flowType != null;
    }

    public void setFlowTypeIsSet(boolean value) {
      if (!value) {
        this.flowType = null;
      }
    }

    public ScheduleInfo getScheduleInfo() {
      return this.scheduleInfo;
    }

    public setSchedule_args setScheduleInfo(ScheduleInfo scheduleInfo) {
      this.scheduleInfo = scheduleInfo;
      return this;
    }

    public void unsetScheduleInfo() {
      this.scheduleInfo = null;
    }

    /** Returns true if field scheduleInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetScheduleInfo() {
      return this.scheduleInfo != null;
    }

    public void setScheduleInfoIsSet(boolean value) {
      if (!value) {
        this.scheduleInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      case FLOW_ID:
        if (value == null) {
          unsetFlowId();
        } else {
          setFlowId((Integer)value);
        }
        break;

      case FLOW_TYPE:
        if (value == null) {
          unsetFlowType();
        } else {
          setFlowType((String)value);
        }
        break;

      case SCHEDULE_INFO:
        if (value == null) {
          unsetScheduleInfo();
        } else {
          setScheduleInfo((ScheduleInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return getProjectId();

      case FLOW_ID:
        return getFlowId();

      case FLOW_TYPE:
        return getFlowType();

      case SCHEDULE_INFO:
        return getScheduleInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      case FLOW_ID:
        return isSetFlowId();
      case FLOW_TYPE:
        return isSetFlowType();
      case SCHEDULE_INFO:
        return isSetScheduleInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setSchedule_args)
        return this.equals((setSchedule_args)that);
      return false;
    }

    public boolean equals(setSchedule_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      boolean this_present_flowId = true;
      boolean that_present_flowId = true;
      if (this_present_flowId || that_present_flowId) {
        if (!(this_present_flowId && that_present_flowId))
          return false;
        if (this.flowId != that.flowId)
          return false;
      }

      boolean this_present_flowType = true && this.isSetFlowType();
      boolean that_present_flowType = true && that.isSetFlowType();
      if (this_present_flowType || that_present_flowType) {
        if (!(this_present_flowType && that_present_flowType))
          return false;
        if (!this.flowType.equals(that.flowType))
          return false;
      }

      boolean this_present_scheduleInfo = true && this.isSetScheduleInfo();
      boolean that_present_scheduleInfo = true && that.isSetScheduleInfo();
      if (this_present_scheduleInfo || that_present_scheduleInfo) {
        if (!(this_present_scheduleInfo && that_present_scheduleInfo))
          return false;
        if (!this.scheduleInfo.equals(that.scheduleInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      boolean present_flowId = true;
      list.add(present_flowId);
      if (present_flowId)
        list.add(flowId);

      boolean present_flowType = true && (isSetFlowType());
      list.add(present_flowType);
      if (present_flowType)
        list.add(flowType);

      boolean present_scheduleInfo = true && (isSetScheduleInfo());
      list.add(present_scheduleInfo);
      if (present_scheduleInfo)
        list.add(scheduleInfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(setSchedule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFlowId()).compareTo(other.isSetFlowId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlowId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flowId, other.flowId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFlowType()).compareTo(other.isSetFlowType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlowType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flowType, other.flowType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetScheduleInfo()).compareTo(other.isSetScheduleInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScheduleInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scheduleInfo, other.scheduleInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setSchedule_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("flowId:");
      sb.append(this.flowId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("flowType:");
      if (this.flowType == null) {
        sb.append("null");
      } else {
        sb.append(this.flowType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("scheduleInfo:");
      if (this.scheduleInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.scheduleInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (scheduleInfo != null) {
        scheduleInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setSchedule_argsStandardSchemeFactory implements SchemeFactory {
      public setSchedule_argsStandardScheme getScheme() {
        return new setSchedule_argsStandardScheme();
      }
    }

    private static class setSchedule_argsStandardScheme extends StandardScheme<setSchedule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setSchedule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FLOW_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.flowId = iprot.readI32();
                struct.setFlowIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FLOW_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.flowType = iprot.readString();
                struct.setFlowTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SCHEDULE_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.scheduleInfo = new ScheduleInfo();
                struct.scheduleInfo.read(iprot);
                struct.setScheduleInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setSchedule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FLOW_ID_FIELD_DESC);
        oprot.writeI32(struct.flowId);
        oprot.writeFieldEnd();
        if (struct.flowType != null) {
          oprot.writeFieldBegin(FLOW_TYPE_FIELD_DESC);
          oprot.writeString(struct.flowType);
          oprot.writeFieldEnd();
        }
        if (struct.scheduleInfo != null) {
          oprot.writeFieldBegin(SCHEDULE_INFO_FIELD_DESC);
          struct.scheduleInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setSchedule_argsTupleSchemeFactory implements SchemeFactory {
      public setSchedule_argsTupleScheme getScheme() {
        return new setSchedule_argsTupleScheme();
      }
    }

    private static class setSchedule_argsTupleScheme extends TupleScheme<setSchedule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setSchedule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        if (struct.isSetFlowId()) {
          optionals.set(1);
        }
        if (struct.isSetFlowType()) {
          optionals.set(2);
        }
        if (struct.isSetScheduleInfo()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
        if (struct.isSetFlowId()) {
          oprot.writeI32(struct.flowId);
        }
        if (struct.isSetFlowType()) {
          oprot.writeString(struct.flowType);
        }
        if (struct.isSetScheduleInfo()) {
          struct.scheduleInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setSchedule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.flowId = iprot.readI32();
          struct.setFlowIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.flowType = iprot.readString();
          struct.setFlowTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.scheduleInfo = new ScheduleInfo();
          struct.scheduleInfo.read(iprot);
          struct.setScheduleInfoIsSet(true);
        }
      }
    }

  }

  public static class setSchedule_result implements org.apache.thrift.TBase<setSchedule_result, setSchedule_result._Fields>, java.io.Serializable, Cloneable, Comparable<setSchedule_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setSchedule_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setSchedule_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setSchedule_resultTupleSchemeFactory());
    }

    public RetInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RetInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setSchedule_result.class, metaDataMap);
    }

    public setSchedule_result() {
    }

    public setSchedule_result(
      RetInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setSchedule_result(setSchedule_result other) {
      if (other.isSetSuccess()) {
        this.success = new RetInfo(other.success);
      }
    }

    public setSchedule_result deepCopy() {
      return new setSchedule_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RetInfo getSuccess() {
      return this.success;
    }

    public setSchedule_result setSuccess(RetInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RetInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setSchedule_result)
        return this.equals((setSchedule_result)that);
      return false;
    }

    public boolean equals(setSchedule_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(setSchedule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setSchedule_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setSchedule_resultStandardSchemeFactory implements SchemeFactory {
      public setSchedule_resultStandardScheme getScheme() {
        return new setSchedule_resultStandardScheme();
      }
    }

    private static class setSchedule_resultStandardScheme extends StandardScheme<setSchedule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setSchedule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RetInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setSchedule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setSchedule_resultTupleSchemeFactory implements SchemeFactory {
      public setSchedule_resultTupleScheme getScheme() {
        return new setSchedule_resultTupleScheme();
      }
    }

    private static class setSchedule_resultTupleScheme extends TupleScheme<setSchedule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setSchedule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setSchedule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RetInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteSchedule_args implements org.apache.thrift.TBase<deleteSchedule_args, deleteSchedule_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSchedule_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSchedule_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField FLOW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("flowId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField FLOW_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("flowType", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteSchedule_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteSchedule_argsTupleSchemeFactory());
    }

    public int projectId; // required
    public int flowId; // required
    public String flowType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId"),
      FLOW_ID((short)2, "flowId"),
      FLOW_TYPE((short)3, "flowType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          case 2: // FLOW_ID
            return FLOW_ID;
          case 3: // FLOW_TYPE
            return FLOW_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private static final int __FLOWID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FLOW_ID, new org.apache.thrift.meta_data.FieldMetaData("flowId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FLOW_TYPE, new org.apache.thrift.meta_data.FieldMetaData("flowType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSchedule_args.class, metaDataMap);
    }

    public deleteSchedule_args() {
    }

    public deleteSchedule_args(
      int projectId,
      int flowId,
      String flowType)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
      this.flowId = flowId;
      setFlowIdIsSet(true);
      this.flowType = flowType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSchedule_args(deleteSchedule_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
      this.flowId = other.flowId;
      if (other.isSetFlowType()) {
        this.flowType = other.flowType;
      }
    }

    public deleteSchedule_args deepCopy() {
      return new deleteSchedule_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
      setFlowIdIsSet(false);
      this.flowId = 0;
      this.flowType = null;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public deleteSchedule_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public int getFlowId() {
      return this.flowId;
    }

    public deleteSchedule_args setFlowId(int flowId) {
      this.flowId = flowId;
      setFlowIdIsSet(true);
      return this;
    }

    public void unsetFlowId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLOWID_ISSET_ID);
    }

    /** Returns true if field flowId is set (has been assigned a value) and false otherwise */
    public boolean isSetFlowId() {
      return EncodingUtils.testBit(__isset_bitfield, __FLOWID_ISSET_ID);
    }

    public void setFlowIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLOWID_ISSET_ID, value);
    }

    public String getFlowType() {
      return this.flowType;
    }

    public deleteSchedule_args setFlowType(String flowType) {
      this.flowType = flowType;
      return this;
    }

    public void unsetFlowType() {
      this.flowType = null;
    }

    /** Returns true if field flowType is set (has been assigned a value) and false otherwise */
    public boolean isSetFlowType() {
      return this.flowType != null;
    }

    public void setFlowTypeIsSet(boolean value) {
      if (!value) {
        this.flowType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      case FLOW_ID:
        if (value == null) {
          unsetFlowId();
        } else {
          setFlowId((Integer)value);
        }
        break;

      case FLOW_TYPE:
        if (value == null) {
          unsetFlowType();
        } else {
          setFlowType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return getProjectId();

      case FLOW_ID:
        return getFlowId();

      case FLOW_TYPE:
        return getFlowType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      case FLOW_ID:
        return isSetFlowId();
      case FLOW_TYPE:
        return isSetFlowType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSchedule_args)
        return this.equals((deleteSchedule_args)that);
      return false;
    }

    public boolean equals(deleteSchedule_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      boolean this_present_flowId = true;
      boolean that_present_flowId = true;
      if (this_present_flowId || that_present_flowId) {
        if (!(this_present_flowId && that_present_flowId))
          return false;
        if (this.flowId != that.flowId)
          return false;
      }

      boolean this_present_flowType = true && this.isSetFlowType();
      boolean that_present_flowType = true && that.isSetFlowType();
      if (this_present_flowType || that_present_flowType) {
        if (!(this_present_flowType && that_present_flowType))
          return false;
        if (!this.flowType.equals(that.flowType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      boolean present_flowId = true;
      list.add(present_flowId);
      if (present_flowId)
        list.add(flowId);

      boolean present_flowType = true && (isSetFlowType());
      list.add(present_flowType);
      if (present_flowType)
        list.add(flowType);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteSchedule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFlowId()).compareTo(other.isSetFlowId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlowId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flowId, other.flowId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFlowType()).compareTo(other.isSetFlowType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlowType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flowType, other.flowType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSchedule_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("flowId:");
      sb.append(this.flowId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("flowType:");
      if (this.flowType == null) {
        sb.append("null");
      } else {
        sb.append(this.flowType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSchedule_argsStandardSchemeFactory implements SchemeFactory {
      public deleteSchedule_argsStandardScheme getScheme() {
        return new deleteSchedule_argsStandardScheme();
      }
    }

    private static class deleteSchedule_argsStandardScheme extends StandardScheme<deleteSchedule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSchedule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FLOW_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.flowId = iprot.readI32();
                struct.setFlowIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FLOW_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.flowType = iprot.readString();
                struct.setFlowTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSchedule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FLOW_ID_FIELD_DESC);
        oprot.writeI32(struct.flowId);
        oprot.writeFieldEnd();
        if (struct.flowType != null) {
          oprot.writeFieldBegin(FLOW_TYPE_FIELD_DESC);
          oprot.writeString(struct.flowType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSchedule_argsTupleSchemeFactory implements SchemeFactory {
      public deleteSchedule_argsTupleScheme getScheme() {
        return new deleteSchedule_argsTupleScheme();
      }
    }

    private static class deleteSchedule_argsTupleScheme extends TupleScheme<deleteSchedule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSchedule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        if (struct.isSetFlowId()) {
          optionals.set(1);
        }
        if (struct.isSetFlowType()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
        if (struct.isSetFlowId()) {
          oprot.writeI32(struct.flowId);
        }
        if (struct.isSetFlowType()) {
          oprot.writeString(struct.flowType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSchedule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.flowId = iprot.readI32();
          struct.setFlowIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.flowType = iprot.readString();
          struct.setFlowTypeIsSet(true);
        }
      }
    }

  }

  public static class deleteSchedule_result implements org.apache.thrift.TBase<deleteSchedule_result, deleteSchedule_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSchedule_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSchedule_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteSchedule_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteSchedule_resultTupleSchemeFactory());
    }

    public RetInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RetInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSchedule_result.class, metaDataMap);
    }

    public deleteSchedule_result() {
    }

    public deleteSchedule_result(
      RetInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSchedule_result(deleteSchedule_result other) {
      if (other.isSetSuccess()) {
        this.success = new RetInfo(other.success);
      }
    }

    public deleteSchedule_result deepCopy() {
      return new deleteSchedule_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RetInfo getSuccess() {
      return this.success;
    }

    public deleteSchedule_result setSuccess(RetInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RetInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSchedule_result)
        return this.equals((deleteSchedule_result)that);
      return false;
    }

    public boolean equals(deleteSchedule_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteSchedule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSchedule_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSchedule_resultStandardSchemeFactory implements SchemeFactory {
      public deleteSchedule_resultStandardScheme getScheme() {
        return new deleteSchedule_resultStandardScheme();
      }
    }

    private static class deleteSchedule_resultStandardScheme extends StandardScheme<deleteSchedule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSchedule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RetInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSchedule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSchedule_resultTupleSchemeFactory implements SchemeFactory {
      public deleteSchedule_resultTupleScheme getScheme() {
        return new deleteSchedule_resultTupleScheme();
      }
    }

    private static class deleteSchedule_resultTupleScheme extends TupleScheme<deleteSchedule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSchedule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSchedule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RetInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteSchedules_args implements org.apache.thrift.TBase<deleteSchedules_args, deleteSchedules_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSchedules_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSchedules_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteSchedules_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteSchedules_argsTupleSchemeFactory());
    }

    public int projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSchedules_args.class, metaDataMap);
    }

    public deleteSchedules_args() {
    }

    public deleteSchedules_args(
      int projectId)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSchedules_args(deleteSchedules_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
    }

    public deleteSchedules_args deepCopy() {
      return new deleteSchedules_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public deleteSchedules_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return getProjectId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSchedules_args)
        return this.equals((deleteSchedules_args)that);
      return false;
    }

    public boolean equals(deleteSchedules_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteSchedules_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSchedules_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSchedules_argsStandardSchemeFactory implements SchemeFactory {
      public deleteSchedules_argsStandardScheme getScheme() {
        return new deleteSchedules_argsStandardScheme();
      }
    }

    private static class deleteSchedules_argsStandardScheme extends StandardScheme<deleteSchedules_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSchedules_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSchedules_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSchedules_argsTupleSchemeFactory implements SchemeFactory {
      public deleteSchedules_argsTupleScheme getScheme() {
        return new deleteSchedules_argsTupleScheme();
      }
    }

    private static class deleteSchedules_argsTupleScheme extends TupleScheme<deleteSchedules_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSchedules_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSchedules_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
      }
    }

  }

  public static class deleteSchedules_result implements org.apache.thrift.TBase<deleteSchedules_result, deleteSchedules_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSchedules_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSchedules_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteSchedules_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteSchedules_resultTupleSchemeFactory());
    }

    public RetInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RetInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSchedules_result.class, metaDataMap);
    }

    public deleteSchedules_result() {
    }

    public deleteSchedules_result(
      RetInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSchedules_result(deleteSchedules_result other) {
      if (other.isSetSuccess()) {
        this.success = new RetInfo(other.success);
      }
    }

    public deleteSchedules_result deepCopy() {
      return new deleteSchedules_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RetInfo getSuccess() {
      return this.success;
    }

    public deleteSchedules_result setSuccess(RetInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RetInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSchedules_result)
        return this.equals((deleteSchedules_result)that);
      return false;
    }

    public boolean equals(deleteSchedules_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteSchedules_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSchedules_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSchedules_resultStandardSchemeFactory implements SchemeFactory {
      public deleteSchedules_resultStandardScheme getScheme() {
        return new deleteSchedules_resultStandardScheme();
      }
    }

    private static class deleteSchedules_resultStandardScheme extends StandardScheme<deleteSchedules_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSchedules_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RetInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSchedules_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSchedules_resultTupleSchemeFactory implements SchemeFactory {
      public deleteSchedules_resultTupleScheme getScheme() {
        return new deleteSchedules_resultTupleScheme();
      }
    }

    private static class deleteSchedules_resultTupleScheme extends TupleScheme<deleteSchedules_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSchedules_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSchedules_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RetInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class appendWorkFlow_args implements org.apache.thrift.TBase<appendWorkFlow_args, appendWorkFlow_args._Fields>, java.io.Serializable, Cloneable, Comparable<appendWorkFlow_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("appendWorkFlow_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField FLOW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("flowId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SCHEDULE_META_FIELD_DESC = new org.apache.thrift.protocol.TField("scheduleMeta", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new appendWorkFlow_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new appendWorkFlow_argsTupleSchemeFactory());
    }

    public int projectId; // required
    public int flowId; // required
    public String scheduleMeta; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId"),
      FLOW_ID((short)2, "flowId"),
      SCHEDULE_META((short)3, "scheduleMeta");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          case 2: // FLOW_ID
            return FLOW_ID;
          case 3: // SCHEDULE_META
            return SCHEDULE_META;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private static final int __FLOWID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FLOW_ID, new org.apache.thrift.meta_data.FieldMetaData("flowId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SCHEDULE_META, new org.apache.thrift.meta_data.FieldMetaData("scheduleMeta", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(appendWorkFlow_args.class, metaDataMap);
    }

    public appendWorkFlow_args() {
    }

    public appendWorkFlow_args(
      int projectId,
      int flowId,
      String scheduleMeta)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
      this.flowId = flowId;
      setFlowIdIsSet(true);
      this.scheduleMeta = scheduleMeta;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public appendWorkFlow_args(appendWorkFlow_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
      this.flowId = other.flowId;
      if (other.isSetScheduleMeta()) {
        this.scheduleMeta = other.scheduleMeta;
      }
    }

    public appendWorkFlow_args deepCopy() {
      return new appendWorkFlow_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
      setFlowIdIsSet(false);
      this.flowId = 0;
      this.scheduleMeta = null;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public appendWorkFlow_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public int getFlowId() {
      return this.flowId;
    }

    public appendWorkFlow_args setFlowId(int flowId) {
      this.flowId = flowId;
      setFlowIdIsSet(true);
      return this;
    }

    public void unsetFlowId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLOWID_ISSET_ID);
    }

    /** Returns true if field flowId is set (has been assigned a value) and false otherwise */
    public boolean isSetFlowId() {
      return EncodingUtils.testBit(__isset_bitfield, __FLOWID_ISSET_ID);
    }

    public void setFlowIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLOWID_ISSET_ID, value);
    }

    public String getScheduleMeta() {
      return this.scheduleMeta;
    }

    public appendWorkFlow_args setScheduleMeta(String scheduleMeta) {
      this.scheduleMeta = scheduleMeta;
      return this;
    }

    public void unsetScheduleMeta() {
      this.scheduleMeta = null;
    }

    /** Returns true if field scheduleMeta is set (has been assigned a value) and false otherwise */
    public boolean isSetScheduleMeta() {
      return this.scheduleMeta != null;
    }

    public void setScheduleMetaIsSet(boolean value) {
      if (!value) {
        this.scheduleMeta = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      case FLOW_ID:
        if (value == null) {
          unsetFlowId();
        } else {
          setFlowId((Integer)value);
        }
        break;

      case SCHEDULE_META:
        if (value == null) {
          unsetScheduleMeta();
        } else {
          setScheduleMeta((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return getProjectId();

      case FLOW_ID:
        return getFlowId();

      case SCHEDULE_META:
        return getScheduleMeta();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      case FLOW_ID:
        return isSetFlowId();
      case SCHEDULE_META:
        return isSetScheduleMeta();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof appendWorkFlow_args)
        return this.equals((appendWorkFlow_args)that);
      return false;
    }

    public boolean equals(appendWorkFlow_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      boolean this_present_flowId = true;
      boolean that_present_flowId = true;
      if (this_present_flowId || that_present_flowId) {
        if (!(this_present_flowId && that_present_flowId))
          return false;
        if (this.flowId != that.flowId)
          return false;
      }

      boolean this_present_scheduleMeta = true && this.isSetScheduleMeta();
      boolean that_present_scheduleMeta = true && that.isSetScheduleMeta();
      if (this_present_scheduleMeta || that_present_scheduleMeta) {
        if (!(this_present_scheduleMeta && that_present_scheduleMeta))
          return false;
        if (!this.scheduleMeta.equals(that.scheduleMeta))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      boolean present_flowId = true;
      list.add(present_flowId);
      if (present_flowId)
        list.add(flowId);

      boolean present_scheduleMeta = true && (isSetScheduleMeta());
      list.add(present_scheduleMeta);
      if (present_scheduleMeta)
        list.add(scheduleMeta);

      return list.hashCode();
    }

    @Override
    public int compareTo(appendWorkFlow_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFlowId()).compareTo(other.isSetFlowId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlowId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flowId, other.flowId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetScheduleMeta()).compareTo(other.isSetScheduleMeta());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScheduleMeta()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scheduleMeta, other.scheduleMeta);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("appendWorkFlow_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("flowId:");
      sb.append(this.flowId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("scheduleMeta:");
      if (this.scheduleMeta == null) {
        sb.append("null");
      } else {
        sb.append(this.scheduleMeta);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class appendWorkFlow_argsStandardSchemeFactory implements SchemeFactory {
      public appendWorkFlow_argsStandardScheme getScheme() {
        return new appendWorkFlow_argsStandardScheme();
      }
    }

    private static class appendWorkFlow_argsStandardScheme extends StandardScheme<appendWorkFlow_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, appendWorkFlow_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FLOW_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.flowId = iprot.readI32();
                struct.setFlowIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SCHEDULE_META
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.scheduleMeta = iprot.readString();
                struct.setScheduleMetaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, appendWorkFlow_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FLOW_ID_FIELD_DESC);
        oprot.writeI32(struct.flowId);
        oprot.writeFieldEnd();
        if (struct.scheduleMeta != null) {
          oprot.writeFieldBegin(SCHEDULE_META_FIELD_DESC);
          oprot.writeString(struct.scheduleMeta);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class appendWorkFlow_argsTupleSchemeFactory implements SchemeFactory {
      public appendWorkFlow_argsTupleScheme getScheme() {
        return new appendWorkFlow_argsTupleScheme();
      }
    }

    private static class appendWorkFlow_argsTupleScheme extends TupleScheme<appendWorkFlow_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, appendWorkFlow_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        if (struct.isSetFlowId()) {
          optionals.set(1);
        }
        if (struct.isSetScheduleMeta()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
        if (struct.isSetFlowId()) {
          oprot.writeI32(struct.flowId);
        }
        if (struct.isSetScheduleMeta()) {
          oprot.writeString(struct.scheduleMeta);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, appendWorkFlow_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.flowId = iprot.readI32();
          struct.setFlowIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.scheduleMeta = iprot.readString();
          struct.setScheduleMetaIsSet(true);
        }
      }
    }

  }

  public static class appendWorkFlow_result implements org.apache.thrift.TBase<appendWorkFlow_result, appendWorkFlow_result._Fields>, java.io.Serializable, Cloneable, Comparable<appendWorkFlow_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("appendWorkFlow_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new appendWorkFlow_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new appendWorkFlow_resultTupleSchemeFactory());
    }

    public RetInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RetInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(appendWorkFlow_result.class, metaDataMap);
    }

    public appendWorkFlow_result() {
    }

    public appendWorkFlow_result(
      RetInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public appendWorkFlow_result(appendWorkFlow_result other) {
      if (other.isSetSuccess()) {
        this.success = new RetInfo(other.success);
      }
    }

    public appendWorkFlow_result deepCopy() {
      return new appendWorkFlow_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RetInfo getSuccess() {
      return this.success;
    }

    public appendWorkFlow_result setSuccess(RetInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RetInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof appendWorkFlow_result)
        return this.equals((appendWorkFlow_result)that);
      return false;
    }

    public boolean equals(appendWorkFlow_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(appendWorkFlow_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("appendWorkFlow_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class appendWorkFlow_resultStandardSchemeFactory implements SchemeFactory {
      public appendWorkFlow_resultStandardScheme getScheme() {
        return new appendWorkFlow_resultStandardScheme();
      }
    }

    private static class appendWorkFlow_resultStandardScheme extends StandardScheme<appendWorkFlow_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, appendWorkFlow_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RetInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, appendWorkFlow_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class appendWorkFlow_resultTupleSchemeFactory implements SchemeFactory {
      public appendWorkFlow_resultTupleScheme getScheme() {
        return new appendWorkFlow_resultTupleScheme();
      }
    }

    private static class appendWorkFlow_resultTupleScheme extends TupleScheme<appendWorkFlow_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, appendWorkFlow_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, appendWorkFlow_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RetInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class registerExecutor_args implements org.apache.thrift.TBase<registerExecutor_args, registerExecutor_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerExecutor_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerExecutor_args");

    private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField REGISTER_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("registerTime", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerExecutor_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerExecutor_argsTupleSchemeFactory());
    }

    public String ip; // required
    public int port; // required
    public long registerTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IP((short)1, "ip"),
      PORT((short)2, "port"),
      REGISTER_TIME((short)3, "registerTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IP
            return IP;
          case 2: // PORT
            return PORT;
          case 3: // REGISTER_TIME
            return REGISTER_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;
    private static final int __REGISTERTIME_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REGISTER_TIME, new org.apache.thrift.meta_data.FieldMetaData("registerTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerExecutor_args.class, metaDataMap);
    }

    public registerExecutor_args() {
    }

    public registerExecutor_args(
      String ip,
      int port,
      long registerTime)
    {
      this();
      this.ip = ip;
      this.port = port;
      setPortIsSet(true);
      this.registerTime = registerTime;
      setRegisterTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerExecutor_args(registerExecutor_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetIp()) {
        this.ip = other.ip;
      }
      this.port = other.port;
      this.registerTime = other.registerTime;
    }

    public registerExecutor_args deepCopy() {
      return new registerExecutor_args(this);
    }

    @Override
    public void clear() {
      this.ip = null;
      setPortIsSet(false);
      this.port = 0;
      setRegisterTimeIsSet(false);
      this.registerTime = 0;
    }

    public String getIp() {
      return this.ip;
    }

    public registerExecutor_args setIp(String ip) {
      this.ip = ip;
      return this;
    }

    public void unsetIp() {
      this.ip = null;
    }

    /** Returns true if field ip is set (has been assigned a value) and false otherwise */
    public boolean isSetIp() {
      return this.ip != null;
    }

    public void setIpIsSet(boolean value) {
      if (!value) {
        this.ip = null;
      }
    }

    public int getPort() {
      return this.port;
    }

    public registerExecutor_args setPort(int port) {
      this.port = port;
      setPortIsSet(true);
      return this;
    }

    public void unsetPort() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public long getRegisterTime() {
      return this.registerTime;
    }

    public registerExecutor_args setRegisterTime(long registerTime) {
      this.registerTime = registerTime;
      setRegisterTimeIsSet(true);
      return this;
    }

    public void unsetRegisterTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGISTERTIME_ISSET_ID);
    }

    /** Returns true if field registerTime is set (has been assigned a value) and false otherwise */
    public boolean isSetRegisterTime() {
      return EncodingUtils.testBit(__isset_bitfield, __REGISTERTIME_ISSET_ID);
    }

    public void setRegisterTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGISTERTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IP:
        if (value == null) {
          unsetIp();
        } else {
          setIp((String)value);
        }
        break;

      case PORT:
        if (value == null) {
          unsetPort();
        } else {
          setPort((Integer)value);
        }
        break;

      case REGISTER_TIME:
        if (value == null) {
          unsetRegisterTime();
        } else {
          setRegisterTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IP:
        return getIp();

      case PORT:
        return getPort();

      case REGISTER_TIME:
        return getRegisterTime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IP:
        return isSetIp();
      case PORT:
        return isSetPort();
      case REGISTER_TIME:
        return isSetRegisterTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerExecutor_args)
        return this.equals((registerExecutor_args)that);
      return false;
    }

    public boolean equals(registerExecutor_args that) {
      if (that == null)
        return false;

      boolean this_present_ip = true && this.isSetIp();
      boolean that_present_ip = true && that.isSetIp();
      if (this_present_ip || that_present_ip) {
        if (!(this_present_ip && that_present_ip))
          return false;
        if (!this.ip.equals(that.ip))
          return false;
      }

      boolean this_present_port = true;
      boolean that_present_port = true;
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port))
          return false;
        if (this.port != that.port)
          return false;
      }

      boolean this_present_registerTime = true;
      boolean that_present_registerTime = true;
      if (this_present_registerTime || that_present_registerTime) {
        if (!(this_present_registerTime && that_present_registerTime))
          return false;
        if (this.registerTime != that.registerTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ip = true && (isSetIp());
      list.add(present_ip);
      if (present_ip)
        list.add(ip);

      boolean present_port = true;
      list.add(present_port);
      if (present_port)
        list.add(port);

      boolean present_registerTime = true;
      list.add(present_registerTime);
      if (present_registerTime)
        list.add(registerTime);

      return list.hashCode();
    }

    @Override
    public int compareTo(registerExecutor_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegisterTime()).compareTo(other.isSetRegisterTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegisterTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registerTime, other.registerTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerExecutor_args(");
      boolean first = true;

      sb.append("ip:");
      if (this.ip == null) {
        sb.append("null");
      } else {
        sb.append(this.ip);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
      if (!first) sb.append(", ");
      sb.append("registerTime:");
      sb.append(this.registerTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerExecutor_argsStandardSchemeFactory implements SchemeFactory {
      public registerExecutor_argsStandardScheme getScheme() {
        return new registerExecutor_argsStandardScheme();
      }
    }

    private static class registerExecutor_argsStandardScheme extends StandardScheme<registerExecutor_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerExecutor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ip = iprot.readString();
                struct.setIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REGISTER_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.registerTime = iprot.readI64();
                struct.setRegisterTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerExecutor_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ip != null) {
          oprot.writeFieldBegin(IP_FIELD_DESC);
          oprot.writeString(struct.ip);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(REGISTER_TIME_FIELD_DESC);
        oprot.writeI64(struct.registerTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerExecutor_argsTupleSchemeFactory implements SchemeFactory {
      public registerExecutor_argsTupleScheme getScheme() {
        return new registerExecutor_argsTupleScheme();
      }
    }

    private static class registerExecutor_argsTupleScheme extends TupleScheme<registerExecutor_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerExecutor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIp()) {
          optionals.set(0);
        }
        if (struct.isSetPort()) {
          optionals.set(1);
        }
        if (struct.isSetRegisterTime()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetIp()) {
          oprot.writeString(struct.ip);
        }
        if (struct.isSetPort()) {
          oprot.writeI32(struct.port);
        }
        if (struct.isSetRegisterTime()) {
          oprot.writeI64(struct.registerTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerExecutor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.ip = iprot.readString();
          struct.setIpIsSet(true);
        }
        if (incoming.get(1)) {
          struct.port = iprot.readI32();
          struct.setPortIsSet(true);
        }
        if (incoming.get(2)) {
          struct.registerTime = iprot.readI64();
          struct.setRegisterTimeIsSet(true);
        }
      }
    }

  }

  public static class registerExecutor_result implements org.apache.thrift.TBase<registerExecutor_result, registerExecutor_result._Fields>, java.io.Serializable, Cloneable, Comparable<registerExecutor_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerExecutor_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerExecutor_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerExecutor_resultTupleSchemeFactory());
    }

    public RetInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RetInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerExecutor_result.class, metaDataMap);
    }

    public registerExecutor_result() {
    }

    public registerExecutor_result(
      RetInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerExecutor_result(registerExecutor_result other) {
      if (other.isSetSuccess()) {
        this.success = new RetInfo(other.success);
      }
    }

    public registerExecutor_result deepCopy() {
      return new registerExecutor_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RetInfo getSuccess() {
      return this.success;
    }

    public registerExecutor_result setSuccess(RetInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RetInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerExecutor_result)
        return this.equals((registerExecutor_result)that);
      return false;
    }

    public boolean equals(registerExecutor_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(registerExecutor_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerExecutor_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerExecutor_resultStandardSchemeFactory implements SchemeFactory {
      public registerExecutor_resultStandardScheme getScheme() {
        return new registerExecutor_resultStandardScheme();
      }
    }

    private static class registerExecutor_resultStandardScheme extends StandardScheme<registerExecutor_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerExecutor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RetInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerExecutor_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerExecutor_resultTupleSchemeFactory implements SchemeFactory {
      public registerExecutor_resultTupleScheme getScheme() {
        return new registerExecutor_resultTupleScheme();
      }
    }

    private static class registerExecutor_resultTupleScheme extends TupleScheme<registerExecutor_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerExecutor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerExecutor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RetInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class executorReport_args implements org.apache.thrift.TBase<executorReport_args, executorReport_args._Fields>, java.io.Serializable, Cloneable, Comparable<executorReport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("executorReport_args");

    private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField HEART_BEAT_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("heartBeatData", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new executorReport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new executorReport_argsTupleSchemeFactory());
    }

    public String ip; // required
    public int port; // required
    public HeartBeatData heartBeatData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IP((short)1, "ip"),
      PORT((short)2, "port"),
      HEART_BEAT_DATA((short)3, "heartBeatData");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IP
            return IP;
          case 2: // PORT
            return PORT;
          case 3: // HEART_BEAT_DATA
            return HEART_BEAT_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.HEART_BEAT_DATA, new org.apache.thrift.meta_data.FieldMetaData("heartBeatData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HeartBeatData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(executorReport_args.class, metaDataMap);
    }

    public executorReport_args() {
    }

    public executorReport_args(
      String ip,
      int port,
      HeartBeatData heartBeatData)
    {
      this();
      this.ip = ip;
      this.port = port;
      setPortIsSet(true);
      this.heartBeatData = heartBeatData;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public executorReport_args(executorReport_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetIp()) {
        this.ip = other.ip;
      }
      this.port = other.port;
      if (other.isSetHeartBeatData()) {
        this.heartBeatData = new HeartBeatData(other.heartBeatData);
      }
    }

    public executorReport_args deepCopy() {
      return new executorReport_args(this);
    }

    @Override
    public void clear() {
      this.ip = null;
      setPortIsSet(false);
      this.port = 0;
      this.heartBeatData = null;
    }

    public String getIp() {
      return this.ip;
    }

    public executorReport_args setIp(String ip) {
      this.ip = ip;
      return this;
    }

    public void unsetIp() {
      this.ip = null;
    }

    /** Returns true if field ip is set (has been assigned a value) and false otherwise */
    public boolean isSetIp() {
      return this.ip != null;
    }

    public void setIpIsSet(boolean value) {
      if (!value) {
        this.ip = null;
      }
    }

    public int getPort() {
      return this.port;
    }

    public executorReport_args setPort(int port) {
      this.port = port;
      setPortIsSet(true);
      return this;
    }

    public void unsetPort() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public HeartBeatData getHeartBeatData() {
      return this.heartBeatData;
    }

    public executorReport_args setHeartBeatData(HeartBeatData heartBeatData) {
      this.heartBeatData = heartBeatData;
      return this;
    }

    public void unsetHeartBeatData() {
      this.heartBeatData = null;
    }

    /** Returns true if field heartBeatData is set (has been assigned a value) and false otherwise */
    public boolean isSetHeartBeatData() {
      return this.heartBeatData != null;
    }

    public void setHeartBeatDataIsSet(boolean value) {
      if (!value) {
        this.heartBeatData = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IP:
        if (value == null) {
          unsetIp();
        } else {
          setIp((String)value);
        }
        break;

      case PORT:
        if (value == null) {
          unsetPort();
        } else {
          setPort((Integer)value);
        }
        break;

      case HEART_BEAT_DATA:
        if (value == null) {
          unsetHeartBeatData();
        } else {
          setHeartBeatData((HeartBeatData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IP:
        return getIp();

      case PORT:
        return getPort();

      case HEART_BEAT_DATA:
        return getHeartBeatData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IP:
        return isSetIp();
      case PORT:
        return isSetPort();
      case HEART_BEAT_DATA:
        return isSetHeartBeatData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof executorReport_args)
        return this.equals((executorReport_args)that);
      return false;
    }

    public boolean equals(executorReport_args that) {
      if (that == null)
        return false;

      boolean this_present_ip = true && this.isSetIp();
      boolean that_present_ip = true && that.isSetIp();
      if (this_present_ip || that_present_ip) {
        if (!(this_present_ip && that_present_ip))
          return false;
        if (!this.ip.equals(that.ip))
          return false;
      }

      boolean this_present_port = true;
      boolean that_present_port = true;
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port))
          return false;
        if (this.port != that.port)
          return false;
      }

      boolean this_present_heartBeatData = true && this.isSetHeartBeatData();
      boolean that_present_heartBeatData = true && that.isSetHeartBeatData();
      if (this_present_heartBeatData || that_present_heartBeatData) {
        if (!(this_present_heartBeatData && that_present_heartBeatData))
          return false;
        if (!this.heartBeatData.equals(that.heartBeatData))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ip = true && (isSetIp());
      list.add(present_ip);
      if (present_ip)
        list.add(ip);

      boolean present_port = true;
      list.add(present_port);
      if (present_port)
        list.add(port);

      boolean present_heartBeatData = true && (isSetHeartBeatData());
      list.add(present_heartBeatData);
      if (present_heartBeatData)
        list.add(heartBeatData);

      return list.hashCode();
    }

    @Override
    public int compareTo(executorReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHeartBeatData()).compareTo(other.isSetHeartBeatData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeartBeatData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.heartBeatData, other.heartBeatData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("executorReport_args(");
      boolean first = true;

      sb.append("ip:");
      if (this.ip == null) {
        sb.append("null");
      } else {
        sb.append(this.ip);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
      if (!first) sb.append(", ");
      sb.append("heartBeatData:");
      if (this.heartBeatData == null) {
        sb.append("null");
      } else {
        sb.append(this.heartBeatData);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (heartBeatData != null) {
        heartBeatData.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class executorReport_argsStandardSchemeFactory implements SchemeFactory {
      public executorReport_argsStandardScheme getScheme() {
        return new executorReport_argsStandardScheme();
      }
    }

    private static class executorReport_argsStandardScheme extends StandardScheme<executorReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, executorReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ip = iprot.readString();
                struct.setIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // HEART_BEAT_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.heartBeatData = new HeartBeatData();
                struct.heartBeatData.read(iprot);
                struct.setHeartBeatDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, executorReport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ip != null) {
          oprot.writeFieldBegin(IP_FIELD_DESC);
          oprot.writeString(struct.ip);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
        if (struct.heartBeatData != null) {
          oprot.writeFieldBegin(HEART_BEAT_DATA_FIELD_DESC);
          struct.heartBeatData.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class executorReport_argsTupleSchemeFactory implements SchemeFactory {
      public executorReport_argsTupleScheme getScheme() {
        return new executorReport_argsTupleScheme();
      }
    }

    private static class executorReport_argsTupleScheme extends TupleScheme<executorReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, executorReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIp()) {
          optionals.set(0);
        }
        if (struct.isSetPort()) {
          optionals.set(1);
        }
        if (struct.isSetHeartBeatData()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetIp()) {
          oprot.writeString(struct.ip);
        }
        if (struct.isSetPort()) {
          oprot.writeI32(struct.port);
        }
        if (struct.isSetHeartBeatData()) {
          struct.heartBeatData.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, executorReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.ip = iprot.readString();
          struct.setIpIsSet(true);
        }
        if (incoming.get(1)) {
          struct.port = iprot.readI32();
          struct.setPortIsSet(true);
        }
        if (incoming.get(2)) {
          struct.heartBeatData = new HeartBeatData();
          struct.heartBeatData.read(iprot);
          struct.setHeartBeatDataIsSet(true);
        }
      }
    }

  }

  public static class executorReport_result implements org.apache.thrift.TBase<executorReport_result, executorReport_result._Fields>, java.io.Serializable, Cloneable, Comparable<executorReport_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("executorReport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new executorReport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new executorReport_resultTupleSchemeFactory());
    }

    public RetInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RetInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(executorReport_result.class, metaDataMap);
    }

    public executorReport_result() {
    }

    public executorReport_result(
      RetInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public executorReport_result(executorReport_result other) {
      if (other.isSetSuccess()) {
        this.success = new RetInfo(other.success);
      }
    }

    public executorReport_result deepCopy() {
      return new executorReport_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RetInfo getSuccess() {
      return this.success;
    }

    public executorReport_result setSuccess(RetInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RetInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof executorReport_result)
        return this.equals((executorReport_result)that);
      return false;
    }

    public boolean equals(executorReport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(executorReport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("executorReport_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class executorReport_resultStandardSchemeFactory implements SchemeFactory {
      public executorReport_resultStandardScheme getScheme() {
        return new executorReport_resultStandardScheme();
      }
    }

    private static class executorReport_resultStandardScheme extends StandardScheme<executorReport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, executorReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RetInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, executorReport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class executorReport_resultTupleSchemeFactory implements SchemeFactory {
      public executorReport_resultTupleScheme getScheme() {
        return new executorReport_resultTupleScheme();
      }
    }

    private static class executorReport_resultTupleScheme extends TupleScheme<executorReport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, executorReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, executorReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RetInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
