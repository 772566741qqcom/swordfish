/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baifendian.swordfish.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * UDF函数信息
 */
public class UdfInfo implements org.apache.thrift.TBase<UdfInfo, UdfInfo._Fields>, java.io.Serializable, Cloneable, Comparable<UdfInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UdfInfo");

  private static final org.apache.thrift.protocol.TField FUNC_FIELD_DESC = new org.apache.thrift.protocol.TField("func", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CLASS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("className", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LIB_JARS_FIELD_DESC = new org.apache.thrift.protocol.TField("libJars", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UdfInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UdfInfoTupleSchemeFactory());
  }

  /**
   * 函数名称
   */
  public String func; // required
  /**
   * 函数名称
   */
  public String className; // required
  /**
   * jar路径列表
   */
  public List<String> libJars; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 函数名称
     */
    FUNC((short)1, "func"),
    /**
     * 函数名称
     */
    CLASS_NAME((short)2, "className"),
    /**
     * jar路径列表
     */
    LIB_JARS((short)3, "libJars");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FUNC
          return FUNC;
        case 2: // CLASS_NAME
          return CLASS_NAME;
        case 3: // LIB_JARS
          return LIB_JARS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FUNC, new org.apache.thrift.meta_data.FieldMetaData("func", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLASS_NAME, new org.apache.thrift.meta_data.FieldMetaData("className", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIB_JARS, new org.apache.thrift.meta_data.FieldMetaData("libJars", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UdfInfo.class, metaDataMap);
  }

  public UdfInfo() {
  }

  public UdfInfo(
    String func,
    String className,
    List<String> libJars)
  {
    this();
    this.func = func;
    this.className = className;
    this.libJars = libJars;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UdfInfo(UdfInfo other) {
    if (other.isSetFunc()) {
      this.func = other.func;
    }
    if (other.isSetClassName()) {
      this.className = other.className;
    }
    if (other.isSetLibJars()) {
      List<String> __this__libJars = new ArrayList<String>(other.libJars);
      this.libJars = __this__libJars;
    }
  }

  public UdfInfo deepCopy() {
    return new UdfInfo(this);
  }

  @Override
  public void clear() {
    this.func = null;
    this.className = null;
    this.libJars = null;
  }

  /**
   * 函数名称
   */
  public String getFunc() {
    return this.func;
  }

  /**
   * 函数名称
   */
  public UdfInfo setFunc(String func) {
    this.func = func;
    return this;
  }

  public void unsetFunc() {
    this.func = null;
  }

  /** Returns true if field func is set (has been assigned a value) and false otherwise */
  public boolean isSetFunc() {
    return this.func != null;
  }

  public void setFuncIsSet(boolean value) {
    if (!value) {
      this.func = null;
    }
  }

  /**
   * 函数名称
   */
  public String getClassName() {
    return this.className;
  }

  /**
   * 函数名称
   */
  public UdfInfo setClassName(String className) {
    this.className = className;
    return this;
  }

  public void unsetClassName() {
    this.className = null;
  }

  /** Returns true if field className is set (has been assigned a value) and false otherwise */
  public boolean isSetClassName() {
    return this.className != null;
  }

  public void setClassNameIsSet(boolean value) {
    if (!value) {
      this.className = null;
    }
  }

  public int getLibJarsSize() {
    return (this.libJars == null) ? 0 : this.libJars.size();
  }

  public java.util.Iterator<String> getLibJarsIterator() {
    return (this.libJars == null) ? null : this.libJars.iterator();
  }

  public void addToLibJars(String elem) {
    if (this.libJars == null) {
      this.libJars = new ArrayList<String>();
    }
    this.libJars.add(elem);
  }

  /**
   * jar路径列表
   */
  public List<String> getLibJars() {
    return this.libJars;
  }

  /**
   * jar路径列表
   */
  public UdfInfo setLibJars(List<String> libJars) {
    this.libJars = libJars;
    return this;
  }

  public void unsetLibJars() {
    this.libJars = null;
  }

  /** Returns true if field libJars is set (has been assigned a value) and false otherwise */
  public boolean isSetLibJars() {
    return this.libJars != null;
  }

  public void setLibJarsIsSet(boolean value) {
    if (!value) {
      this.libJars = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FUNC:
      if (value == null) {
        unsetFunc();
      } else {
        setFunc((String)value);
      }
      break;

    case CLASS_NAME:
      if (value == null) {
        unsetClassName();
      } else {
        setClassName((String)value);
      }
      break;

    case LIB_JARS:
      if (value == null) {
        unsetLibJars();
      } else {
        setLibJars((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FUNC:
      return getFunc();

    case CLASS_NAME:
      return getClassName();

    case LIB_JARS:
      return getLibJars();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FUNC:
      return isSetFunc();
    case CLASS_NAME:
      return isSetClassName();
    case LIB_JARS:
      return isSetLibJars();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UdfInfo)
      return this.equals((UdfInfo)that);
    return false;
  }

  public boolean equals(UdfInfo that) {
    if (that == null)
      return false;

    boolean this_present_func = true && this.isSetFunc();
    boolean that_present_func = true && that.isSetFunc();
    if (this_present_func || that_present_func) {
      if (!(this_present_func && that_present_func))
        return false;
      if (!this.func.equals(that.func))
        return false;
    }

    boolean this_present_className = true && this.isSetClassName();
    boolean that_present_className = true && that.isSetClassName();
    if (this_present_className || that_present_className) {
      if (!(this_present_className && that_present_className))
        return false;
      if (!this.className.equals(that.className))
        return false;
    }

    boolean this_present_libJars = true && this.isSetLibJars();
    boolean that_present_libJars = true && that.isSetLibJars();
    if (this_present_libJars || that_present_libJars) {
      if (!(this_present_libJars && that_present_libJars))
        return false;
      if (!this.libJars.equals(that.libJars))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(UdfInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFunc()).compareTo(other.isSetFunc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFunc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.func, other.func);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClassName()).compareTo(other.isSetClassName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClassName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.className, other.className);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLibJars()).compareTo(other.isSetLibJars());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLibJars()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libJars, other.libJars);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UdfInfo(");
    boolean first = true;

    sb.append("func:");
    if (this.func == null) {
      sb.append("null");
    } else {
      sb.append(this.func);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("className:");
    if (this.className == null) {
      sb.append("null");
    } else {
      sb.append(this.className);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("libJars:");
    if (this.libJars == null) {
      sb.append("null");
    } else {
      sb.append(this.libJars);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UdfInfoStandardSchemeFactory implements SchemeFactory {
    public UdfInfoStandardScheme getScheme() {
      return new UdfInfoStandardScheme();
    }
  }

  private static class UdfInfoStandardScheme extends StandardScheme<UdfInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UdfInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FUNC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.func = iprot.readString();
              struct.setFuncIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLASS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.className = iprot.readString();
              struct.setClassNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LIB_JARS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.libJars = new ArrayList<String>(_list24.size);
                for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                {
                  String _elem26;
                  _elem26 = iprot.readString();
                  struct.libJars.add(_elem26);
                }
                iprot.readListEnd();
              }
              struct.setLibJarsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UdfInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.func != null) {
        oprot.writeFieldBegin(FUNC_FIELD_DESC);
        oprot.writeString(struct.func);
        oprot.writeFieldEnd();
      }
      if (struct.className != null) {
        oprot.writeFieldBegin(CLASS_NAME_FIELD_DESC);
        oprot.writeString(struct.className);
        oprot.writeFieldEnd();
      }
      if (struct.libJars != null) {
        oprot.writeFieldBegin(LIB_JARS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.libJars.size()));
          for (String _iter27 : struct.libJars)
          {
            oprot.writeString(_iter27);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UdfInfoTupleSchemeFactory implements SchemeFactory {
    public UdfInfoTupleScheme getScheme() {
      return new UdfInfoTupleScheme();
    }
  }

  private static class UdfInfoTupleScheme extends TupleScheme<UdfInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UdfInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFunc()) {
        optionals.set(0);
      }
      if (struct.isSetClassName()) {
        optionals.set(1);
      }
      if (struct.isSetLibJars()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetFunc()) {
        oprot.writeString(struct.func);
      }
      if (struct.isSetClassName()) {
        oprot.writeString(struct.className);
      }
      if (struct.isSetLibJars()) {
        {
          oprot.writeI32(struct.libJars.size());
          for (String _iter28 : struct.libJars)
          {
            oprot.writeString(_iter28);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UdfInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.func = iprot.readString();
        struct.setFuncIsSet(true);
      }
      if (incoming.get(1)) {
        struct.className = iprot.readString();
        struct.setClassNameIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.libJars = new ArrayList<String>(_list29.size);
          for (int _i30 = 0; _i30 < _list29.size; ++_i30)
          {
            String _elem31;
            _elem31 = iprot.readString();
            struct.libJars.add(_elem31);
          }
        }
        struct.setLibJarsIsSet(true);
      }
    }
  }

}

